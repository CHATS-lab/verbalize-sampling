[
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S is a palindrome (reads the same forward and backward). If it is, print \"YES\", otherwise print \"NO\".Input Format:The first line contains the string S (1 ≤ |S| ≤ 1000).Output Format:Print \"YES\" if S is a palindrome, otherwise print \"NO\".Constraints:- 1 ≤ |S| ≤ 1000- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n    \n    # Read the input string (strip to remove the trailing newline)\n    s = sys.stdin.readline().strip()\n    \n    # Check if the string is equal to its reverse\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the sum of all elements that appear exactly once in the array. If no such element exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer, the sum of all elements that appear exactly once.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # Ensure we only take n numbers even if extra exist\n    \n    freq = Counter(nums)\n    unique_sum = sum(num for num, cnt in freq.items() if cnt == 1)\n    \n    print(unique_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray (contiguous elements) with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) — the elements of the array.Output:Print a single integer — the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only even numbers. If there are no even numbers in the array, output 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers, nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the length of the longest contiguous subarray consisting only of even numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    max_len = 0\n    current = 0\n    for x in nums:\n        if x % 2 == 0:\n            current += 1\n            if current > max_len:\n                max_len = current\n        else:\n            current = 0\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray with all distinct elements.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    seen = dict()          # value -> last index where it appeared\n    left = 0               # left boundary of current window\n    best = 0\n    \n    for right, value in enumerate(nums):\n        # If value reappears inside current window, move left pointer\n        if value in seen and seen[value] >= left:\n            left = seen[value] + 1\n        seen[value] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray that contains only even numbers. If there is no such subarray, output 0.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the array.The second line contains N space-separated integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).Output Format:Print a single integer representing the length of the longest contiguous subarray of even numbers.Constraints:1 ≤ N ≤ 10^5−10^9 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    max_len = 0\n    current_len = 0\n\n    for num in nums:\n        if num % 2 == 0:        # even number\n            current_len += 1\n            if current_len > max_len:\n                max_len = current_len\n        else:                   # odd number, reset counter\n            current_len = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the length of the longest contiguous subarray whose sum is less than or equal to k. If no such subarray exists, output 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the maximum length of a contiguous subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^91 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n    \n    max_len = 0\n    current_sum = 0\n    left = 0\n    \n    for right in range(n):\n        current_sum += nums[right]\n        # shrink window from the left while sum exceeds k\n        while current_sum > k and left <= right:\n            current_sum -= nums[left]\n            left += 1\n        # now current_sum <= k\n        max_len = max(max_len, right - left + 1)\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of distinct elements whose sum is exactly equal to a given integer k. If such a pair exists, output \"YES\"; otherwise, output \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).Output Format:Print \"YES\" if there exists a pair of distinct elements whose sum is k. Otherwise, print \"NO\".Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k, a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for x in nums:\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray that contains only unique elements (no duplicates). If all elements are unique, output N.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9), the elements of the array.Output:Output a single integer, the maximum length of a contiguous subarray with all unique elements.Constraints:1 ≤ N ≤ 10^51 ≤ Ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    seen = {}\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(arr):\n        # If val already in current window, move left pointer\n        if val in seen and seen[val] >= left:\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:          # odd\n            odd_count += 1\n        else:                # even\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether you can rearrange its characters to form a palindrome. If possible, print \"YES\"; otherwise, print \"NO\".Input:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output:Print \"YES\" if it's possible to rearrange S to form a palindrome, otherwise print \"NO\".Constraints:- 1 ≤ |S| ≤ 10^5- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of `s` can be arranged into a palindrome.\n    \"\"\"\n    counts = Counter(s)\n    # Count how many characters have an odd frequency\n    odd = sum(1 for c in counts.values() if c % 2)\n    # For even length strings, no odd counts allowed.\n    # For odd length strings, exactly one odd count allowed.\n    return odd <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices.  Input Format:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:  - Print a single integer, the number of distinct pairs whose sum is even.Constraints:- 1 ≤ n ≤ 10^5  - 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Output the total number of such pairs.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest subarray with all elements distinct. A subarray is a contiguous section of the array. Print the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    \n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Output the length of such a subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer—the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    seen = set()\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Shrink window until val can be added (unique)\n        while val in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(val)\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Output the minimum number of moves needed.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimum_moves(nums):\n    \"\"\"\n    Returns the minimum number of moves (sum of absolute differences to the median).\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    median = nums[n // 2]          # either middle works for even n\n    return sum(abs(x - median) for x in nums)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(minimum_moves(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements distinct. The subarray must be contiguous. If there are multiple subarrays with the same maximum length, output the length.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}                 # value -> latest index encountered\n    left = 0                      # left boundary of current window (inclusive)\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate inside current window; move left boundary\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. If multiple such subarrays exist, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer — the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_index = {}              # stores the most recent index of each value\n    left = 0                     # left boundary of the current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        if val in last_index and last_index[val] >= left:\n            # val is repeated inside the current window: shrink window from left\n            left = last_index[val] + 1\n        last_index[val] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S can be rearranged to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".Input:A single line containing the string S.Output:A single line with \"YES\" if S can be rearranged into a palindrome, or \"NO\" otherwise.Constraints:1 ≤ |S| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be permuted to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is exactly k. If no such subarray exists, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer representing the length of the longest subarray with sum exactly k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose sum is exactly k.\n    Uses a prefix-sum + hash-map approach in O(n) time and O(n) extra space.\n    \"\"\"\n    prefix_index = {0: -1}           # prefix_sum -> earliest index where it occurs\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current_prefix - k) was seen before, a subarray summing to k ends here\n        if (prefix_sum - k) in prefix_index:\n            best_len = max(best_len, i - prefix_index[prefix_sum - k])\n\n        # Record earliest occurrence of current prefix sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different.  Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.  Output:Print a single integer: the number of unique pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))  # ensure only n numbers are read\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # number of pairs with both even + both odd\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    result = even_pairs + odd_pairs\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the length of the longest subarray with all unique elements (no repeated numbers). A subarray is a contiguous part of the array.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer: the length of the longest subarray with all unique elements.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of pairs (i, j) with 0 ≤ i < j < n where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Count evens and odds\n    evens = odds = 0\n    for i in range(1, n + 1):\n        if int(data[i]) & 1:\n            odds += 1\n        else:\n            evens += 1\n    # Number of pairs with even sum: C(evens,2) + C(odds,2)\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine whether it is possible to rearrange the elements of the array to form a palindrome. An array can form a palindrome if, after rearrangement, it reads the same forwards and backwards. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).Output Format:Output a single line: \"YES\" if the array can be rearranged to form a palindrome, or \"NO\" otherwise.Constraints:1 ≤ n ≤ 10^51 ≤ a_i ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(arr):\n    \"\"\"\n    Returns True if the multiset `arr` can be rearranged to form a palindrome.\n    \"\"\"\n    freq = Counter(arr)\n    odd_counts = sum(1 for v in freq.values() if v % 2)\n    return odd_counts <= 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    print(\"YES\" if can_form_palindrome(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Your task is to determine the length of the longest contiguous subarray where the sum of its elements is equal to zero. If no such subarray exists, output 0.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.- The second line contains N integers A_1, A_2, ..., A_N (-10^9 ≤ A_i ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with sum zero.Constraints:- 1 ≤ N ≤ 10^5- -10^9 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    prefix_first_index = {0: -1}      # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n        if prefix_sum in prefix_first_index:\n            # We have seen this prefix sum before; subarray between\n            # previous index+1 and current i has zero sum.\n            length = i - prefix_first_index[prefix_sum]\n            if length > max_len:\n                max_len = length\n        else:\n            # Record the first occurrence of this prefix sum.\n            prefix_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is even. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of valid pairs (i, j) where i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of distinct pairs with an even sum.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of ways to pick 2 evens plus number of ways to pick 2 odds\n    res = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # prefix_sum : first index where this prefix sum occurs\n    first_index = {0: -1}      # to handle subarrays starting at index 0\n    prefix = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix += val\n\n        # If we've seen prefix − k before,\n        # the subarray (first_index[prefix-k] + 1, …, i) sums to k\n        needed = prefix - k\n        if needed in first_index:\n            best_len = max(best_len, i - first_index[needed])\n\n        # Only store the first time we see a prefix sum, because we want\n        # the longest distance (earlier index → longer subarray)\n        if prefix not in first_index:\n            first_index[prefix] = i\n\n    return best_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> last index it appeared at\n    left = 0               # left border of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window -> move left beyond its previous position\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two numbers are considered a pair if their indices are different and the sum is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    for num in nums:\n        if num & 1 == 0:    # faster than num % 2 == 0\n            even_cnt += 1\n\n    odd_cnt = n - even_cnt\n\n    # combinations of two evens + combinations of two odds\n    result = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S can be rearranged to form a palindrome. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single string S (1 ≤ |S| ≤ 10^5), consisting only of lowercase English letters.Output Format:Output \"YES\" if the string can be rearranged to form a palindrome, or \"NO\" otherwise.Constraints:1 ≤ |S| ≤ 10^5S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of `s` can be a palindrome, else False.\n    A string can be rearranged into a palindrome iff the number of characters\n    with odd frequency is at most one.\n    \"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for cnt in freq.values() if cnt % 2)\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:       # odd\n            odd_count += 1\n        else:             # even\n            even_count += 1\n\n    # Number of pairs with even sum: choose 2 evens or 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of pairs whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to choose 2 evens + 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. It is guaranteed that exactly one solution exists, and you may not use the same element twice. Return the answer as a list of two integers [i, j] where i < j.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output two integers i and j (0 ≤ i < j < n), the indices of the two numbers that sum up to target.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9- Exactly one valid answer exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            print(seen[complement], i)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices differ. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs (i, j) where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for x in nums:\n        if x & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, find the length of the longest substring that contains no repeating characters.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S.The second line contains the string S.Output:Print a single integer — the length of the longest substring with all unique characters.Constraints:1 ≤ n ≤ 10^5S consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters\n    using a sliding-window approach.\n    \"\"\"\n    last_pos = [-1] * 26          # last seen position for each lowercase letter\n    max_len = 0\n    left = 0                      # left boundary of current window\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97        # map 'a'..'z' -> 0..25\n        if last_pos[idx] >= left: # character repeated inside current window\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])              # length given, can be ignored for logic\n    s = data[1] if len(data) > 1 else \"\"\n    # Ensure we don't process more characters than declared (defensive)\n    s = s[:n]\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k. If there are multiple such subarrays, return the length of any one of them. If there is no such subarray, return 0.Input Format:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^5) separated by spaces.Output Format:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^5|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_index = {0: -1}            # prefix_sum : earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        target = prefix_sum - k\n        if target in prefix_index:\n            max_len = max(max_len, i - prefix_index[target])\n        # only keep the first occurrence to maximize length\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Output a single integer, the number of distinct pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])  # safe even if extra whitespace\n    \n    even_count = 0\n    odd_count = 0\n    \n    for x in nums:\n        if x & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    \n    # Number of ways to choose 2 items from k items: k * (k - 1) // 2\n    ans = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray with all distinct elements. A subarray is a contiguous part of the array. If the array is empty, return 0.Input:The first line contains an integer n (0 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                       # no input provided\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # works even when n == 0\n\n    if n == 0:\n        print(0)\n        return\n\n    last_pos = {}          # value -> last index where it appeared\n    start = 0              # left edge of the current window\n    best = 0               # length of the longest distinct subarray found\n\n    for i, val in enumerate(nums):\n        # If val already in window, move start right after its previous occurrence\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer: the number of distinct pairs (i, j) where the sum nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, your task is to find the length of the longest contiguous subarray with all unique elements (no duplicates). Return the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> last index seen\n    left = 0               # left boundary of current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window; move left just after previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    containing all distinct elements.\n    \"\"\"\n    last_pos = {}           # value -> most recent index\n    best = 0\n    left = 0                # left end of current window (inclusive)\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # 'val' repeats inside current window – move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))   # ensure we only consume n numbers\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S can be rearranged to form a palindrome. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single string S (1 ≤ |S| ≤ 1000).Output Format:Output \"YES\" if the string can be rearranged into a palindrome, otherwise output \"NO\".Constraints:- 1 ≤ |S| ≤ 1000- S contains only lowercase English letters ('a'–'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged\n    to form a palindrome, otherwise False.\n    \"\"\"\n    from collections import Counter\n\n    freq = Counter(s)\n    odd_counts = sum(1 for c in freq.values() if c % 2)\n\n    # For even length string we need 0 odd counts,\n    # for odd length string we need exactly 1 odd count.\n    return odd_counts <= 1\n\n\ndef main() -> None:\n    import sys\n\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5).- The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of two distinct elements in nums such that their sum equals target. If there are multiple solutions, return any one of them. If no such pair exists, return -1 -1.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and target (-10^9 ≤ target ≤ 10^9).- The second line contains n space-separated integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output two integers, the 0-based indices of the two elements whose sum is equal to target. If no such pair exists, output -1 -1.Constraints:- Each input will have at most one solution.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    index_map = {}                          # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in index_map:\n            print(index_map[complement], i)\n            return\n        # store only the first occurrence to keep indices distinct\n        if num not in index_map:\n            index_map[num] = i\n\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs where the sum is even.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    cnt_even = cnt_odd = 0\n    for x in nums:\n        if x & 1:\n            cnt_odd += 1\n        else:\n            cnt_even += 1\n\n    # Number of pairs of evens + number of pairs of odds\n    res = cnt_even * (cnt_even - 1) // 2 + cnt_odd * (cnt_odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest subarray (contiguous elements) whose sum is equal to a given integer k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:Print a single integer — the length of the longest subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index encountered\n    prefix_sum = 0\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we've ever seen prefix_sum - k, subarray (that index+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > longest:\n                longest = length\n\n        # Only store the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, determine whether there exist two distinct indices i and j such that nums[i] == nums[j] and the absolute difference between i and j is at most k. Output \"YES\" if such indices exist, otherwise output \"NO\".Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^5).- The second line contains n integers nums[1], nums[2], ..., nums[n], where -10^9 ≤ nums[i] ≤ 10^9.Output Format:- Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    \n    # Special-case: if k == 0, distance between two distinct indices\n    # can never be 0, so answer is always NO.\n    if k == 0:\n        print(\"NO\")\n        return\n    \n    nums = list(map(int, data[2:2 + n]))\n    \n    last_pos = {}          # value -> latest index seen (0-based)\n    \n    for idx, val in enumerate(nums):\n        if val in last_pos and idx - last_pos[val] <= k:\n            print(\"YES\")\n            return\n        last_pos[val] = idx\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of pairs (i, j) where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for x in nums:\n        if x & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to choose 2 items from k items: k * (k - 1) // 2\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, determine the smallest integer k such that the sum of the first k positive integers is greater than or equal to n. That is, find the minimum k such that 1 + 2 + ... + k ≥ n.Input:A single line containing an integer n (1 ≤ n ≤ 10^9).Output:Print the smallest integer k satisfying the condition.Constraints:1 ≤ n ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    # Read the single integer n\n    n_line = sys.stdin.readline()\n    if not n_line:\n        return\n    n = int(n_line.strip())\n\n    # Using the formula for the triangular numbers:\n    # k(k + 1) / 2 >= n   --> solve quadratic for k\n    # k = ceil( (sqrt(8n + 1) - 1) / 2 )\n    k = math.ceil((math.sqrt(8 * n + 1) - 1) / 2)\n\n    # Output the result\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays, return the sum of the leftmost one. If k is greater than n, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer representing the maximum sum as described.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    \n    # If the window size is larger than the array, no subarray of size k exists.\n    if k > n:\n        print(0)\n        return\n    \n    # Initial window sum (first k elements)\n    window_sum = sum(nums[:k])\n    max_sum = window_sum          # best sum found so far\n    # Slide the window from position 1 to n-k\n    for i in range(k, n):\n        window_sum += nums[i]      # add the next element\n        window_sum -= nums[i-k]    # remove the element that falls out\n        \n        # Update the max sum ONLY if we find a strictly larger sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Your task is to determine whether it is possible to rearrange the characters of S to form a palindrome. If possible, output \"YES\". Otherwise, output \"NO\".Input Format:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output Format:Output \"YES\" if it is possible to rearrange S into a palindrome, otherwise output \"NO\".Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if any permutation of s can be a palindrome.\n    A string can be rearranged into a palindrome iff\n    the number of characters that appear an odd number of\n    times is at most one.\n    \"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for v in freq.values() if v % 2)\n    return odd_count <= 1\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray where the sum of all its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:Output a single integer representing the length of the longest contiguous subarray whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}    # prefix sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        needed = prefix_sum - k\n        if needed in prefix_to_index:\n            best = max(best, i - prefix_to_index[needed])\n\n        # store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray whose elements sum to zero. If there is no such subarray, output 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9), the elements of the array.Output:Output a single integer: the length of the longest contiguous subarray with sum zero.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    prefix_first_idx = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for idx, value in enumerate(arr):\n        prefix_sum += value\n\n        if prefix_sum in prefix_first_idx:\n            # zero-sum subarray exists between previous index+1 and current idx\n            curr_len = idx - prefix_first_idx[prefix_sum]\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            # store first time this prefix_sum appears\n            prefix_first_idx[prefix_sum] = idx\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return this length.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}          # value -> most recent index\n    left = 0               # left boundary of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1      # shrink window past the duplicate\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^6).Output:Print a single integer, the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_pos = {}            # value -> latest index it appeared\n    left = 0                 # left boundary of current window\n    best = 0                 # longest length found\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate found inside current window: shrink window\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray whose sum equals k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_index = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we've seen (prefix_sum - k) before, subarray (prev_idx+1 .. i) sums to k\n        if (prefix_sum - k) in prefix_to_index:\n            best_len = max(best_len, i - prefix_to_index[prefix_sum - k])\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), representing the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray whose sum is exactly k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    prefix_to_first_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, a k-sum subarray ends at i\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > best_len:\n                best_len = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray in which the sum of the elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ k ≤ 10^9−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix_sum -> first index where it appears\n    first_pos = {0: -1}       # sum 0 occurs before the array starts\n    prefix = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix += num\n\n        # If we have seen prefix - k before, we found a subarray ending at i with sum k\n        need = prefix - k\n        if need in first_pos:\n            best_len = max(best_len, i - first_pos[need])\n\n        # Record the first occurrence of this prefix sum\n        if prefix not in first_pos:\n            first_pos[prefix] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a non-empty subarray with all elements unique. The subarray must be contiguous and contain no repeated elements. Return the maximum possible sum.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the maximum sum of a contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_unique_subarray_sum(nums):\n    seen = set()           # elements inside the current window\n    left = 0               # left boundary of the window\n    current_sum = 0        # sum of elements inside the window\n    best = 0               # best (maximum) sum found so far\n    \n    for right, value in enumerate(nums):\n        # If value already in window, shrink window from the left\n        while value in seen:\n            seen.remove(nums[left])\n            current_sum -= nums[left]\n            left += 1\n        \n        # Expand window to include current value\n        seen.add(value)\n        current_sum += value\n        \n        # Update answer\n        if current_sum > best:\n            best = current_sum\n            \n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = max_unique_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs of indices (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    result = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the total number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])              # length of the array (not actually needed further)\n    # Count evens and odds among the remaining integers\n    evens = odds = 0\n    for num in map(int, data[1:]):\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n    # Number of pairs with even sum: choose 2 evens or 2 odds\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices differ.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Output a single integer: the number of distinct pairs (i, j) with 0 ≤ i < j < n such that nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray such that the sum of its elements is exactly k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray whose sum is exactly k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there is a previous prefix with value (prefix_sum - k),\n        # then the subarray between that index+1 and current i sums to k.\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[target])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements equal. If there are multiple such subarrays, return the length of any one of them.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Output a single integer — the length of the longest contiguous subarray with all elements equal.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Handle edge case when array length is 0 (though constraints say n ≥ 1)\n    if n == 0:\n        print(0)\n        return\n\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, n):\n        if nums[i] == nums[i - 1]:\n            current_len += 1\n            if current_len > max_len:\n                max_len = current_len\n        else:\n            current_len = 1\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"balanced\" if the sum of all its elements is zero. Your task is to count the number of balanced subarrays in nums.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer: the number of balanced subarrays in nums.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1          # empty prefix\n    prefix_sum = 0\n    balanced_subarrays = 0\n\n    for x in nums:\n        prefix_sum += x\n        balanced_subarrays += prefix_count[prefix_sum]   # all previous same prefix sums form balanced subarrays\n        prefix_count[prefix_sum] += 1\n\n    print(balanced_subarrays)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements in the subarray is at most k.  Input:  The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^9).  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).  Output:  Print a single integer: the maximum length of a valid subarray as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    min_d = deque()       # increasing values\n    max_d = deque()       # decreasing values\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        # insert into min deque\n        while min_d and val < min_d[-1]:\n            min_d.pop()\n        min_d.append(val)\n        \n        # insert into max deque\n        while max_d and val > max_d[-1]:\n            max_d.pop()\n        max_d.append(val)\n        \n        # shrink window until it becomes valid\n        while max_d[0] - min_d[0] > k:\n            if nums[left] == min_d[0]:\n                min_d.popleft()\n            if nums[left] == max_d[0]:\n                max_d.popleft()\n            left += 1\n        \n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray with sum equal to K. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}    # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If (current prefix - k) has been seen, we found a subarray ending at i with sum k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[target])\n\n        # Store the earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array A of N integers, find the length of the longest contiguous subarray whose sum is divisible by a given integer K. If no such subarray exists, output 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^9).Output Format:Output a single integer: the length of the longest contiguous subarray whose sum is divisible by K.Constraints:1 ≤ N ≤ 10^51 ≤ K ≤ 10^9|A_i| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    # Dictionary to store the first occurrence of each prefix remainder\n    first_occurrence = {0: -1}      # remainder 0 seen at virtual index -1\n    prefix = 0\n    best_len = 0\n\n    for idx, val in enumerate(arr):\n        prefix += val\n        remainder = prefix % k       # Python handles negative numbers correctly\n\n        # If we've seen this remainder before, update best_len\n        if remainder in first_occurrence:\n            length = idx - first_occurrence[remainder]\n            if length > best_len:\n                best_len = length\n        else:\n            # Store only the first occurrence to maximize the subarray length\n            first_occurrence[remainder] = idx\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k.  Input Format:  The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.  Output Format:  Print a single integer — the length of the longest valid subarray.Constraints:  1 ≤ n ≤ 10^5  0 ≤ k ≤ 10^9  −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_len(nums, k):\n    min_dq = deque()     # increasing deque – front is current minimum\n    max_dq = deque()     # decreasing deque – front is current maximum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques with the new value\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # shrink window from the left until it becomes valid\n        while max_dq[0] - min_dq[0] > k:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_len(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray where the sum of the elements is equal to K. If there is no such subarray, output 0.Input Format:- The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).- The second line contains N integers a_1, a_2, ..., a_N (|a_i| ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray with sum K.Constraints:- 1 ≤ N ≤ 10^5- |K| ≤ 10^9- |a_i| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_to_first_idx = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If (current prefix - K) was seen before, we found a subarray summing to K\n        needed = prefix_sum - K\n        if needed in prefix_to_first_idx:\n            length = i - prefix_to_first_idx[needed]\n            if length > best_len:\n                best_len = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray with all elements being distinct. If there are multiple such subarrays, output the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer: the length of the longest contiguous subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_seen = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # If value already seen and is inside current window,\n        # move left pointer right after its previous occurrence.\n        if value in last_seen and last_seen[value] >= left:\n            left = last_seen[value] + 1\n        last_seen[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Two pairs are considered different if their indices are different. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the number of distinct pairs with even sums.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]            # there are exactly n numbers following n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:                 # odd\n            odd_count += 1\n        else:                       # even\n            even_count += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs_even_sum = even_count * (even_count - 1) // 2 + \\\n                     odd_count * (odd_count - 1) // 2\n\n    print(pairs_even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subsequence such that all elements in the subsequence are consecutive integers (not necessarily in order). For example, given nums = [100, 4, 200, 1, 3, 2], the longest consecutive subsequence is [1, 2, 3, 4], so the answer is 4.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the length of the longest consecutive subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_consecutive(nums):\n    \"\"\"\n    Returns the length of the longest set of consecutive integers\n    that can be picked from `nums`. Order inside `nums` is irrelevant.\n    \"\"\"\n    num_set = set(nums)                       # O(n) memory\n    longest = 0\n\n    for num in num_set:                       # each distinct value visited once\n        # Only start counting if `num` is the left-most element\n        if num - 1 not in num_set:\n            length = 1\n            current = num + 1\n            while current in num_set:         # walk right as far as possible\n                length += 1\n                current += 1\n            longest = max(longest, length)\n\n    return longest\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])          # we don't actually need it except to advance index\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_consecutive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Print a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> last index where it appeared\n    left = 0                 # left end of current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # value repeated inside current window, move left just after its last occurrence\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, output the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the array elements.Output:Print a single integer, the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> last index where it appeared\n    start = 0              # left end of current window\n    best = 0               # length of the longest valid window found so far\n\n    for i, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= start:\n            # duplicate inside current window; move start right after its last occurrence\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Output the minimum number of moves needed.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the minimum number of moves to make all array elements equal.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Find median\n    nums.sort()\n    median = nums[n // 2]          # works for both even and odd n\n\n    # Compute total moves\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of only lowercase English letters, find the length of the longest substring without repeating characters.Input:The first line contains a single string s (1 ≤ |s| ≤ 10^4), where |s| denotes the length of s.Output:Print a single integer: the length of the longest substring of s that contains no repeated characters.Constraints:- 1 ≤ |s| ≤ 10^4- s consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    Uses a sliding-window technique with last seen indices.\n    \"\"\"\n    # For lowercase English letters we can use a fixed-size list for speed.\n    last_seen = [-1] * 26       # last_seen[c] -> last index of char c\n    left = 0                    # left boundary of current window\n    best = 0                    # best (maximum) length found so far\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97      # map 'a'..'z' -> 0..25\n        if last_seen[idx] >= left:\n            # Character repeated inside the current window → move left past it\n            left = last_seen[idx] + 1\n        last_seen[idx] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()    # read the string and drop the newline\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. The subarray must consist of consecutive elements from nums. Return the maximum length found.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1], where each nums[i] is in the range [-10^9, 10^9].Output Format:Output a single integer — the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:          # no input\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the length of the longest contiguous subarray whose sum is exactly k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9), where n is the length of the array and k is the target sum.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), representing the array.Output:Print a single integer — the length of the longest contiguous subarray whose sum is k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Dictionary to store the earliest index where a given prefix sum appears.\n    # We initialize with prefix sum 0 at index -1 to handle subarrays that start at index 0.\n    first_idx_of_sum = {0: -1}\n\n    prefix_sum = 0\n    best_len = 0\n\n    for i, value in enumerate(nums):\n        prefix_sum += value\n\n        # If we have seen prefix_sum - k before, there is a subarray summing to k\n        if (prefix_sum - k) in first_idx_of_sum:\n            sub_len = i - first_idx_of_sum[prefix_sum - k]\n            if sub_len > best_len:\n                best_len = sub_len\n\n        # Record the first occurrence of this prefix_sum\n        if prefix_sum not in first_idx_of_sum:\n            first_idx_of_sum[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.The second line contains the string S of length n.Output:Print a single integer — the length of the longest substring of S containing all distinct characters.Constraints:1 ≤ n ≤ 10^5S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}            # stores last position of each character\n    start = 0                # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        # if character seen and inside current window -> move start\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # first line is n (can be ignored except for validation)\n    # second line is the string\n    s = data[1].strip() if len(data) > 1 else \"\"\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers, nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer, the smallest positive integer not present in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    # We only care about numbers in the range [1, n + 1]\n    # because the smallest missing positive is guaranteed\n    # to be within this range.\n    present = [False] * (n + 2)   # indices 0 .. n+1\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # Find the first index (starting from 1) that is False\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).- The second line contains n space-separated integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Print a single integer: the length of the longest contiguous subarray whose elements sum to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n        # Check if there is a previous prefix that makes current subarray sum to k\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > best_len:\n                best_len = length\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements in the subarray does not exceed 1.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the length of the longest such subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose\n    max – min ≤ 1.\n    \"\"\"\n    max_q = deque()          # decreasing queue for current window maximums\n    min_q = deque()          # increasing queue for current window minimums\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # push into max_q (keep decreasing)\n        while max_q and val > max_q[-1]:\n            max_q.pop()\n        max_q.append(val)\n\n        # push into min_q (keep increasing)\n        while min_q and val < min_q[-1]:\n            min_q.pop()\n        min_q.append(val)\n\n        # shrink window while condition violated\n        while max_q[0] - min_q[0] > 1:\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            left += 1\n\n        # update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer — the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current prefix - k) has been seen, subarray ending here sums to k\n        if (prefix_sum - k) in prefix_to_index:\n            current_len = i - prefix_to_index[prefix_sum - k]\n            if current_len > max_len:\n                max_len = current_len\n\n        # Store the earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string S.- The second line contains the string S of length N.Output Format:- Output a single integer representing the length of the longest substring without repeating characters.Constraints:- 1 ≤ N ≤ 10^5- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}                # last seen position of each character\n    start = 0                    # start index of the current window\n    best_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # duplicate found inside current window -> shrink from the left\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best_len = max(best_len, i - start + 1)\n\n    return best_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    # First value is N, second is the string\n    # We ignore N because we can get length from the string itself.\n    s = data[1] if len(data) > 1 else ''\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number. Two pairs are considered different if their indices are different.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer — the number of distinct pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    cnt_even = cnt_odd = 0\n    for num in nums:\n        if num & 1:\n            cnt_odd += 1\n        else:\n            cnt_even += 1\n    \n    # number of ways to choose 2 items from k items: k * (k - 1) // 2\n    pairs_even_sum = cnt_even * (cnt_even - 1) // 2 + cnt_odd * (cnt_odd - 1) // 2\n    \n    print(pairs_even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly equal to a given integer target. If there is no such subarray, output 0.Input Format:- The first line contains two integers n and target (1 ≤ n ≤ 10^5, |target| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:- Print a single integer: the length of the longest contiguous subarray whose sum is equal to target.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |target| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum(nums, target):\n    prefix_to_first_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If a subarray starting from index 0 gives the target\n        if prefix_sum == target:\n            best_len = max(best_len, i + 1)\n\n        # If we have seen (prefix_sum - target) before, update best_len\n        need = prefix_sum - target\n        if need in prefix_to_first_index:\n            start_idx = prefix_to_first_index[need]\n            best_len = max(best_len, i - start_idx)\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return best_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, target = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum(nums, target)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this missing integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer — the smallest positive integer not present in nums.Constraints:- 1 ≤ n ≤ 10^5- −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    positives = {x for x in nums if x > 0}\n\n    missing = 1\n    while missing in positives:\n        missing += 1\n\n    print(missing)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subarray with all unique elements (no repeated values). The subarray must be contiguous. If the array is empty, return 0.Input Format:The first line contains an integer n (0 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the array.Output Format:Output a single integer: the length of the longest subarray with all unique elements.Constraints:0 ≤ n ≤ 10^51 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(arr):\n    last_index = {}\n    start = 0\n    best = 0\n\n    for i, value in enumerate(arr):\n        if value in last_index and last_index[value] >= start:\n            start = last_index[value] + 1\n        last_index[value] = i\n        best = max(best, i - start + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        print(0)\n        return\n\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n\n    # Only read exactly n integers (there could be extra whitespace/newline)\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray_length(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray whose elements sum to 0. If no such subarray exists, return 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray with sum 0.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_zero_sum_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose elements sum to 0.\n    \"\"\"\n    first_occurrence = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if prefix_sum in first_occurrence:\n            # We have seen this prefix sum before; subarray (first_occurrence[prefix_sum]+1 .. i) sums to 0.\n            max_len = max(max_len, i - first_occurrence[prefix_sum])\n        else:\n            # Store first time we see this prefix sum.\n            first_occurrence[prefix_sum] = i\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_zero_sum_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers A[1], A[2], ..., A[N]. For a given integer K, determine the number of distinct pairs (i, j) such that 1 ≤ i < j ≤ N and A[i] + A[j] = K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A[1], A[2], ..., A[N] (-10^9 ≤ A[i] ≤ 10^9).Output:Print a single integer — the number of distinct pairs whose sum is equal to K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    a = data[2:]\n    freq = defaultdict(int)\n    pairs = 0\n\n    for x in a:\n        pairs += freq[k - x]          # pairs formed with earlier occurrences\n        freq[x] += 1                  # record current element\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with equal number of even and odd elements. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers separated by spaces, representing the array nums (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest contiguous subarray with an equal number of even and odd elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Map: prefix_sum value -> earliest index where it occurred\n    first_occurrence = {0: -1}  # prefix sum 0 before the array starts\n    prefix_sum = 0\n    max_len = 0\n\n    for idx, num in enumerate(nums):\n        # Treat even as +1, odd as -1\n        prefix_sum += 1 if num % 2 == 0 else -1\n\n        if prefix_sum in first_occurrence:\n            # Subarray (first_occurrence[prefix_sum] + 1 ... idx) is balanced\n            curr_len = idx - first_occurrence[prefix_sum]\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            # Record the first time this prefix sum is seen\n            first_occurrence[prefix_sum] = idx\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, determine whether it is possible to rearrange the digits of n (without leading zeros) to form a number divisible by 3. Output \"YES\" if possible, otherwise output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^9).Output Format:Output \"YES\" if it is possible to rearrange the digits of n to form a number divisible by 3, otherwise output \"NO\".Constraints:1 ≤ n ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    n_str = sys.stdin.readline().strip()\n    \n    # Sum of digits\n    digit_sum = sum(int(ch) for ch in n_str)\n    \n    # A number is divisible by 3 iff the sum of its digits is divisible by 3.\n    if digit_sum % 3 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the number of pairs (i, j) (0 ≤ i < j < n) such that nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:               # No input\n        return\n    n = data[0]                # length of the array\n    nums = data[1:]            # the actual numbers\n\n    even = 0\n    for x in nums[:n]:         # consider only first n numbers to be safe\n        if x & 1 == 0:         # faster parity check than x % 2 == 0\n            even += 1\n\n    odd = n - even\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray of length exactly k, where 1 ≤ k ≤ n. Output the maximum sum found.  Input:  The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).  The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).  Output:  A single integer: the maximum sum of any contiguous subarray of length exactly k.Constraints:  1 ≤ k ≤ n ≤ 10^5  −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # Initial sum of the first 'k' elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window across the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer, the number of pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    for num in nums:\n        if num & 1 == 0:    # fast parity check\n            even_count += 1\n\n    odd_count = n - even_count\n\n    # Pairs with even sum: choose 2 evens or 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Print a single integer: the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen (prefix_sum - k) before, a subarray summing to k ends here\n        if (prefix_sum - k) in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[prefix_sum - k])\n\n        # Record the earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine the length of the longest contiguous subarray with a sum equal to K. If no such subarray exists, output 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^4).Output Format:Print a single integer: the length of the longest contiguous subarray whose sum is exactly K.Constraints:1 ≤ N ≤ 10^5|K| ≤ 10^9|Ai| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        k = int(next(it))\n    except StopIteration:\n        return\n    \n    arr = [int(next(it)) for _ in range(n)]\n    \n    prefix_to_first_index = {0: -1}     # prefix_sum : earliest index\n    prefix_sum = 0\n    best_len = 0\n    \n    for idx, value in enumerate(arr):\n        prefix_sum += value\n        \n        # If a prefix with value (current_sum - k) has been seen,\n        # the subarray between that position+1 and current idx sums to k.\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = idx - prefix_to_first_index[target]\n            if length > best_len:\n                best_len = length\n        \n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = idx\n    \n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the indices of two distinct elements in nums whose sum is equal to target. Return the indices as a pair (i, j) such that i < j. If no such pair exists, output -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output two integers i and j (0-based indices, i < j) such that nums[i] + nums[j] = target. If there is no such pair, output -1 -1.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> first index where it appeared\n\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            j = seen[complement]\n            # j < i by construction\n            print(f\"{j} {i}\")\n            return\n        # Only keep the first occurrence to guarantee j < i\n        if num not in seen:\n            seen[num] = i\n\n    # If no pair found\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the array elements.Output Format:- Output a single integer, the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nfrom collections import deque\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Deques to keep track of current window's max and min\n    max_d = deque()  # non-increasing: front is current max\n    min_d = deque()  # non-decreasing: front is current min\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain max deque (descending)\n        while max_d and val > max_d[-1]:\n            max_d.pop()\n        max_d.append(val)\n\n        # Maintain min deque (ascending)\n        while min_d and val < min_d[-1]:\n            min_d.pop()\n        min_d.append(val)\n\n        # Shrink window until condition satisfied\n        while max_d[0] - min_d[0] > 1:\n            # Remove leftmost element from window\n            if nums[left] == max_d[0]:\n                max_d.popleft()\n            if nums[left] == min_d[0]:\n                min_d.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] == k. Two pairs are considered distinct if they have different indices. Write an efficient algorithm to solve the problem.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of distinct pairs whose sum is equal to k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]          # take exactly n numbers in case of extra whitespace/newlines\n\n    seen_counts = defaultdict(int) # frequency map of numbers seen so far\n    pairs = 0\n\n    for num in nums:\n        complement = k - num\n        pairs += seen_counts[complement]  # every earlier complement forms a valid pair\n        seen_counts[num] += 1             # add current number to the map\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, determine the length of the longest contiguous subarray whose sum is exactly k. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer — the maximum length of a contiguous subarray summing to k, or 0 if none exists.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_idx = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we've seen prefix_sum - k before, a subarray ending at i sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            length = i - prefix_to_first_idx[target]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest contiguous subarray satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    max_dq = deque()   # decreasing deque – front is current window maximum\n    min_dq = deque()   # increasing deque – front is current window minimum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain max deque (decreasing)\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # maintain min deque (increasing)\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # shrink window until it satisfies max - min <= 1\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to make the array non-decreasing by modifying at most one element. An array is non-decreasing if for every i (1 ≤ i < n), nums[i] ≤ nums[i + 1].Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if it is possible to make the array non-decreasing by modifying at most one element, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_be_non_decreasing(nums):\n    \"\"\"\n    Returns True if the array can be made non-decreasing by modifying at most\n    one element, otherwise False.\n    \"\"\"\n    n = len(nums)\n    changes = 0\n\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            changes += 1\n            if changes > 1:\n                return False\n\n            # Decide whether to lower nums[i] or raise nums[i+1]\n            if i == 0 or nums[i - 1] <= nums[i + 1]:\n                nums[i] = nums[i + 1]      # lower current element\n            else:\n                nums[i + 1] = nums[i]      # raise next element\n\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    print(\"YES\" if can_be_non_decreasing(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray such that the sum of its elements is exactly K. If there are multiple subarrays with the same length, return the length of any one of them. If no such subarray exists, return 0.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (-10^4 ≤ Ai ≤ 10^4).Output:Print a single integer representing the maximum length of a contiguous subarray with sum equal to K.Constraints:- 1 ≤ N ≤ 10^5- -10^9 ≤ K ≤ 10^9- -10^4 ≤ Ai ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_sum = 0\n    first_pos = {0: -1}       # prefix_sum value -> earliest index where it appears\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we've seen prefix_sum - k before, a subarray summing to k ends at i\n        if (prefix_sum - k) in first_pos:\n            current_len = i - first_pos[prefix_sum - k]\n            if current_len > max_len:\n                max_len = current_len\n\n        # Record the first time we see this prefix_sum\n        if prefix_sum not in first_pos:\n            first_pos[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the maximum sum of any contiguous subarray of length exactly k. Return this maximum sum. If the array has fewer than k elements, return -1.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Output a single integer, the maximum sum of any contiguous subarray of length k, or -1 if not possible.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ n- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if len(data) < 2:       # not enough information\n        return\n    \n    n, k = data[0], data[1]\n    nums = data[2:]\n    \n    # If the array has fewer than k elements, impossible (though constraints say k ≤ n)\n    if n < k:\n        print(-1)\n        return\n    \n    # Initial window sum\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains all unique elements (no repeating numbers). If the array is empty, return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer representing the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                       # no input at all\n        return\n\n    n = int(data[0])\n\n    # In case n == 0 the second line may be missing\n    nums = list(map(int, data[1:1 + n]))\n\n    if n == 0:\n        print(0)\n        return\n\n    last_seen = {}        # value -> last index it appeared\n    left = 0              # left boundary of the current window\n    best = 0              # length of the best window found so far\n\n    for right, val in enumerate(nums):\n        if val in last_seen and last_seen[val] >= left:\n            # duplicate inside current window -> move left past previous occurrence\n            left = last_seen[val] + 1\n\n        last_seen[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is equal to a given integer K. If there is no such subarray, output 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (-10^4 ≤ Ai ≤ 10^4).Output Format:Print a single integer: the length of the longest contiguous subarray with sum equal to K.Constraints:1 ≤ N ≤ 10^5-10^9 ≤ K ≤ 10^9-10^4 ≤ Ai ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        N = int(next(it))\n        K = int(next(it))\n    except StopIteration:\n        return\n    \n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - K before, we found a subarray summing to K\n        target = prefix_sum - K\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > max_len:\n                max_len = length\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums with n elements, find the length of the longest contiguous subarray whose sum is exactly equal to a given integer k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer — the length of the longest contiguous subarray with sum exactly equal to k. If there are multiple such subarrays, output the maximum length; if none exist, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_sum_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen a prefix with value (current - k), a subarray summing to k ends here\n        if prefix_sum - k in prefix_sum_to_first_index:\n            start_idx = prefix_sum_to_first_index[prefix_sum - k]\n            longest = max(longest, i - start_idx)\n\n        # Record earliest position of this prefix sum\n        if prefix_sum not in prefix_sum_to_first_index:\n            prefix_sum_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if there exist two distinct elements in nums whose sum is equal to target. If such a pair exists, output \"YES\"; otherwise, output \"NO\".Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" if two distinct elements sum to target, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer — the number of valid pairs (i, j) where the sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Return the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer, the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport collections\n\ndef longest_subarray_len(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    deq_max = collections.deque()   # indices, values in non-increasing order\n    deq_min = collections.deque()   # indices, values in non-decreasing order\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        # update max deque\n        while deq_max and nums[deq_max[-1]] < val:\n            deq_max.pop()\n        deq_max.append(right)\n        \n        # update min deque\n        while deq_min and nums[deq_min[-1]] > val:\n            deq_min.pop()\n        deq_min.append(right)\n        \n        # shrink window until condition satisfied\n        while nums[deq_max[0]] - nums[deq_min[0]] > 1:\n            if deq_max[0] == left:\n                deq_max.popleft()\n            if deq_min[0] == left:\n                deq_min.popleft()\n            left += 1\n        \n        # update answer\n        best = max(best, right - left + 1)\n    \n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_subarray_len(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray where the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).Output Format:- Print a single integer: the length of the longest subarray whose sum is exactly k.Constraints:- 1 ≤ n ≤ 10^5- |a_i| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, subarray (prev_index+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            cur_len = i - prefix_to_index[target]\n            if cur_len > best_len:\n                best_len = cur_len\n\n        # Record the first occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}       # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen a prefix sum that is prefix_sum - k, then the sub-array\n        # between that index + 1 and current index sums to k.\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[needed])\n\n        # Record the first occurrence of this prefix sum.\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.  Input Format:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.  Output Format:  - Output a single integer, the number of pairs (i, j) where the sum nums[i] + nums[j] is even.  Constraints:  - 1 ≤ n ≤ 10^5  - 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:      # odd\n            odd_count += 1\n        else:            # even\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements in the subarray is at most k. Return the length of this subarray.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the length of the longest such subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_bounded_diff(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array such that\n    max(subarray) - min(subarray) <= k.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    max_deque = deque()   # indices, values in decreasing order\n    min_deque = deque()   # indices, values in increasing order\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # Maintain the decreasing deque for the maximums\n        while max_deque and nums[max_deque[-1]] < value:\n            max_deque.pop()\n        max_deque.append(right)\n\n        # Maintain the increasing deque for the minimums\n        while min_deque and nums[min_deque[-1]] > value:\n            min_deque.pop()\n        min_deque.append(right)\n\n        # Shrink window until condition satisfied\n        while nums[max_deque[0]] - nums[min_deque[0]] > k:\n            left += 1\n            # Remove indices that are out of the current window\n            if max_deque[0] < left:\n                max_deque.popleft()\n            if min_deque[0] < left:\n                min_deque.popleft()\n\n        # Update best size\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_bounded_diff(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.  Input Format:  The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.  Output Format:  Output a single integer denoting the number of pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])  # only take n numbers in case extra data\n    even = odd = 0\n    for num in nums:\n        if num & 1:   # odd\n            odd += 1\n        else:         # even\n            even += 1\n    # number of pairs with even sum: choose any two evens or any two odds\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, your task is to find the maximum sum of any contiguous subarray. A subarray is defined as a non-empty sequence of consecutive elements from the array. If all numbers are negative, return the largest (least negative) single element.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The next line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4), representing the elements of the array.Output:Print a single integer representing the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Kadane's algorithm\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs (i, j) and (k, l) are considered different if i ≠ k or j ≠ l.Input: The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of distinct pairs (i, j) with i < j and nums[i] + nums[j] even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    \n    if not data:          # no input\n        return\n    \n    n = int(data[0])\n    nums = map(int, data[1:1 + n])  # ensure we only read n numbers\n    \n    even_cnt = 0\n    odd_cnt = 0\n    \n    for num in nums:\n        if num & 1:       # odd number\n            odd_cnt += 1\n        else:             # even number\n            even_cnt += 1\n    \n    # number of ways to choose 2 items from k items: k*(k-1)//2\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subarray where the difference between the maximum and minimum elements is at most k. The subarray must be contiguous. Return the length of this subarray.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).Output Format:Print a single integer representing the maximum length of such a subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    max_dq = deque()      # stores indices, elements in decreasing order\n    min_dq = deque()      # stores indices, elements in increasing order\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        # Maintain decreasing deque for maximums\n        while max_dq and arr[max_dq[-1]] < value:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain increasing deque for minimums\n        while min_dq and arr[min_dq[-1]] > value:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window until condition holds\n        while arr[max_dq[0]] - arr[min_dq[0]] > k:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays with the same maximum sum, return the sum of the first one found (leftmost).  Input:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:- Print a single integer representing the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_length_k(nums, k):\n    \"\"\"\n    Returns the maximum sum of any contiguous sub-array of length exactly k.\n    If several subarrays have the same maximum sum, the leftmost one is chosen.\n    \"\"\"\n    # Compute sum of the first window of size k\n    current_sum = sum(nums[:k])\n    max_sum = current_sum\n    \n    # Slide the window across the array\n    for i in range(k, len(nums)):\n        current_sum += nums[i] - nums[i - k]   # add entering element, remove exiting element\n        if current_sum > max_sum:              # update only when strictly greater\n            max_sum = current_sum\n    \n    return max_sum\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    result = max_subarray_sum_length_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray where the sum of its elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^4).Output:Output a single integer, the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, output 0.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9|ai| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    arr = data[2:2 + n]\n\n    # Dictionary that stores the earliest index where a given prefix sum occurs.\n    # Initialize with prefix sum 0 at index -1 to handle subarrays starting at 0.\n    earliest_index = {0: -1}\n\n    prefix_sum = 0\n    max_len = 0\n\n    for i, value in enumerate(arr):\n        prefix_sum += value\n\n        # If we've seen prefix_sum - k before, a subarray summing to k ends at i.\n        if prefix_sum - k in earliest_index:\n            max_len = max(max_len, i - earliest_index[prefix_sum - k])\n\n        # Record the earliest occurrence of this prefix sum.\n        if prefix_sum not in earliest_index:\n            earliest_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. You may assume that each input has exactly one solution, and you may not use the same element twice. Return the answer in any order.Input:The first line contains two integers n (the length of the array) and target, separated by a space.The second line contains n integers, the elements of nums.Output:Output two integers, the indices (0-based) of the two numbers that add up to target, separated by a space.Constraints:2 ≤ n ≤ 10^4-10^9 ≤ nums[i] ≤ 10^9-10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            print(seen[complement], i)\n            return\n        # store after check to avoid using same element twice when complement == num\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, determine whether it is possible to rearrange the elements of nums to form an arithmetic progression. An arithmetic progression is a sequence where the difference between any two consecutive elements is the same. Return \"YES\" if possible, otherwise return \"NO\".Input Format:The first line contains a single integer n (2 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output \"YES\" if the elements can be rearranged to form an arithmetic progression, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_form_arithmetic_progression(nums):\n    n = len(nums)\n    if n <= 2:\n        return True                           # Any 1 or 2 numbers can form an AP\n\n    nums.sort()\n    diff = nums[1] - nums[0]\n\n    for i in range(2, n):\n        if nums[i] - nums[i - 1] != diff:\n            return False\n    return True\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    print(\"YES\" if can_form_arithmetic_progression(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string S.The second line contains the string S.Output:Output a single integer, the length of the longest substring without repeating characters.Constraints:1 ≤ n ≤ 10^5S consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that has no repeating\n    characters using a sliding–window technique.\n    \"\"\"\n    last_pos = {}        # character -> right-most index where it was seen\n    left = 0             # left boundary of the current window\n    best = 0             # best window length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # `ch` repeats inside current window → move `left` past its\n            # previous occurrence.\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First non-empty line is n, second is the string.\n    n = int(data[0].strip())\n    # S could potentially span several lines if trailing newlines were present,\n    # so concatenate the rest just in case.\n    s = ''.join(data[1:]).strip()\n\n    # Safety: if provided n does not match actual length, fallback to real length.\n    s = s[:n]\n\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of all elements is exactly k. If there is no such subarray, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers, the elements of nums (-10^5 ≤ nums[i] ≤ 10^5).Output Format:Print a single integer, the length of the longest contiguous subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^5 ≤ nums[i] ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_idx = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (prefix_sum - k) seen before, subarray (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            prev_idx = prefix_to_first_idx[target]\n            longest = max(longest, i - prev_idx)\n\n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where all elements are distinct. If there are multiple such subarrays, return the length of any one. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> last index seen\n    left = 0               # left end of the current window\n    best = 0               # length of the longest distinct subarray found so far\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # val repeated inside current window; move left past its previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.  Input Format:  The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9).  Output Format:  Output a single integer — the number of valid pairs (i, j) where the sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    even_cnt = sum(1 for x in nums if x % 2 == 0)\n    odd_cnt = n - even_cnt\n    \n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray that contains only distinct elements (no duplicates). If there are multiple such subarrays of the same maximum length, you may return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer — the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    seen = {}\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            left = seen[val] + 1      # shrink window past previous occurrence\n        seen[val] = right              # record/update last index of val\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer — the number of distinct pairs whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Combination C(k, 2) = k*(k-1)//2\n    pairs = even_count * (even_count - 1) // 2\n    pairs += odd_count * (odd_count - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements being distinct. A subarray is a contiguous part of the array. Return the length of the longest such subarray.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the array elements.Output Format:- Output a single integer, the length of the longest subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    seen = set()\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        while val in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(val)\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, return the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string.Input:A single line containing the string S (1 ≤ |S| ≤ 10^4).Output:A single integer representing the length of the longest substring with all unique characters.Constraints:- 1 ≤ |S| ≤ 10^4- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters in `s`.\n    Implements the classic sliding-window technique in O(n) time.\n    \"\"\"\n    last_index = {}          # Maps character -> most recent index in the string\n    max_len = 0              # Best length found so far\n    window_start = 0         # Left boundary of the current window\n\n    for i, ch in enumerate(s):\n        # If character seen and is inside the current window, move window start\n        if ch in last_index and last_index[ch] >= window_start:\n            window_start = last_index[ch] + 1\n        # Update / record the character's latest index\n        last_index[ch] = i\n        # Update maximum length\n        max_len = max(max_len, i - window_start + 1)\n\n    return max_len\n\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    # Handle potential surrounding whitespace/newlines but preserve inner spaces (though not expected)\n    s = s.strip()\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a contiguous subarray with length exactly k (1 ≤ k ≤ n). Output this maximum sum.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer, the maximum sum of any contiguous subarray of length k.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Compute sum of first window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i]      # add the next element\n        window_sum -= nums[i - k]  # remove the element leaving the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether it is possible to rearrange the letters of S to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single string S (1 ≤ |S| ≤ 10^5), consisting only of lowercase English letters.Output Format:Output a single line with \"YES\" or \"NO\" (without quotes).Constraints:1 ≤ |S| ≤ 10^5S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can form a palindrome.\n    A string can be permuted into a palindrome iff\n    the number of characters that appear an odd number of times\n    is at most 1.\n    \"\"\"\n    odd = sum(1 for cnt in Counter(s).values() if cnt & 1)\n    return odd <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, subarray (prev_idx+1 .. i) sums to k\n        if prefix_sum - k in prefix_to_index:\n            best = max(best, i - prefix_to_index[prefix_sum - k])\n\n        # Record the earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements. If all elements are unique, return n.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the array elements.Output:Print a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n and an array of n integers a1, a2, ..., an, determine if it is possible to rearrange the array so that no two adjacent elements are equal. If it is possible, output \"YES\", otherwise output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5).Output Format:Print \"YES\" if such an arrangement is possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    \n    # A rearrangement without equal neighbours exists\n    # iff the most frequent value does not occupy more than half\n    # of the positions rounded up.\n    if max_freq <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray in which all the elements are distinct. Print the length of this subarray.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9), representing the elements of the array.Output Format:Print a single integer, the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(arr):\n    seen = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in seen and seen[value] >= left:\n            # Duplicate found inside current window. Move left pointer.\n            left = seen[value] + 1\n        seen[value] = right\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(longest_unique_subarray_length(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find and return the maximum sum of any contiguous subarray of nums. A contiguous subarray is defined as a sequence of elements within the array that are consecutive in the original array.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer, the maximum sum of any contiguous subarray.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm.\n    \"\"\"\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Combination count: C(k, 2) = k*(k-1)//2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_index = {}            # value -> most recent position\n    start = 0                  # left end of sliding window\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        if val in last_index and last_index[val] >= start:\n            # repeated element inside current window, move start\n            start = last_index[val] + 1\n        last_index[val] = i\n        # update maximum length\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, an element is called a \"peak\" if it is strictly greater than its immediate neighbors (if any). For the first and last elements, consider only the single neighbor. Return the index of any one peak element. If there are multiple peaks, return the index of any one of them. It is guaranteed that at least one peak exists.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the index (0-based) of any one peak element.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    # Handle single element array directly\n    if n == 1:\n        print(0)\n        return\n    \n    # Check first element\n    if nums[0] > nums[1]:\n        print(0)\n        return\n    \n    # Check middle elements\n    for i in range(1, n - 1):\n        if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n            print(i)\n            return\n    \n    # If no peak found yet, the last element must be a peak\n    print(n - 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose elements sum to zero. If no such subarray exists, output 0.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers a_1, a_2, ..., a_N (-10^9 ≤ a_i ≤ 10^9), separated by spaces.Output Format:Output a single integer representing the length of the longest contiguous subarray with sum zero.Constraints:1 ≤ N ≤ 10^5-10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_zero_sum_subarray(arr):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose sum is zero.\n    \"\"\"\n    prefix_index = {0: -1}        # prefix_sum -> first index seen\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(arr):\n        prefix_sum += num\n\n        if prefix_sum in prefix_index:\n            # Subarray (prefix_index[prefix_sum]+1 .. i) sums to zero\n            max_len = max(max_len, i - prefix_index[prefix_sum])\n        else:\n            # Store first occurrence of this prefix_sum\n            prefix_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(longest_zero_sum_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target. Output the count of such pairs.Input:The first line contains two integers n (the length of the array) and target.The second line contains n integers, the elements of the array nums.Output:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = {}\n    pair_count = 0\n\n    for num in nums:\n        complement = target - num\n        pair_count += freq.get(complement, 0)\n        freq[num] = freq.get(num, 0) + 1\n\n    print(pair_count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    max_len = 0\n    prefix_sum = 0\n    first_occurrence = {0: -1}        # prefix sum -> earliest index\n\n    for idx in range(n):\n        prefix_sum += int(next(it))\n\n        # Case 1: subarray from 0 .. idx sums to k\n        if prefix_sum == k:\n            max_len = idx + 1\n\n        # Case 2: subarray ending at idx sums to k\n        required = prefix_sum - k\n        if required in first_occurrence:\n            length = idx - first_occurrence[required]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = idx\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to find the number of contiguous subarrays whose sum is exactly k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Print a single integer representing the number of contiguous subarrays whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1  # empty prefix has sum 0\n    \n    current_sum = 0\n    result = 0\n    \n    for num in nums:\n        current_sum += num\n        # We need the number of previous prefixes with sum (current_sum - k)\n        result += prefix_counts[current_sum - k]\n        prefix_counts[current_sum] += 1\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of integers nums of length n. Find the minimum number of elements you need to remove from nums so that the remaining elements are all equal. If all elements are already equal, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list.The second line contains n integers nums_i (1 ≤ nums_i ≤ 10^9).Output:Output a single integer — the minimum number of elements to remove.Constraints:1 ≤ n ≤ 10^51 ≤ nums_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    if n == 0:\n        print(0)\n        return\n    \n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    print(n - max_freq)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine whether it is possible to rearrange the characters of S to form a palindrome. Output \"YES\" if it is possible, otherwise output \"NO\".Input:A single string S (1 ≤ |S| ≤ 10^5).Output:Print \"YES\" if the characters of S can be rearranged to form a palindrome, otherwise print \"NO\".Constraints:- 1 ≤ |S| ≤ 10^5- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(freq & 1 for freq in Counter(s).values())\n    # For a string to be rearranged into a palindrome there can be\n    # at most one character with an odd frequency.\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer — the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> latest index\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window; move left past its previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the absolute difference between the maximum and minimum elements in the subarray is less than or equal to k. Output the length of this subarray.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer—the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^9−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_limit(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    where max(nums[l:r+1]) - min(nums[l:r+1]) <= k.\n    \"\"\"\n    max_dq = deque()   # stores indices, values are in non-increasing order\n    min_dq = deque()   # stores indices, values are in non-decreasing order\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain decreasing deque for maxima\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain increasing deque for minima\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window if condition violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1   # move left end of window\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    result = longest_subarray_with_limit(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether you can rearrange the characters of S to form a palindrome. Return \"YES\" if it is possible, otherwise return \"NO\".Input:The first line contains a single string S (1 ≤ |S| ≤ 10^5).Output:Print \"YES\" if it is possible to rearrange S into a palindrome, otherwise print \"NO\".Constraints:- S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    # A palindrome can have at most one character with an odd frequency\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of contiguous subarrays that have a sum equal to k.Input Format:- The first line contains two integers n (the length of the array) and k.- The second line contains n space-separated integers representing the elements of nums.Output Format:- Output a single integer: the count of contiguous subarrays whose sum equals k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- -10^9 ≤ k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1  # empty prefix\n    prefix_sum = 0\n    result = 0\n\n    for num in nums:\n        prefix_sum += num\n        result += prefix_counts[prefix_sum - k]\n        prefix_counts[prefix_sum] += 1\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray that contains only unique elements (no repeated values). If multiple such subarrays exist, output the length of any one of them.Input Format:The first line contains an integer N (1 ≤ N ≤ 10^5), the size of the array.The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6).Output Format:Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ N ≤ 10^51 ≤ a_i ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(arr):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer — the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}           # value -> last index seen\n    left = 0                # start index of current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate inside current window; move `left`\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of valid pairs (i, j) where the sum nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    count_even = 0\n    count_odd = 0\n\n    for num in nums:\n        if num & 1:      # odd\n            count_odd += 1\n        else:            # even\n            count_even += 1\n\n    # number of ways to choose 2 elements from k elements: k*(k-1)//2\n    ans = count_even * (count_even - 1) // 2 + count_odd * (count_odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a contiguous subarray with at least one element. A contiguous subarray is defined as a sequence of consecutive elements from the original array. Print the maximum sum that can be obtained.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer: the maximum sum of any contiguous subarray.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm to find the maximum sum of a contiguous subarray.\n    \"\"\"\n    best = cur = nums[0]\n    for num in nums[1:]:\n        # either extend the previous subarray or start a new one at current index\n        cur = max(num, cur + num)\n        best = max(best, cur)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # safety check, though constraints guarantee n elements\n    if len(nums) != n:\n        nums.extend([0] * (n - len(nums)))   # Shouldn't happen in valid input\n    result = max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Return the answer as a pair of indices in any order.Input Format:The first line contains two integers n and target, where n is the size of the array.The second line contains n integers, representing the array nums.Output Format:Print two integers, the indices of the elements that add up to target.Constraints:2 ≤ n ≤ 10^4-10^9 ≤ nums[i] ≤ 10^9-10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    lookup = {}                       # value -> index\n    for idx, num in enumerate(nums):\n        need = target - num\n        if need in lookup:\n            print(lookup[need], idx)\n            return\n        lookup[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum sum of any contiguous subarray. A subarray is a non-empty sequence of consecutive elements in nums.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of nums.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    current = best = nums[0]\n    for num in nums[1:]:\n        current = num if current + num < num else current + num\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums with length n, find the length of the longest subarray (contiguous sequence) whose elements sum to exactly k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:Print a single integer: the length of the longest subarray whose sum is k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_first_idx = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # If this exact prefix gives sum k from the start (index 0)\n        if prefix_sum == k:\n            longest = max(longest, i + 1)\n        \n        # If there is a previous prefix so that current segment sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            longest = max(longest, i - prefix_to_first_idx[target])\n        \n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n    \n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the list.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the number of unique pairs (i, j) with i < j such that nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of pairs from k elements is k*(k-1)//2\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number. Two pairs are considered different if they have different indices. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the number of unique pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])  # Only take first n numbers in case of extra input\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:        # odd\n            odd_count += 1\n        else:              # even\n            even_count += 1\n\n    # number of pairs from evens + number of pairs from odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all unique elements (no repeated values). If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^50 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_seen = {}          # value -> most recent index\n    start = 0               # left boundary of current window\n    best = 0\n\n    for i, v in enumerate(nums):\n        if v in last_seen and last_seen[v] >= start:\n            # duplicate inside current window -> shrink from the left\n            start = last_seen[v] + 1\n        last_seen[v] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Output the total number of such pairs.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in nums:\n        if num & 1:        # odd\n            odd_count += 1\n        else:              # even\n            even_count += 1\n    \n    # Number of pairs from k items: k * (k - 1) // 2\n    pairs_even = even_count * (even_count - 1) // 2\n    pairs_odd  = odd_count  * (odd_count  - 1) // 2\n    \n    print(pairs_even + pairs_odd)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"balanced\" if the sum of its elements is zero. Your task is to determine the length of the longest balanced subarray in nums. If there is no such subarray, output 0.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest balanced subarray.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    prefix_first_idx = {0: -1}  # prefix sum value -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n        if prefix_sum in prefix_first_idx:\n            # balanced subarray from prefix_first_idx[prefix_sum] + 1 to i\n            cur_len = i - prefix_first_idx[prefix_sum]\n            if cur_len > max_len:\n                max_len = cur_len\n        else:\n            prefix_first_idx[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Output a single integer representing the length of the longest contiguous subarray whose sum equals k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there is a previous prefix such that current_prefix - previous_prefix = k\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[target])\n\n        # Store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers, where each integer represents a different color. Find the length of the longest contiguous subarray in which no color appears more than once.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the colors of the elements.Output:Print a single integer: the length of the longest contiguous subarray with all unique colors.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    last_pos = {}           # color -> most recent index\n    start = 0               # left border of current window\n    best = 0\n    \n    for i, color in enumerate(arr):\n        if color in last_pos and last_pos[color] >= start:\n            start = last_pos[color] + 1     # shrink window from the left\n        last_pos[color] = i                 # update last seen position\n        best = max(best, i - start + 1)     # update answer\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a non-empty subarray (a contiguous subsequence) with length at most k. Return the maximum sum possible.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer: the maximum sum of a non-empty subarray with length at most k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix[i] = sum of first i elements, prefix[0] = 0\n    prefix = [0] * (n + 1)\n\n    # Monotone deque storing indices of prefix with increasing values\n    dq = deque([0])        # start with index 0 (prefix = 0)\n    ans = -10**18          # sufficiently small\n\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + nums[i - 1]\n\n        # Remove indices that are out of the window length k\n        while dq and dq[0] < i - k:\n            dq.popleft()\n\n        # The minimal prefix in the current window gives maximum subarray sum\n        min_pref_idx = dq[0]\n        current_sum = prefix[i] - prefix[min_pref_idx]\n        if current_sum > ans:\n            ans = current_sum\n\n        # Maintain deque in increasing order of prefix values\n        while dq and prefix[dq[-1]] >= prefix[i]:\n            dq.pop()\n        dq.append(i)\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine if there exists a pair of distinct indices i and j such that nums[i] + nums[j] == k, where k is a given integer. If such a pair exists, output \"YES\". Otherwise, output \"NO\".Input Format:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).The second line contains n integers nums[0], nums[1], ..., nums[n−1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output \"YES\" if there exists such a pair, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n    \n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])   # exactly n numbers expected\n    even = 0\n    odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n    # number of ways to choose 2 from k items: k * (k - 1) // 2\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums such that they add up to target. You may assume that each input has exactly one solution, and you may not use the same element twice. Return the answer as a pair of zero-based indices in any order.Input:The first line contains two integers n (the size of the array) and target.The second line contains n integers denoting the elements of nums.Output:Output two space-separated integers, the indices of the two numbers that add up to target.Constraints:2 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9-10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, target = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    index_map = {}                           # value -> index\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in index_map:          # found the pair\n            print(index_map[complement], idx)\n            return\n        index_map[num] = idx                 # store current number's index\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest subarray where the sum of the elements is zero. If no such subarray exists, output 0.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).Output:Print a single integer: the length of the longest zero-sum subarray.Constraints:1 ≤ N ≤ 10^5−10^9 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:n + 1]\n\n    prefix_sum = 0\n    first_index = {}          # maps prefix_sum -> earliest index\n    longest = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        if prefix_sum == 0:\n            longest = i + 1    # subarray from 0..i\n\n        if prefix_sum in first_index:\n            longest = max(longest, i - first_index[prefix_sum])\n        else:\n            first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray with all elements distinct. A subarray is a contiguous sequence of elements within the array. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_idx = {}            # stores last index at which each value appeared\n    start = 0                # left boundary of current window\n    best = 0                 # best length found\n\n    for i, val in enumerate(nums):\n        if val in last_idx and last_idx[val] >= start:\n            # val is repeated inside the current window; shrink from the left\n            start = last_idx[val] + 1\n        last_idx[val] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers. If the array is empty, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the length of the longest contiguous subarray with at most two distinct numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    that contains at most two distinct numbers.\n    \"\"\"\n    if not nums:\n        return 0\n\n    left = 0\n    freq = defaultdict(int)   # counts of numbers in the current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        freq[value] += 1\n\n        # Shrink the window until it has at most 2 distinct numbers\n        while len(freq) > 2:\n            left_val = nums[left]\n            freq[left_val] -= 1\n            if freq[left_val] == 0:\n                del freq[left_val]\n            left += 1\n\n        # Update the best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        # No input at all\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # In case n does not match actual list length, trim/extend accordingly\n    nums = nums[:n]\n    print(longest_subarray_two_distinct(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct elements. If the array has less than two distinct elements, return the length of the entire array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray with at most two distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_with_two_distinct(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray that contains\n    at most two distinct elements.\n    \"\"\"\n    freq = defaultdict(int)  # frequency of each element in the current window\n    left = 0                 # left boundary of the sliding window\n    best = 0                 # best (maximum) length found so far\n\n    for right, value in enumerate(nums):\n        freq[value] += 1\n\n        # Shrink the window until we have at most two distinct elements\n        while len(freq) > 2:\n            left_val = nums[left]\n            freq[left_val] -= 1\n            if freq[left_val] == 0:\n                del freq[left_val]\n            left += 1\n\n        # Update the maximum length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    # Edge case: if the array has < 2 distinct elements,\n    # longest subarray is the whole array\n    if n == 0:\n        print(0)\n        return\n    if len(set(nums)) <= 1:\n        print(n)\n        return\n    result = longest_subarray_with_two_distinct(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n and an integer k, find the length of the longest contiguous subarray whose sum is divisible by k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the maximum length of a subarray whose sum is divisible by k.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^9−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Dictionary to store the first occurrence index of each remainder\n    first_idx = {0: -1}          # prefix remainder 0 at index -1 (empty prefix)\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n        rem = prefix_sum % k     # Python's % already non-negative when k > 0\n\n        if rem in first_idx:\n            best = max(best, i - first_idx[rem])\n        else:\n            first_idx[rem] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer — the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}               # value -> last index it appeared\n    left = 0                    # left boundary of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate found inside current window, move left past it\n            left = last_pos[val] + 1\n        last_pos[val] = right    # update last seen position\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Return the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    # Sliding window with a dictionary to store the last index of each element\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1      # Move left pointer past the last occurrence\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer: the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    for num in nums:\n        if num & 1 == 0:   # even\n            even_cnt += 1\n    odd_cnt = n - even_cnt\n\n    # combinations C(k, 2) = k*(k-1)//2\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer — the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    freq = defaultdict(int)          # counts of numbers in current window\n    left = 0                         # left end of sliding window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1               # include nums[right] into the window\n\n        # Shrink window until it has at most two distinct numbers\n        while len(freq) > 2:\n            left_val = nums[left]\n            freq[left_val] -= 1\n            if freq[left_val] == 0:   # remove num completely from dict\n                del freq[left_val]\n            left += 1\n\n        # Window [left, right] now has at most two distinct nums\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_subarray_at_most_two(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a contiguous subarray. The subarray must have at least one element. Return the maximum sum.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), representing the elements of the array.Output Format:- Output a single integer: the maximum sum of any contiguous subarray.Constraints:- 1 ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    best = current = nums[0]\n    for num in nums[1:]:\n        # Either extend the current subarray or start a new one at num\n        current = num if current + num < num else current + num\n        best = best if best > current else current\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of only lowercase English letters, determine whether it is possible to rearrange the characters of s to form a palindrome. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single string s (1 ≤ |s| ≤ 10^5).Output Format:Output a single line with \"YES\" or \"NO\" (without quotes).Constraints:1 ≤ |s| ≤ 10^5s consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can form a palindrome,\n    otherwise returns False.\n    \"\"\"\n    cnt = Counter(s)\n    odd_counts = sum(1 for freq in cnt.values() if freq % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the length of the longest subarray that contains at most k distinct numbers. If there are multiple answers, return the length of any one such subarray.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n), where n is the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the length of the longest subarray with at most k distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ n1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        while len(freq) > k:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n    \n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > max_len:\n                max_len = length\n        \n        # store earliest occurrence of prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray where all elements are distinct. If there are multiple such subarrays of the same maximum length, you only need to output the length. Input:The first line contains an integer N (1 ≤ N ≤ 10^5), the number of integers in the list. The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9).Output:Print a single integer — the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(arr):\n    last_pos = {}            # Stores the most recent index of each value\n    left = 0                 # Left edge of the sliding window\n    best = 0                 # Best (maximum) length found so far\n    \n    for right, value in enumerate(arr):\n        # If we've seen this value inside the current window, move `left`\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of contiguous subarrays whose sum is exactly k.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9), where n is the size of the array and k is the target sum.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer: the number of contiguous subarrays whose sum is exactly k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:                 # No input provided\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_sum = 0\n    freq = defaultdict(int)\n    freq[0] = 1                  # Empty prefix has sum 0\n\n    subarrays = 0\n    for num in nums:\n        prefix_sum += num\n        subarrays += freq[prefix_sum - k]   # All earlier prefixes giving required sum\n        freq[prefix_sum] += 1\n\n    print(subarrays)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the maximum sum of any contiguous subarray of length exactly k (1 ≤ k ≤ n). Output the maximum sum.  Input:  The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).  The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).  Output:  Print a single integer — the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window sum of first k elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window from position k to n-1\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]   # add new, remove outgoing\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the array elements.Output:Output a single integer, the length of the longest such subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_length(nums):\n    \"\"\"\n    Sliding–window algorithm that keeps window [l, r] such that\n    max(nums[l:r+1]) - min(nums[l:r+1]) <= 1\n    Deques are used to obtain current min and max in O(1).\n    \"\"\"\n    min_d = deque()          # indices of elements, values increasing\n    max_d = deque()          # indices of elements, values decreasing\n    l = 0\n    best = 0\n\n    for r, val in enumerate(nums):\n        # maintain monotone deques\n        while min_d and nums[min_d[-1]] > val:\n            min_d.pop()\n        min_d.append(r)\n\n        while max_d and nums[max_d[-1]] < val:\n            max_d.pop()\n        max_d.append(r)\n\n        # shrink left boundary until window valid\n        while nums[max_d[0]] - nums[min_d[0]] > 1:\n            l += 1\n            if min_d[0] < l:   # index fell out of window\n                min_d.popleft()\n            if max_d[0] < l:\n                max_d.popleft()\n\n        # update answer\n        best = max(best, r - l + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray (contiguous elements) with a sum equal to k. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer representing the length of the longest subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}      # prefix_sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current_prefix - k) has appeared before, we found a subarray that sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > longest:\n                longest = length\n\n        # Only store the first occurrence of a prefix_sum to maximize subarray length\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Output a single integer representing the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 items from k items: k * (k - 1) // 2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray whose sum is exactly k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Dictionary to store the earliest index at which each prefix sum occurs\n    first_occurrence = {0: -1}  # prefix sum 0 occurs before array starts\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # If (prefix_sum - k) has appeared before, we found a subarray summing to k\n        if (prefix_sum - k) in first_occurrence:\n            candidate_len = i - first_occurrence[prefix_sum - k]\n            if candidate_len > max_len:\n                max_len = candidate_len\n        \n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n    \n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    print(longest_subarray_with_sum_k(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a contiguous part of the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer, the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}            # value -> last index where it appeared\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1     # shrink window past the duplicate\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of contiguous subarrays whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer: the number of contiguous subarrays whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    \n    nums = [int(next(it)) for _ in range(n)]\n    \n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1            # empty prefix sum\n    prefix_sum = 0\n    result = 0\n    \n    for num in nums:\n        prefix_sum += num\n        result += prefix_count[prefix_sum - k]\n        prefix_count[prefix_sum] += 1\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of every pair of adjacent elements is even. If the array is empty, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                     # no input at all\n        print(0)\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    if n == 0:\n        print(0)\n        return\n\n    longest = 1          # at least one element itself forms a valid subarray\n    current = 1\n    prev_parity = nums[0] & 1        # 0 for even, 1 for odd\n\n    for num in nums[1:]:\n        parity = num & 1\n        if parity == prev_parity:    # same parity → adjacent sum even\n            current += 1\n        else:                        # break in parity sequence\n            longest = max(longest, current)\n            current = 1\n            prev_parity = parity     # start new segment\n            continue\n        # update prev_parity remains the same (they're equal)\n\n    longest = max(longest, current)\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any single element by 1. Output the minimum total number of operations needed.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the minimum number of operations required.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimum_operations(nums):\n    \"\"\"\n    Returns the minimum total number of +1/-1 operations needed to make\n    all elements of `nums` equal.\n    \"\"\"\n    nums.sort()\n    n = len(nums)\n    median = nums[n // 2]           # works for both odd and even lengths\n    return sum(abs(x - median) for x in nums)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = minimum_operations(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Output the minimum number of moves needed.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the minimum number of moves required.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    nums = data[1:1 + n]\n\n    # Sort to find the median, which minimizes the sum of absolute differences\n    nums.sort()\n    median = nums[n // 2]           # lower median works for both odd and even n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums containing n elements. Your task is to find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:Print a single integer representing the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}            # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current prefix - k) has been seen, a subarray ending here sums to k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > best_len:\n                best_len = length\n\n        # store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers, determine the length of the longest contiguous subarray whose sum is equal to a given target value K. If no such subarray exists, output 0.Input:The first line contains two integers N (1 ≤ N ≤ 10^5) and K (|K| ≤ 10^9), where N is the number of elements in the array and K is the target sum.The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^4), representing the array elements.Output:Output a single integer: the length of the longest contiguous subarray with sum equal to K.Constraints:1 ≤ N ≤ 10^5|K| ≤ 10^9|Ai| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(arr, k):\n    # Dictionary to store the earliest index where a particular prefix sum occurs\n    prefix_index = {0: -1}  # prefix sum 0 occurs before the array starts\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If (prefix_sum - k) has been seen, subarray (prefix_index[prefix_sum - k] + 1 .. i) sums to k\n        if prefix_sum - k in prefix_index:\n            max_len = max(max_len, i - prefix_index[prefix_sum - k])\n\n        # Only store the first occurrence of a prefix sum (earliest index)\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    N, K = map(int, data[:2])\n    array = list(map(int, data[2:2 + N]))\n    result = longest_subarray_with_sum_k(array, K)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Output the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer representing the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_limit(nums, limit_diff=1):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array such that\n    max(sub) - min(sub) <= limit_diff\n    \"\"\"\n    max_d = deque()   # decreasing deque for current window's maximums\n    min_d = deque()   # increasing deque for current window's minimums\n    l = 0\n    best = 0\n\n    for r, val in enumerate(nums):\n        # update deques for the new rightmost element\n        while max_d and val > max_d[-1]:\n            max_d.pop()\n        max_d.append(val)\n\n        while min_d and val < min_d[-1]:\n            min_d.pop()\n        min_d.append(val)\n\n        # shrink window from the left while condition is violated\n        while max_d[0] - min_d[0] > limit_diff:\n            if nums[l] == max_d[0]:\n                max_d.popleft()\n            if nums[l] == min_d[0]:\n                min_d.popleft()\n            l += 1  # move left boundary\n\n        # current window [l, r] is valid\n        best = max(best, r - l + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_subarray_with_limit(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if there are two distinct indices i and j in the array such that nums[i] + nums[j] equals target. Print \"YES\" if such a pair exists, or \"NO\" otherwise.Input Format:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exists two distinct indices i and j such that nums[i] + nums[j] == target, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_diff_le_one(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    such that max(sub) - min(sub) ≤ 1.\n    \"\"\"\n    min_q = deque()      # monotone increasing: front is current minimum\n    max_q = deque()      # monotone decreasing: front is current maximum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain max deque (decreasing)\n        while max_q and val > max_q[-1]:\n            max_q.pop()\n        max_q.append(val)\n\n        # maintain min deque (increasing)\n        while min_q and val < min_q[-1]:\n            min_q.pop()\n        min_q.append(val)\n\n        # shrink from left until window becomes valid\n        while max_q[0] - min_q[0] > 1:\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_subarray_with_diff_le_one(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a contiguous sequence of elements within the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Print a single integer — the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    last_pos = {}\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray containing only even numbers. If there is no even number in the array, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray of even numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])                     # number of elements (not really needed afterwards)\n    nums = map(int, data[1:1 + n])       # the array elements\n\n    max_len = curr = 0\n    for x in nums:\n        if x & 1:                        # odd number → break the current even streak\n            curr = 0\n        else:                            # even number → extend current streak\n            curr += 1\n            if curr > max_len:\n                max_len = curr\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single integer: the length of the longest contiguous subarray whose sum is k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix_sum -> earliest index where this sum appears\n    first_idx = {0: -1}          # sum 0 occurs before the array starts\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there was a prefix with value prefix_sum - k,\n        # the subarray between that index+1 and current i sums to k\n        need = prefix_sum - k\n        if need in first_idx:\n            best_len = max(best_len, i - first_idx[need])\n\n        # Record first occurrence of this prefix sum\n        if prefix_sum not in first_idx:\n            first_idx[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length at least 1. A contiguous subarray is a sequence of consecutive elements from the array. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. A subarray is a sequence of consecutive elements from the array. Output the length of the longest such subarray.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_index = {}          # value -> most recent position\n    left = 0                 # left boundary of current window\n    best = 0                 # best (maximum) length found\n\n    for right, value in enumerate(nums):\n        # If value seen inside current window, move `left` just past its last position\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n\n        last_index[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4) — the elements of the array.Output:Print a single integer — the length of the longest contiguous subarray whose sum is k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    # Dictionary to store the first occurrence index of each prefix sum\n    first_idx = {0: -1}          # prefix sum 0 occurs before array starts\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If (current prefix - k) seen before, we found a subarray summing to k\n        target = prefix_sum - k\n        if target in first_idx:\n            best_len = max(best_len, i - first_idx[target])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in first_idx:\n            first_idx[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> last index where it appeared\n    left = 0                 # left boundary of the current window\n    best = 0                 # best window length found so far\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window; move left past its previous position\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # safely slice even if extra whitespace\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs (i, j) and (k, l) are considered different if i ≠ k or j ≠ l.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer, the number of distinct pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray where the difference between the maximum and minimum element is at most k. The subarray must be contiguous.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n    # Safety in case of malformed input\n    nums = nums[:n]\n\n    min_dq = deque()  # maintains increasing order (front is current min)\n    max_dq = deque()  # maintains decreasing order (front is current max)\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Insert into min deque\n        while min_dq and min_dq[-1] > val:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # Insert into max deque\n        while max_dq and max_dq[-1] < val:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # Shrink window until condition satisfied\n        while max_dq[0] - min_dq[0] > k:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the minimum number of moves required to make all elements equal, where a move consists of incrementing or decrementing an element by 1. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the minimum number of moves needed.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    nums.sort()\n    median = nums[n // 2]        # works for both even and odd n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the longest subarray (contiguous sequence) whose sum is equal to a given integer k. If there are multiple subarrays with the same maximum length, output the starting index of the leftmost one. If no such subarray exists, output -1.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), representing the array.Output Format:Output a single integer: the starting index (0-based) of the leftmost longest subarray whose sum equals k, or -1 if no such subarray exists.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9|nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # prefix_sum -> first index where it appears\n    first_seen = {0: -1}          # sum 0 occurs just before the array starts\n    prefix_sum = 0\n    \n    best_len = -1                 # length of the best subarray found so far\n    best_start = -1               # its starting index\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # Store first occurrence of this prefix sum\n        if prefix_sum not in first_seen:\n            first_seen[prefix_sum] = i\n        \n        # A subarray with sum k ends at i if (prefix_sum - k) was seen before\n        need = prefix_sum - k\n        if need in first_seen:\n            start_idx = first_seen[need] + 1   # subarray starts right after the earlier index\n            curr_len = i - first_seen[need]\n            \n            if (curr_len > best_len) or (curr_len == best_len and start_idx < best_start):\n                best_len = curr_len\n                best_start = start_idx\n    \n    # Output result\n    if best_len == -1:\n        print(-1)\n    else:\n        print(best_start)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers, a1, a2, ..., an. Your task is to find the minimum number of elements you need to remove from the array so that the remaining elements are all equal. Output this minimum number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5).Output:Output a single integer — the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))  # ensure exactly n elements are read\n    if n == 0:\n        print(0)\n        return\n\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray whose sum is exactly k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_sum = 0\n    first_occurrence = {0: -1}          # prefix_sum -> earliest index\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # Check if there is a previous prefix so that current_sum - previous_sum == k\n        target = prefix_sum - k\n        if target in first_occurrence:\n            longest = max(longest, i - first_occurrence[target])\n\n        # Store earliest occurrence of each prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all array elements equal. In one move, you can increment or decrement any single element by 1. Return the minimum number of moves needed.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (–10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer, the minimum number of moves required to make all elements equal.Constraints:1 ≤ n ≤ 10^5–10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    nums = data[1:]\n\n    # Sort to obtain the median (optimal target value)\n    nums.sort()\n    median = nums[n // 2]          # works for both even and odd n\n\n    # Sum of absolute differences to the median\n    moves = sum(abs(x - median) for x in nums)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum value x such that every subarray of length k has at least one element less than or equal to x. Return the smallest such x.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the minimum value x as described.Constraints:1 ≤ k ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    dq = deque()            # stores indices, values are increasing\n    ans = 0\n\n    # first window\n    for i in range(k):\n        while dq and nums[i] <= nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n    ans = nums[dq[0]]\n\n    # remaining windows\n    for i in range(k, n):\n        # remove indices that are out of the current window\n        if dq[0] <= i - k:\n            dq.popleft()\n\n        # maintain monotone queue\n        while dq and nums[i] <= nums[dq[-1]]:\n            dq.pop()\n        dq.append(i)\n\n        # update answer with current window's minimum\n        ans = max(ans, nums[dq[0]])\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer — the number of valid pairs.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # combinations C(k, 2) = k * (k - 1) // 2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting only of lowercase English letters, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:A single line containing the string s (1 ≤ length of s ≤ 10^5).Output:A single integer representing the length of the longest substring without repeating characters.Constraints:- 1 ≤ length of s ≤ 10^5- s consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the latest index of each character.\n    last_seen = {}\n    left = 0        # Left boundary of the current window.\n    best = 0        # Length of the longest valid window found so far.\n\n    for right, ch in enumerate(s):\n        # If the character was seen in the current window, move 'left'.\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        # Update the latest index of the current character.\n        last_seen[ch] = right\n        # Update best length if we found a longer window.\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the number of pairs whose sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Combination count: C(k, 2) = k*(k-1)//2\n    pairs = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements (no duplicates). If all elements are unique, return n.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_seen = {}           # value -> most recent index\n    left = 0                 # left boundary of the current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        # If val was seen inside the current window, move left past that position\n        if val in last_seen and last_seen[val] >= left:\n            left = last_seen[val] + 1\n        last_seen[val] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray with all distinct elements.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}            # value -> last index it appeared at\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window – move left past its previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4, 1 ≤ i ≤ n), separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray with sum exactly k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, subarray (prev_idx +1 ... i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            best_len = max(best_len, i - prefix_to_first_index[target])\n\n        # Store first occurrence of current prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is equal to k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^5 ≤ nums[i] ≤ 10^5) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Map: prefix_sum -> earliest index where this sum occurs\n    first_occurrence = {0: -1}   # sum 0 before array starts\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If a previous prefix with value (prefix_sum - k) exists,\n        # subarray (prev_index+1 ... i) sums to k\n        prev_index = first_occurrence.get(prefix_sum - k)\n        if prev_index is not None:\n            best_len = max(best_len, i - prev_index)\n\n        # Record earliest appearance of current prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k. Output the length of this subarray.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_limited_diff(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose\n    max value minus min value does not exceed k.\n    \"\"\"\n    max_dq = deque()  # Decreasing deque for maximums\n    min_dq = deque()  # Increasing deque for minimums\n    \n    best = 0\n    left = 0\n    \n    for right, val in enumerate(nums):\n        # Maintain decreasing deque for max\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n        \n        # Maintain increasing deque for min\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n        \n        # Shrink window if constraint violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n        \n        # Update best length\n        best = max(best, right - left + 1)\n    \n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n    print(longest_subarray_with_limited_diff(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine if there exists a triplet (i, j, k) such that 0 ≤ i < j < k < n and nums[i] < nums[j] < nums[k]. Return true if such a triplet exists, otherwise return false.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output \"true\" if there exists a strictly increasing triplet subsequence in nums, otherwise output \"false\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef has_increasing_triplet(nums):\n    \"\"\"\n    Returns True if there exists i < j < k with nums[i] < nums[j] < nums[k].\n    Uses O(n) time and O(1) space.\n    \"\"\"\n    first = second = float('inf')\n    for num in nums:\n        if num <= first:\n            first = num          # new smallest so far\n        elif num <= second:\n            second = num         # potential middle value\n        else:\n            # num > first and num > second ⇒ triplet found\n            return True\n    return False\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(\"true\" if has_increasing_triplet(nums) else \"false\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any non-empty subarray with at most one element removed (you may choose to remove no element). A subarray is a contiguous sequence of elements within the array. Return the maximum possible sum.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer, the maximum possible sum as described.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_one_deletion(nums):\n    \"\"\"\n    Returns the maximum sub-array sum where at most one element can be removed.\n    \"\"\"\n    n = len(nums)\n    # dp0: max sum ending at current index with NO deletion so far\n    # dp1: max sum ending at current index WITH one deletion already used\n    dp0 = nums[0]\n    dp1 = float('-inf')      # impossible before any deletion\n    best = nums[0]           # global best\n    \n    for i in range(1, n):\n        x = nums[i]\n        new_dp1 = max(dp1 + x, dp0)   # either keep deletion from before or delete this x\n        new_dp0 = max(dp0 + x, x)     # extend or start fresh\n        best = max(best, new_dp0, new_dp1)\n        dp0, dp1 = new_dp0, new_dp1\n    \n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    ans = max_subarray_sum_one_deletion(nums)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[1], nums[2], ..., nums[n] (|nums[i]| ≤ 10^9).Output:Print a single integer: the number of distinct pairs with an even sum.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Combination C(k, 2) = k * (k - 1) // 2\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return this maximum length.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_idx = {}\n    left = 0\n    best = 0\n    \n    for right, value in enumerate(nums):\n        if value in last_idx and last_idx[value] >= left:\n            left = last_idx[value] + 1\n        last_idx[value] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output:Output a single integer, the maximum length of a contiguous subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read all input at once for efficiency\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # Dictionary to store the earliest index at which a particular prefix sum occurs\n    prefix_index = {0: -1}        # prefix sum 0 is considered to occur before the array starts\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, subarray (previous_index+1 ... i) sums to k\n        needed = prefix_sum - k\n        if needed in prefix_index:\n            max_len = max(max_len, i - prefix_index[needed])\n\n        # Store the first occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine if it is possible to rearrange the characters of S to form a palindrome. Print \"YES\" if it is possible, otherwise print \"NO\".Input Format:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output Format:A single line: \"YES\" or \"NO\".Constraints:- 1 ≤ |S| ≤ 10^5- S contains only lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the string `s` can be rearranged into a palindrome,\n    otherwise returns False.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    # For a palindrome, at most one character may have an odd count.\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, your task is to find the length of the longest subsequence such that every consecutive pair of elements in the subsequence has a difference of exactly 1. The subsequence does not need to be contiguous in the original array.Input:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:- Output a single integer: the length of the longest valid subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]                     # number of elements (can be ignored after sanity check)\n    nums = data[1:]\n    \n    best_len_for_value = {}         # value -> longest valid subsequence length ending with this value\n    overall_best = 0\n    \n    for x in nums:\n        # longest subsequence ending here can extend one that ended with x-1 or x+1\n        cand = 1 + max(best_len_for_value.get(x - 1, 0),\n                       best_len_for_value.get(x + 1, 0))\n        \n        if cand > best_len_for_value.get(x, 0):\n            best_len_for_value[x] = cand\n        \n        if cand > overall_best:\n            overall_best = cand\n    \n    print(overall_best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k (1 ≤ k ≤ n). If there are multiple such subarrays, return the one that appears first (i.e., with the smallest starting index). Output both the sum and the starting index (0-based) of this subarray.Input Format:The first line contains two integers n and k.The second line contains n integers representing the array nums.Output Format:Output two integers: the maximum sum and the starting index of the subarray.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ n-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    \n    n, k = data[0], data[1]\n    nums = data[2:2 + n]          # Extract exactly n numbers\n    \n    # Initial window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    max_start = 0                 # Starting index of the best window found so far\n    \n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]     # Add next element, remove first of the previous window\n        \n        # Update best window if a strictly larger sum is found\n        if window_sum > max_sum:\n            max_sum = window_sum\n            max_start = i - k + 1               # New starting index\n    \n    # Output: maximum sum and its starting index\n    print(max_sum, max_start)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. If all positive integers up to n appear in nums, return n + 1.Input Format:First line: An integer n (1 ≤ n ≤ 10^5), the length of the array.Second line: n space-separated integers, the elements of nums (-10^6 ≤ nums[i] ≤ 10^6).Output Format:Print a single integer: the smallest missing positive integer.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    # Boolean array to mark presence of values 1 .. n\n    present = [False] * (n + 1)  # index 0 unused\n\n    for val in nums:\n        if 1 <= val <= n:\n            present[val] = True\n\n    # First index i (1..n) that is not present is the answer\n    for i in range(1, n + 1):\n        if not present[i]:\n            print(i)\n            return\n    \n    # If all 1..n are present, answer is n+1\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that is not present in the array. Return this integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6) separated by spaces.Output:Print a single integer — the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    present = set()\n    for x in nums:\n        if x > 0:\n            present.add(x)\n\n    # The answer cannot exceed n+1 (Pigeonhole principle)\n    for candidate in range(1, n + 2):\n        if candidate not in present:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is exactly K. If no such subarray exists, output 0.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum exactly K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_to_first_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If a prefix with value (prefix_sum - K) was seen before,\n        # subarray (that previous index + 1 .. i) sums to K.\n        needed = prefix_sum - K\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > best_len:\n                best_len = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being unique (no duplicates). If the array is empty, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums) if n else 0)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, your task is to determine whether there exists a contiguous subarray of length at least 2 such that the sum of its elements is a multiple of k. Return \"Yes\" if such a subarray exists, otherwise return \"No\".Input:The first line contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^9).Output:Output \"Yes\" if such a subarray exists, otherwise output \"No\".Constraints:- 2 ≤ n ≤ 10^5- 1 ≤ |k| ≤ 10^9- |nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef exists_subarray_multiple(nums, k):\n    \"\"\"\n    Returns True if there is a contiguous sub-array of length at least 2\n    whose sum is a multiple of k, otherwise False\n    \"\"\"\n    k = abs(k)                      # multiples of –k are the same as multiples of k\n    prefix_mod_index = {0: -1}      # remainder -> earliest index\n    prefix_sum = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n        remainder = prefix_sum % k\n\n        if remainder in prefix_mod_index:\n            # subarray (prefix_mod_index[remainder]+1 .. i) has sum % k == 0\n            if i - prefix_mod_index[remainder] >= 2:\n                return True\n        else:\n            # store the first time we see this remainder\n            prefix_mod_index[remainder] = i\n    return False\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    if exists_subarray_multiple(nums, k):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray of length k (1 ≤ k ≤ n). Output the maximum sum found. Input Format:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single integer: the maximum sum of any contiguous subarray of length k.Constraints:1 ≤ k ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_of_length_k(nums, k):\n    # Compute the sum of the first window of length k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window from left to right\n    for i in range(k, len(nums)):\n        # Add the next element and remove the element leaving the window\n        window_sum += nums[i] - nums[i - k]\n        # Update max_sum if we found a bigger one\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    \n    # First two integers are n and k\n    n = int(data[0])\n    k = int(data[1])\n    \n    # The remaining n integers are the array elements\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Compute the result\n    result = max_subarray_sum_of_length_k(nums, k)\n    \n    # Output the result\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_occurrence = {}          # value -> last index seen\n    left = 0                      # left boundary of the current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If value seen in current window, move left pointer\n        if value in last_occurrence and last_occurrence[value] >= left:\n            left = last_occurrence[value] + 1\n        last_occurrence[value] = right\n        # Update max length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine if S can be rearranged into a palindrome. A palindrome is a string that reads the same forwards and backwards. Output \"YES\" if it is possible to rearrange S into a palindrome, otherwise output \"NO\".Input Format:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output Format:For each test case, output \"YES\" or \"NO\" on a separate line.Constraints:1 ≤ T ≤ 100  1 ≤ |S| ≤ 1000  S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n    from collections import Counter\n\n    data = sys.stdin.read().split()\n    if not data:\n        return\n\n    t = int(data[0])\n    out_lines = []\n    pos = 1\n\n    for _ in range(t):\n        s = data[pos]\n        pos += 1\n\n        # Count characters\n        freq = Counter(s)\n\n        # Count how many characters have odd occurrences\n        odd_count = sum(1 for v in freq.values() if v % 2)\n\n        # A palindrome permutation is possible if at most one char has odd count\n        out_lines.append(\"YES\" if odd_count <= 1 else \"NO\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray that contains at most two distinct integers. Return the length of this subarray.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the size of the array.- The second line contains N space-separated integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9), representing the array elements.Output Format:- Output a single integer: the length of the longest contiguous subarray with at most two distinct integers.Constraints:- 1 ≤ N ≤ 10^5- 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    left = 0\n    freq = defaultdict(int)\n    max_len = 0\n    \n    for right, value in enumerate(arr):\n        freq[value] += 1\n        \n        while len(freq) > 2:\n            freq[arr[left]] -= 1\n            if freq[arr[left]] == 0:\n                del freq[arr[left]]\n            left += 1\n        \n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer representing the length of the longest contiguous subarray with sum k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Hash map to store the earliest index at which each prefix sum occurs.\n    # Initialize with sum 0 at index -1 to handle subarrays starting at index 0.\n    first_occurrence = {0: -1}\n    \n    prefix_sum = 0\n    max_len = 0\n    \n    for idx, val in enumerate(nums):\n        prefix_sum += val\n        \n        # If we have not seen this prefix sum before, record its earliest index.\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = idx\n        \n        # If (prefix_sum - k) has been seen, a subarray summing to k ends here.\n        look_for = prefix_sum - k\n        if look_for in first_occurrence:\n            candidate_len = idx - first_occurrence[look_for]\n            if candidate_len > max_len:\n                max_len = candidate_len\n    \n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (|nums[i]| ≤ 10^9).Output:Print a single integer: the number of pairs (i, j) meeting the requirement.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # We only need parity counts\n    even = odd = 0\n    for i in range(1, n + 1):\n        num = int(data[i])\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    # Pairs with even sum: (even, even) or (odd, odd)\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements distinct (no duplicates). A subarray is a contiguous part of the array. Return the length as an integer.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer: the length of the longest subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_seen = {}          # value -> last index\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_seen and last_seen[val] >= left:\n            # duplicate inside current window, move left pointer\n            left = last_seen[val] + 1\n        last_seen[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1: 1 + n]\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the number of valid pairs with even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])          # length of the array (not actually needed beyond validation)\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:           # odd\n            odd_count += 1\n        else:                 # even\n            even_count += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    ans = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Your task is to determine whether S can be rearranged to form a palindrome. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single string S (1 ≤ |S| ≤ 10^5), consisting only of lowercase English letters.Output Format:Print \"YES\" if the string can be rearranged to form a palindrome, or \"NO\" otherwise.Constraints:1 ≤ |S| ≤ 10^5S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of `s` can form a palindrome,\n    otherwise returns False.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    # A palindrome allows at most one character with an odd frequency.\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers, determine whether it is possible to make all elements equal by performing any number of the following operation: select any element and increase it by 1. Output \"YES\" if it is possible, otherwise output \"NO\".Input:The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the list.  The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).Output:Print \"YES\" if it is possible to make all elements equal using the operation, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    \"\"\"\n    Because we are allowed to increase any individual element by 1\n    as many times as we like, we can always raise the smaller\n    elements up to the current maximum element value. Therefore,\n    it is always possible to make every element equal.\n    \"\"\"\n    _ = sys.stdin.read()   # read & discard – the answer is always YES\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find and return the length of the longest contiguous subarray where the absolute difference between any two elements in the subarray is at most 1.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest such subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Returns length of the longest contiguous subarray\n    where max(element) - min(element) <= 1.\n    \"\"\"\n    max_dq = deque()   # decreasing deque for current window maximum\n    min_dq = deque()   # increasing deque for current window minimum\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # Insert current element into the deques\n        while max_dq and value > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(value)\n\n        while min_dq and value < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(value)\n\n        # Shrink window from the left while it violates the condition\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_subarray_at_most_one(nums)\n    print(result)\n\n\n# Do NOT forget to call main()\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n distinct integers, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), all distinct.Output:Print a single integer: the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    max_dq = deque()   # indexes of elements, values decreasing\n    min_dq = deque()   # indexes of elements, values increasing\n    left = 0\n    best = 0\n\n    for right, val in enumerate(arr):\n        # maintain decreasing deque for max\n        while max_dq and arr[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain increasing deque for min\n        while min_dq and arr[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until it satisfies condition\n        while arr[max_dq[0]] - arr[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string. If multiple such substrings exist, output the length of any one of them.Input Format:The first line contains a single string S (1 ≤ |S| ≤ 10^5).Output Format:Print a single integer representing the length of the longest substring without repeating characters.Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    without repeating characters using a sliding window.\n    \"\"\"\n    last_pos = [-1] * 26           # since only 'a' - 'z'\n    left = 0                       # start index of current window\n    best = 0                       # best window length found\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97         # map 'a'..'z' -> 0..25\n        # If the character was seen in current window, move left pointer\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == '__main__':\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), representing the elements of the array.Output Format:Print a single integer: the length of the longest contiguous subarray with sum exactly k. If no such subarray exists, print 0.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9|a_i| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_idx = {0: -1}  # prefix sum -> earliest index\n    prefix = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix += val\n\n        # If we've seen prefix - k before, subarray (prev_idx+1 .. i) sums to k\n        needed = prefix - k\n        if needed in prefix_to_first_idx:\n            length = i - prefix_to_first_idx[needed]\n            if length > best_len:\n                best_len = length\n\n        # Store earliest occurrence of current prefix sum\n        if prefix not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest subarray with all unique elements. A subarray is a contiguous part of the array. Return the length of the longest such subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer: the length of the longest subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n\n    last_seen = {}          # value -> most recent index\n    left = 0                # left edge of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        # If val already in current window, move left edge past its last position\n        if val in last_seen and last_seen[val] >= left:\n            left = last_seen[val] + 1\n        last_seen[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray where the sum of the elements is even. If there are multiple such subarrays, output the length of the longest one. If there is no such subarray, output 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer representing the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # first_idx stores the earliest index where a given prefix parity appears\n    first_idx = {0: -1}   # prefix sum 0 (even) appears before the array starts\n    parity = 0            # current prefix parity (0 = even, 1 = odd)\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        parity ^= (num & 1)        # update parity (XOR with 1 if num is odd)\n        if parity in first_idx:\n            # we have seen this parity before: subarray (first_idx[parity]+1 ... i) is even-sum\n            max_len = max(max_len, i - first_idx[parity])\n        else:\n            # first time this parity appears; record its position\n            first_idx[parity] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_occurrence = {}           # value -> last index seen\n    start = 0                      # left border of current window\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        if val in last_occurrence and last_occurrence[val] >= start:\n            start = last_occurrence[val] + 1     # shrink window past duplicate\n        last_occurrence[val] = i                 # record/update last position\n        best_len = max(best_len, i - start + 1)  # update answer\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array A of length N, a \"good pair\" is a pair of indices (i, j) such that i < j and A[i] + A[j] is even. Your task is to count the total number of good pairs in the array.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers A[1], A[2], ..., A[N] (1 ≤ A[i] ≤ 10^9).Output Format:Print a single integer, the total number of good pairs.Constraints:1 ≤ N ≤ 10^51 ≤ A[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in arr:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    \n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    good_pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(good_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of all its elements is equal to k. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray with sum equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}  # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If prefix_sum - k has been seen, subarray (prev_index+1 .. i) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            current_len = i - prefix_to_first_index[need]\n            if current_len > max_len:\n                max_len = current_len\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers, separated by spaces, where each integer nums[i] satisfies -10^6 ≤ nums[i] ≤ 10^6.Output Format:Output a single integer: the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # The smallest missing positive is at most n + 1\n    present = [False] * (n + 2)          # indices 0..n+1\n    \n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n    \n    # Find the first index (starting from 1) that is not marked present\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer target. Your task is to find two distinct indices i and j (i < j) such that nums[i] + nums[j] equals target. If such a pair exists, output the indices i and j (1-based). If there are multiple answers, output any one. If no such pair exists, output -1 -1.Input:The first line contains two integers n and target (2 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output two integers i and j (1 ≤ i < j ≤ n) such that nums[i] + nums[j] = target, or -1 -1 if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index (1-based)\n    for idx, value in enumerate(nums, 1):\n        need = target - value\n        if need in seen:\n            print(seen[need], idx)\n            return\n        seen[value] = idx\n\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether it is possible to rearrange the characters of S to form a palindrome. Print \"YES\" if possible, otherwise print \"NO\".Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.The second line contains the string S of length n, consisting only of lowercase English letters.Output:Print \"YES\" if the string can be rearranged to form a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of `s` can form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(cnt & 1 for cnt in freq.values())  # cnt & 1 is 1 if cnt is odd else 0\n    # For even length strings no char may have an odd count.\n    # For odd length strings exactly one char may have an odd count.\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if len(data) < 2:\n        return                        # insufficient input; nothing to do\n    n, s = int(data[0]), data[1]\n    # Optionally, trust input: len(s) == n.\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, compute the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains the string S (1 ≤ |S| ≤ 10^5).Output:Print a single integer representing the length of the longest substring without repeating characters.Constraints:- 1 ≤ |S| ≤ 10^5- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` containing no repeating characters.\n    Works in O(|s|) time and O(1) extra memory.\n    \"\"\"\n    last_pos = [-1] * 26              # last_pos[c] = most recent index of character c\n    start = 0                         # left boundary of current window\n    best = 0                          # best (maximum) window length found\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97            # 'a' -> 0, 'b' -> 1, ..., 'z' -> 25\n        # If we've seen this character inside the current window,\n        # shift the window start just after its previous occurrence.\n        if last_pos[idx] >= start:\n            start = last_pos[idx] + 1\n        # Record current character position\n        last_pos[idx] = i\n        # Update best length\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, your task is to determine if there exists a pair of distinct integers in the list whose sum is exactly equal to a given integer K. If such a pair exists, print \"YES\"; otherwise, print \"NO\".Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9), separated by spaces.Output:Print \"YES\" if there exists a pair of distinct integers whose sum equals K, otherwise print \"NO\".Constraints:- 1 ≤ N ≤ 10^5- 1 ≤ K ≤ 10^9- 1 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        k = int(next(it))\n    except StopIteration:\n        return\n\n    seen = set()\n    for _ in range(n):\n        try:\n            x = int(next(it))\n        except StopIteration:\n            break\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, your task is to find the length of the longest contiguous subarray (i.e., a sequence of consecutive elements) that contains at most two distinct numbers.  Input Format:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.  Output Format:  - Output a single integer, the length of the longest contiguous subarray with at most two distinct numbers.  Constraints:  - 1 ≤ n ≤ 10^5  - 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    that contains at most two distinct numbers.\n    \"\"\"\n    left = 0\n    freq = defaultdict(int)\n    best = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        # Shrink the window until we have at most 2 distinct numbers\n        while len(freq) > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # we trust the input to contain at least n numbers\n    result = longest_subarray_two_distinct(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest missing positive integer from the array. You must implement an algorithm that runs in O(n) time and uses constant extra space. The array may contain negative numbers and zeros.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6) separated by spaces.Output Format:- Print a single integer: the smallest missing positive integer.Constraints:- 1 ≤ n ≤ 10^5- -10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Place each number x (1 ≤ x ≤ n) at index x-1\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            target = nums[i] - 1\n            nums[i], nums[target] = nums[target], nums[i]\n\n    # The first index i where nums[i] != i+1 gives the answer\n    for i in range(n):\n        if nums[i] != i + 1:\n            print(i + 1)\n            return\n\n    # If all positions are correct, the missing number is n+1\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Assume that each input has exactly one solution, and you may not use the same element twice. Return the answer as a pair of indices in any order.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n space-separated integers, nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output two integers: the indices (0-based) of the numbers that add up to target. If there are multiple valid answers, output any one of them.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = {}  # value -> index\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            print(seen[complement], idx)\n            return\n        seen[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous elements) that contains at most two distinct integers. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest subarray with at most two distinct integers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    freq = defaultdict(int)\n    left = max_len = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        while len(freq) > 2:            # shrink window until we have ≤ 2 distinct values\n            left_val = nums[left]\n            freq[left_val] -= 1\n            if freq[left_val] == 0:\n                del freq[left_val]\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_two_distinct(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # combinations of 2: k choose 2 = k*(k-1)//2\n    pairs = even_count * (even_count - 1) // 2\n    pairs += odd_count * (odd_count - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of contiguous subarrays whose sum is exactly k. Two subarrays are different if they start or end at different indices.  Input Format:  The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).  The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).  Output Format:  Print a single integer, the number of contiguous subarrays whose sum is exactly k.  Constraints:  - 1 ≤ n ≤ 10^5  - |nums[i]| ≤ 10^4  - |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1          # Empty prefix\n    prefix_sum = 0\n    result = 0\n\n    for num in nums:\n        prefix_sum += num\n        result += prefix_counts[prefix_sum - k]   # #subarrays ending here with sum k\n        prefix_counts[prefix_sum] += 1            # store current prefix\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray containing only even numbers. If there are multiple such subarrays with the same maximum length, return the length of any one of them. If there is no even number in the array, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest subarray of consecutive even numbers.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    max_len = 0\n    curr_len = 0\n    \n    for num in nums:\n        if num % 2 == 0:          # even number\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n        else:                      # odd number – break the streak\n            curr_len = 0\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is divisible by k. If no such subarray exists, return 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_mod_first_idx = {0: -1}          # modulo value -> first index seen\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        mod = prefix_sum % k                # always non-negative in Python\n\n        if mod not in prefix_mod_first_idx:\n            prefix_mod_first_idx[mod] = i   # remember earliest occurrence\n        else:\n            length = i - prefix_mod_first_idx[mod]\n            if length > longest:\n                longest = length\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the number of distinct pairs whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    for num in nums:\n        if num & 1 == 0:\n            even_count += 1\n    odd_count = n - even_count\n\n    # Pairs with even sums: choose any 2 evens or any 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray of length exactly K. Return this maximum sum. Input:The first line contains two integers N and K (1 ≤ K ≤ N ≤ 10^5).The second line contains N integers A1, A2, ..., AN (-10^4 ≤ Ai ≤ 10^4).Output:Output a single integer, the maximum sum of any contiguous subarray of length K.Constraints:1 ≤ K ≤ N ≤ 10^5-10^4 ≤ Ai ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    # Initial window sum\n    window_sum = sum(arr[:K])\n    max_sum = window_sum\n\n    for i in range(K, N):\n        window_sum += arr[i]          # add next element\n        window_sum -= arr[i - K]      # remove element leaving the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Two pairs are considered different if their indices are different.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the number of distinct pairs whose sum is even.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to choose 2 items from k items\n    def combinations2(k: int) -> int:\n        return k * (k - 1) // 2\n\n    result = combinations2(even_cnt) + combinations2(odd_cnt)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Two pairs are considered unique if they involve different indices. Return the count of unique pairs.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the number of unique pairs.Constraints:1 ≤ n ≤ 10^4-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    freq = Counter(nums)\n    pairs = 0\n    \n    for num in freq:\n        comp = target - num\n        if comp not in freq:\n            continue\n        if num < comp:                                # handle (num, comp) once\n            pairs += freq[num] * freq[comp]\n        elif num == comp:                             # both indices pick same value\n            cnt = freq[num]\n            pairs += cnt * (cnt - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum is k. If no such subarray exists, output 0.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_index = {0: -1}           # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # If (prefix_sum - k) occurred before, subarray (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            length = i - prefix_to_index[target]\n            if length > max_len:\n                max_len = length\n        \n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray whose sum is exactly equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4 for 1 ≤ i ≤ n).Output:Print a single integer — the length of the longest contiguous subarray with sum exactly k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    prefix_sum = 0\n    first_occurrence = {0: -1}          # prefix_sum : earliest index\n    longest = 0\n\n    for idx, val in enumerate(nums):\n        prefix_sum += val\n\n        # If there exists a previous prefix_sum such that\n        # current_prefix - previous_prefix == k,\n        # then subarray (previous_index+1 ... idx) sums to k.\n        needed = prefix_sum - k\n        if needed in first_occurrence:\n            longest = max(longest, idx - first_occurrence[needed])\n\n        # Store earliest index for each prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = idx\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring without repeating characters. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string.- The second line contains the string S of length n.Output Format:- Print a single integer: the length of the longest substring without repeating characters.Constraints:- 1 ≤ n ≤ 10^5- S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n\n    # last occurrence positions for each lowercase letter, -1 means unseen\n    last_pos = [-1] * 26\n\n    left = 0          # left boundary of current window\n    best = 0          # best window length found\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97          # map 'a'..'z' to 0..25\n        if last_pos[idx] >= left:   # char repeated within current window\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is divisible by k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 100- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n    \n    # Frequency of each remainder modulo k\n    cnt = [0] * k\n    for x in nums:\n        cnt[x % k] += 1\n\n    total_pairs = 0\n\n    # Pairs where both numbers give remainder 0\n    total_pairs += cnt[0] * (cnt[0] - 1) // 2\n\n    # Pairs where remainders are complementary: r and k - r\n    for r in range(1, (k + 1) // 2):\n        total_pairs += cnt[r] * cnt[k - r]\n\n    # If k is even, handle the middle remainder k/2 separately\n    if k % 2 == 0:\n        mid = k // 2\n        total_pairs += cnt[mid] * (cnt[mid] - 1) // 2\n\n    print(total_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers, where each integer represents the height of a building in a row. A building is considered \"visible\" if there is no taller building to its left. Your task is to count the number of visible buildings in the row.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of buildings.The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9), where h_i is the height of the i-th building.Output:Print a single integer: the number of visible buildings.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    heights = list(map(int, data[1:1 + n]))\n    \n    visible = 0\n    max_height_so_far = 0  # no building yet\n    \n    for h in heights:\n        if h > max_height_so_far:\n            visible += 1\n            max_height_so_far = h\n    \n    print(visible)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S, determine whether it is possible to rearrange its characters to form a palindrome. A palindrome is a string that reads the same forwards and backwards. Output \"YES\" if it is possible to rearrange S into a palindrome, or \"NO\" otherwise.Input:The first line contains a single string S consisting of lowercase English letters (1 ≤ |S| ≤ 10^5).Output:Output \"YES\" if S can be rearranged into a palindrome, otherwise output \"NO\".Constraints:1 ≤ |S| ≤ 10^5S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    # Read the input string, stripping the newline\n    s = sys.stdin.readline().strip()\n\n    # Count frequency of each character\n    freq = Counter(s)\n\n    # Count how many characters appear an odd number of times\n    odd_counts = sum(1 for cnt in freq.values() if cnt % 2)\n\n    # A string can be permuted into a palindrome\n    # if at most one character count is odd\n    if odd_counts <= 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the maximum length found.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer representing the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_index = {}\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1  # shrink window past the previous occurrence\n        last_index[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray with all elements being distinct. Return the length of this subarray.Input Format:- The first line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the array.- The second line contains N space-separated integers A[i] (1 ≤ A[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ N ≤ 10^5- 1 ≤ A[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(arr):\n    last_pos = {}                # value -> last index where it appeared\n    left = 0                     # beginning of the current window\n    best = 0\n\n    for right, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= left:\n            # val is inside current window -> move left past its previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        # Update best length\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine whether it is possible to rearrange the characters of S to form a palindrome. Return \"YES\" if possible, otherwise return \"NO\".Input:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output:For each test case, print \"YES\" (without quotes) if it is possible to rearrange S into a palindrome, or \"NO\" otherwise.Constraints:1 ≤ T ≤ 1001 ≤ |S| ≤ 1000S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be permuted to form a palindrome.\n    \"\"\"\n    cnt = Counter(s)\n    # Count the number of characters with odd frequency\n    odd = sum(1 for v in cnt.values() if v % 2)\n    # For a string to be rearranged into a palindrome:\n    #   - if its length is even, no chars may have odd counts\n    #   - if its length is odd, exactly one char may have an odd count\n    return odd <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    for i in range(1, t + 1):\n        s = data[i].strip()\n        out_lines.append(\"YES\" if can_form_palindrome(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the number of pairs (i, j) where the sum nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of a contiguous subarray. A subarray is a sequence of consecutive elements from the array. If all elements in the array are negative, return the maximum element.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4), the elements of the array.Output:Print a single integer, the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = max(x, cur + x)\n        best = max(best, cur)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of its elements is exactly k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Print a single integer representing the length of the longest contiguous subarray with sum exactly k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_idx = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # Check if there exists a previous prefix with value (prefix_sum - k)\n        needed = prefix_sum - k\n        if needed in prefix_to_idx:\n            max_len = max(max_len, i - prefix_to_idx[needed])\n        \n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_idx:\n            prefix_to_idx[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:      # odd\n            odd += 1\n        else:            # even\n            even += 1\n\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is divisible by k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^3).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^3- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Frequency array for remainders\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    # Pairs whose both elements leave remainder 0\n    pairs = freq[0] * (freq[0] - 1) // 2\n\n    # Pairs with complementary remainders r and k - r\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, handle the special remainder k/2\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    print(pairs)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices differ.  Input Format:  The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:  Output a single integer representing the number of unique pairs whose sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most 1.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest such subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    whose maximum and minimum differ by at most 1.\n    \"\"\"\n    max_q = deque()   # decreasing queue for maximums\n    min_q = deque()   # increasing queue for minimums\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain decreasing deque for maxima\n        while max_q and nums[max_q[-1]] < val:\n            max_q.pop()\n        max_q.append(right)\n\n        # maintain increasing deque for minima\n        while min_q and nums[min_q[-1]] > val:\n            min_q.pop()\n        min_q.append(right)\n\n        # shrink window if condition violated\n        while nums[max_q[0]] - nums[min_q[0]] > 1:\n            left += 1\n            if max_q[0] < left:\n                max_q.popleft()\n            if min_q[0] < left:\n                min_q.popleft()\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray with all elements distinct (no repeated elements). A subarray is a contiguous part of the array.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    seen = {}\n    left = 0\n    max_len = 0\n    \n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            # 'val' is repeated inside the current window.\n            left = seen[val] + 1\n        seen[val] = right\n        max_len = max(max_len, right - left + 1)\n        \n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. Each input will have exactly one solution, and you may not use the same element twice. Return the answer as a list of two integers in increasing order (i.e., [i, j] with i < j).Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print two integers, the indices of the two elements that add up to target, separated by a space.Constraints:- Exactly one solution exists.- Indices are zero-based.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, target = data[0], data[1]\n    nums = data[2:]\n\n    seen = {}                       # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            j = seen[complement]\n            if j < i:\n                print(j, i)\n            else:\n                print(i, j)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n space-separated integers, the elements of nums, where |nums[i]| ≤ 10^4.Output Format:Output a single integer: the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_to_first_idx = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, the subarray between that index +1 and i sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            start_idx = prefix_to_first_idx[target]\n            curr_len = i - start_idx\n            if curr_len > max_len:\n                max_len = curr_len\n\n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray in which the difference between the maximum and minimum elements does not exceed k. If there are multiple such subarrays, return the length of any one of them.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^9−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_length(nums, k):\n    min_dq = deque()   # indices of potential minima, increasing values\n    max_dq = deque()   # indices of potential maxima, decreasing values\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain max deque (front is current maximum)\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain min deque (front is current minimum)\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window if condition violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_length(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target. Return the count of such pairs.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of pairs whose sum equals target.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    freq = {}\n    pairs = 0\n\n    for x in nums:\n        comp = target - x\n        if comp in freq:\n            pairs += freq[comp]\n        freq[x] = freq.get(x, 0) + 1\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1.Input:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:- Output a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_diff_le_one(nums):\n    \"\"\"\n    Returns length of the longest contiguous subarray\n    in which max(element) - min(element) <= 1.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    min_d = deque()     # increasing values -> front is current minimum index\n    max_d = deque()     # decreasing values -> front is current maximum index\n\n    left = 0            # left boundary of sliding window\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain monotone deques for min and max\n        while min_d and val < nums[min_d[-1]]:\n            min_d.pop()\n        min_d.append(right)\n\n        while max_d and val > nums[max_d[-1]]:\n            max_d.pop()\n        max_d.append(right)\n\n        # Shrink window until it becomes valid\n        while nums[max_d[0]] - nums[min_d[0]] > 1:\n            left += 1\n            if min_d[0] < left:\n                min_d.popleft()\n            if max_d[0] < left:\n                max_d.popleft()\n\n        # Update answer\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_subarray_diff_le_one(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum difference between any two elements in the array such that the larger element comes after the smaller element. If no such pair exists (i.e., the array is non-increasing), return -1.Input:The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the maximum difference as described above, or -1 if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    min_so_far = nums[0]\n    max_diff = -1  # keeps the best positive difference found\n\n    for num in nums[1:]:\n        if num > min_so_far:\n            max_diff = max(max_diff, num - min_so_far)\n        else:\n            min_so_far = num  # update to a new smaller value\n\n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}            # value -> last index where it appeared\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window → move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray in which the sum of all elements is exactly K. If there is no such subarray, output 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).Output Format:Output a single integer representing the length of the longest contiguous subarray with sum exactly K.Constraints:1 ≤ N ≤ 10^5-10^9 ≤ K ≤ 10^9-10^4 ≤ A_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    \n    # Read the array\n    arr = [int(next(it)) for _ in range(n)]\n    \n    # Dictionary to store the first occurrence (earliest index) of each prefix sum\n    first_idx = {0: -1}          # prefix sum 0 occurs before the array starts\n    prefix_sum = 0\n    best_len = 0\n    \n    for i, val in enumerate(arr):\n        prefix_sum += val\n        \n        # If we've seen prefix_sum - k before, we can form a subarray ending at i\n        target = prefix_sum - k\n        if target in first_idx:\n            cur_len = i - first_idx[target]\n            if cur_len > best_len:\n                best_len = cur_len\n        \n        # Record the earliest index for this prefix_sum (if not recorded already)\n        if prefix_sum not in first_idx:\n            first_idx[prefix_sum] = i\n    \n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Output this count.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:A single integer, the number of distinct pairs where the sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of contiguous subarrays where the product of all the elements in the subarray is less than a given integer k. Two subarrays are considered different if they start or end at different indices.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 1000).Output Format:- Output a single integer: the number of contiguous subarrays where the product of all elements is less than k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- 1 ≤ nums[i] ≤ 1000\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef count_subarrays_product_less_than_k(nums, k):\n    \"\"\"\n    Returns the number of contiguous subarrays whose product is < k.\n    Uses a sliding-window / two-pointer approach in O(n) time.\n    \"\"\"\n    if k <= 1:               # no positive product of positive numbers can be < 1\n        return 0\n\n    prod = 1\n    left = 0\n    total = 0\n\n    for right, val in enumerate(nums):\n        prod *= val\n\n        # shrink window until product < k\n        while prod >= k and left <= right:\n            prod //= nums[left]\n            left += 1\n\n        # all subarrays ending at `right` and starting anywhere from `left` to `right`\n        # have product < k\n        total += right - left + 1\n\n    return total\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = count_subarrays_product_less_than_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray of length k, where 1 ≤ k ≤ n. Output the maximum sum found.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) for 1 ≤ i ≤ n.Output:Output a single integer representing the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Compute sum of first window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window across the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]  # add next, remove first of previous window\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers A of length N. A subarray is called \"good\" if the sum of its elements is divisible by K. Count the number of good subarrays in A.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^9).Output Format:Output a single integer representing the number of good subarrays.Constraints:1 ≤ N ≤ 10^51 ≤ K ≤ 10^9|Ai| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    \n    # Frequency map for prefix sums modulo K\n    freq = defaultdict(int)\n    freq[0] = 1        # empty prefix\n    \n    prefix_mod = 0\n    good_subarrays = 0\n    \n    for _ in range(N):\n        val = int(next(it))\n        prefix_mod = (prefix_mod + val) % K         # Python keeps it non-negative\n        good_subarrays += freq[prefix_mod]          # all previous same mod give good subarrays\n        freq[prefix_mod] += 1\n    \n    print(good_subarrays)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If the array is empty, return 0.Input:The first line contains a single integer n (0 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer — the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    seen = set()\n    left = 0\n    best = 0\n\n    for right, v in enumerate(nums):\n        while v in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(v)\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer representing the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of pairs from evens and odds separately\n    pairs = even_count * (even_count - 1) // 2\n    pairs += odd_count * (odd_count - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is equal to k. If there is no such subarray, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers, representing the array nums (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer representing the length of the longest subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If entire subarray [0 .. i] sums to k\n        if prefix_sum == k:\n            best = i + 1\n\n        # If there is a previous prefix with value (prefix_sum - k)\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            length = i - prefix_to_index[target]\n            if length > best:\n                best = length\n\n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between the maximum and minimum element is less than or equal to k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^91 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    n = len(nums)\n    min_dq = deque()  # indices of elements in increasing order\n    max_dq = deque()  # indices of elements in decreasing order\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain min deque\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # maintain max deque\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # shrink window if condition is violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            left += 1\n            if min_dq[0] < left:\n                min_dq.popleft()\n            if max_dq[0] < left:\n                max_dq.popleft()\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer target. If no such subarray exists, output 0.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer — the length of the longest contiguous subarray whose sum equals target. If none exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_to_first_index = {0: -1}     # prefix sum -> earliest index\n    curr_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        curr_sum += val\n\n        # Case 1: subarray from 0 to i\n        if curr_sum == target:\n            max_len = max(max_len, i + 1)\n\n        # Case 2: subarray ending at i with sum == target\n        needed = curr_sum - target\n        if needed in prefix_to_first_index:\n            prev_index = prefix_to_first_index[needed]\n            max_len = max(max_len, i - prev_index)\n\n        # Store earliest occurrence of this prefix sum\n        if curr_sum not in prefix_to_first_index:\n            prefix_to_first_index[curr_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find two distinct indices i and j such that nums[i] + nums[j] == target. If such a pair exists, output the indices i and j (0-based). If there are multiple valid pairs, you may output any one of them. If no such pair exists, output -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output two integers: the indices i and j (i ≠ j), or -1 -1 if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        need = target - num\n        if need in seen:\n            print(seen[need], i)\n            return\n        seen[num] = i\n    \n    # No pair found\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of nums.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_len(nums):\n    last_pos = {}\n    left = 0\n    max_len = 0\n    \n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray_len(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum difference between two elements nums[i] and nums[j] (i < j) such that nums[j] > nums[i]. If no such pair exists, return -1.Input:The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the maximum difference as specified, or -1 if no such pair exists.Constraints:2 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    min_val = nums[0]           # smallest value seen so far\n    max_diff = -1               # best positive difference found\n    \n    for num in nums[1:]:\n        if num > min_val:                       # a valid increasing pair\n            diff = num - min_val\n            if diff > max_diff:\n                max_diff = diff\n        elif num < min_val:                     # update minimum for future pairs\n            min_val = num\n    \n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray where the sum of its elements is exactly K. If no such subarray exists, output 0.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).Output:Print a single integer representing the length of the longest subarray with sum exactly K.Constraints:- 1 ≤ N ≤ 10^5- |K| ≤ 10^9- |A_i| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    N, K = data[0], data[1]\n    arr = data[2:2 + N]\n\n    prefix_sum = 0\n    first_pos = {0: 0}          # prefix_sum value -> earliest index\n    best = 0\n\n    for i, v in enumerate(arr, 1):  # 1-based index for easy length calc\n        prefix_sum += v\n        want = prefix_sum - K\n        if want in first_pos:\n            best = max(best, i - first_pos[want])\n        # store earliest occurrence only\n        if prefix_sum not in first_pos:\n            first_pos[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Each pair should be counted only once, regardless of how many times the numbers appear in the array.Input Format:- The first line contains two integers n (the length of the array) and target.- The second line contains n integers, the elements of nums.Output Format:- Output a single integer: the number of unique pairs with the given sum.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return                 # no input\n    \n    n, target = data[0], data[1]\n    nums = data[2:2 + n]       # take exactly n numbers (ignore any extra)\n    \n    freq = Counter(nums)       # frequency of each value\n    \n    unique_pairs = 0\n    for a in freq:\n        b = target - a\n        if b not in freq:\n            continue\n        \n        if a < b:                      # (a,b) with a<b counted once\n            unique_pairs += 1\n        elif a == b and freq[a] >= 2:  # pair of identical numbers needs at least two occurrences\n            unique_pairs += 1\n    \n    print(unique_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"balanced\" if the sum of its elements is zero. Your task is to find the length of the longest balanced subarray in nums. If there is no such subarray, output 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers: nums[1], nums[2], ..., nums[n], where -10^4 ≤ nums[i] ≤ 10^4.Output Format:Print a single integer: the length of the longest balanced subarray.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_zero_sum_subarray(nums):\n    prefix_index = {0: -1}     # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if prefix_sum in prefix_index:\n            # A previous occurrence exists: subarray (previous_index+1 ... i) sums to 0\n            max_len = max(max_len, i - prefix_index[prefix_sum])\n        else:\n            # Store the first time we see this prefix_sum\n            prefix_index[prefix_sum] = i\n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_zero_sum_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to find the number of subarrays (contiguous segments) whose sum is exactly equal to k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer denoting the number of subarrays whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1     # empty prefix sum\n    prefix_sum = 0\n    ans = 0\n\n    for num in nums:\n        prefix_sum += num\n        ans += prefix_counts[prefix_sum - k]   # how many prior prefixes give the desired sum\n        prefix_counts[prefix_sum] += 1\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to determine whether there exist two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k (i.e., |i - j| ≤ k). Return \"YES\" if such a pair exists, otherwise return \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exists such a pair, otherwise print \"NO\".Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    window = set()              # stores elements in the last k positions\n    for i, val in enumerate(nums):\n        if val in window:       # duplicate within distance ≤ k found\n            print(\"YES\")\n            return\n        window.add(val)\n        # maintain window size ≤ k\n        if i >= k:\n            window.discard(nums[i - k])\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements (i.e., no repeated numbers). If there are multiple such subarrays, output the length of any one of them.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^6), the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray with all unique elements.\n    \"\"\"\n    last_pos = {}           # maps number -> last index where it appeared\n    left = 0                # left boundary of the current window\n    best = 0                # best length found so far\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # value already exists inside current window, move `left`\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of all unique elements in the array (elements that appear exactly once). If there are no unique elements, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the sum of all unique elements in nums.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # ensure only n numbers are taken\n    freq = Counter(nums)\n    unique_sum = sum(num for num, cnt in freq.items() if cnt == 1)\n    print(unique_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the minimum number of moves required to make all elements in the array equal, where in one move, you can increment or decrement any element by 1. Output the minimum total number of moves.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer representing the minimum number of moves needed.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    nums.sort()\n    median = nums[n // 2]          # works for both odd and even n\n\n    total_moves = sum(abs(x - median) for x in nums)\n    print(total_moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. If all elements in nums are unique, return n.Input:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:- Output a single integer representing the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}              # value -> latest index\n    left = 0                   # left boundary of the current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        # If value seen and its last occurrence is inside current window,\n        # shrink window from the left.\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is equal to a given integer k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9|nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray whose elements sum to k.\n    \"\"\"\n    prefix_to_first_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, then the subarray between that\n        # earliest index + 1 and current index i sums to k.\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix sum.\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray such that the difference between the maximum and minimum elements in the subarray is at most 2.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    max_dq = deque()   # decreasing deque: front is current max\n    min_dq = deque()   # increasing deque: front is current min\n    \n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        # Maintain max deque (monotonically decreasing)\n        while max_dq and max_dq[-1] < val:\n            max_dq.pop()\n        max_dq.append(val)\n        \n        # Maintain min deque (monotonically increasing)\n        while min_dq and min_dq[-1] > val:\n            min_dq.pop()\n        min_dq.append(val)\n        \n        # Shrink window from left while invalid\n        while max_dq[0] - min_dq[0] > 2:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n        \n        # Update answer\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer, the length of the longest contiguous subarray whose sum equals k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}        # prefix sum -> earliest index\n    current_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        current_sum += val\n\n        # If (current_sum - k) has been seen, subarray (prefix_to_first_index+1 ... i) sums to k\n        required = current_sum - k\n        if required in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[required])\n\n        # Record earliest occurrence of this prefix sum\n        if current_sum not in prefix_to_first_index:\n            prefix_to_first_index[current_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^4), representing the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(arr, k):\n    # prefix_sum -> earliest index where it appears\n    first_occurrence = {0: -1}        # to handle subarrays that start at index 0\n    prefix_sum = 0\n    best_len = 0\n\n    for i, value in enumerate(arr):\n        prefix_sum += value\n\n        # We need prefix_sum - k to have appeared before\n        needed = prefix_sum - k\n        if needed in first_occurrence:\n            best_len = max(best_len, i - first_occurrence[needed])\n\n        # Only keep the earliest index for a given prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray_with_sum_k(arr, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[0], nums[1], ..., nums[n-1] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer, the number of unique pairs with even sums.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays with the same maximum sum, return the first one’s sum. Input Format:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer, the maximum sum of any contiguous subarray of length k.Constraints:1 ≤ k ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window sum (first k elements)\n    window_sum = sum(nums[:k])\n    max_sum = window_sum          # best sum found so far\n\n    # Slide the window from position k to n-1\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]  # add next, drop first of previous window\n        if window_sum > max_sum:             # update only when strictly larger\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Each input will have exactly one solution, and you may not use the same element twice. Return the answer as a list of two integers in ascending order.Input Format:- The first line contains two integers n (the length of the array) and target.- The second line contains n space-separated integers, representing nums.Output Format:- Output two space-separated integers, the indices (0-based) of the two numbers in ascending order.Constraints:- 2 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    index_map = {}  # value -> index\n\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in index_map:\n            i, j = index_map[complement], idx\n            if i > j:\n                i, j = j, i\n            print(i, j)\n            return\n        index_map[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being equal. If the array is empty, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray where all elements are equal.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_equal_run(nums):\n    if not nums:\n        return 0\n    max_len = 1\n    curr_len = 1\n    prev = nums[0]\n    for num in nums[1:]:\n        if num == prev:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n            prev = num\n    max_len = max(max_len, curr_len)\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        print(0)\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n])) if n > 0 else []\n    print(longest_equal_run(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer N, find the smallest integer X greater than N such that the sum of the digits of X is strictly greater than the sum of the digits of N. If there are multiple such X, output the smallest one.Input:A single line containing the integer N (1 ≤ N ≤ 10^6).Output:A single integer representing the smallest X > N with the required property.Constraints:1 ≤ N ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef digit_sum(num: int) -> int:\n    \"\"\"Return the sum of the digits of num.\"\"\"\n    return sum(int(ch) for ch in str(num))\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    target_sum = digit_sum(n)\n    x = n + 1\n    while digit_sum(x) <= target_sum:\n        x += 1\n    print(x)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of distinct pairs (i, j) where i < j and nums[i] + nums[j] is divisible by k.Input:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^4), the length of the array and the divisor.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:- Output a single integer: the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Special-case k == 1 : every pair works\n    if k == 1:\n        total_pairs = n * (n - 1) // 2\n        print(total_pairs)\n        return\n\n    # Count occurrences of every remainder modulo k\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    answer = 0\n\n    # Remainder 0 pairs with itself\n    answer += freq[0] * (freq[0] - 1) // 2\n\n    # If k is even, remainder k/2 pairs with itself\n    if k % 2 == 0:\n        r = k // 2\n        answer += freq[r] * (freq[r] - 1) // 2\n\n    # Pair complementary remainders r and k - r where r < k - r\n    for r in range(1, (k + 1) // 2):\n        answer += freq[r] * freq[k - r]\n\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. If there are multiple such subarrays, output the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}        # value -> its most recent index\n    start = 0            # left edge of current window\n    best = 0             # length of longest unique window found\n\n    for i, val in enumerate(nums):\n        # If the value has appeared in the current window,\n        # move the start just after its previous appearance.\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray with all elements distinct. If no such subarray exists, output 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> latest index\n    left = 0               # left border of current window\n    best = 0               # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window -> shrink from the left\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    # If n == 0 best stays 0, satisfying \"no such subarray\" case.\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S can become a palindrome by removing at most one character. A palindrome is a string that reads the same forward and backward. Return \"YES\" if it is possible, or \"NO\" otherwise.Input:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.Each of the next T lines contains a string S (1 ≤ |S| ≤ 10^5).Output:For each test case, output \"YES\" or \"NO\" on a separate line.Constraints:1 ≤ T ≤ 1001 ≤ |S| ≤ 10^5The sum of |S| over all test cases does not exceed 10^6.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome(s: str, l: int, r: int) -> bool:\n    \"\"\"Check if the substring s[l:r+1] is a palindrome.\"\"\"\n    while l < r:\n        if s[l] != s[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\n\ndef can_be_palindrome(s: str) -> bool:\n    \"\"\"Return True if s can become a palindrome after removing ≤ 1 character.\"\"\"\n    l, r = 0, len(s) - 1\n    while l < r and s[l] == s[r]:\n        l += 1\n        r -= 1\n\n    if l >= r:                       # already a palindrome\n        return True\n\n    # Try skipping either the left or the right mismatching character\n    return is_palindrome(s, l + 1, r) or is_palindrome(s, l, r - 1)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    for i in range(1, t + 1):\n        s = data[i].strip()\n        out_lines.append(\"YES\" if can_be_palindrome(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray with sum exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we haven't seen this prefix sum before, store its index\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > max_len:\n                max_len = length\n\n    return max_len\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. A pair is considered unique if the indices (i, j) are different. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer representing the number of unique pairs whose sum is even.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 elements from k elements: k * (k - 1) // 2\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 items from k items: k * (k - 1) // 2\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the minimum number of operations required to make all elements equal. In a single operation, you can select any element and increment or decrement it by 1. Output the minimum number of operations needed.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers A1, A2, ..., AN (−10^9 ≤ Ai ≤ 10^9).Output Format:Output a single integer: the minimum number of operations required.Constraints:1 ≤ N ≤ 10^5−10^9 ≤ Ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Find median\n    arr.sort()\n    median = arr[n // 2]          # works for both even and odd n (any median works)\n    \n    # Compute total operations\n    operations = sum(abs(x - median) for x in arr)\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, nums, find the length of the longest contiguous subarray where the difference between the maximum and minimum element is at most 1. If there are multiple such subarrays, return the length of the longest one.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers, nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the length of the longest contiguous subarray where the difference between the maximum and minimum element is at most 1.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray whose max – min ≤ 1.\n    Sliding-window with two monotone deques keeps O(1) time per element.\n    \"\"\"\n    min_dq = deque()   # indices of an increasing sequence (front is current min)\n    max_dq = deque()   # indices of a decreasing sequence (front is current max)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain max deque\n        while max_dq and val > nums[max_dq[-1]]:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain min deque\n        while min_dq and val < nums[min_dq[-1]]:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])          # number of elements (not explicitly needed)\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is at most k. If there are multiple such subarrays with the maximum length, output any one of their lengths. Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Print a single integer, the length of the longest contiguous subarray whose sum is at most k.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^91 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    left = 0\n    current_sum = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        current_sum += value\n\n        # Shrink window from the left while the sum exceeds k\n        while left <= right and current_sum > k:\n            current_sum -= nums[left]\n            left += 1\n\n        # Update longest valid window length\n        if current_sum <= k:\n            best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the total number of continuous subarrays whose sum is exactly k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9), where n is the length of the array.- The second line contains n integers nums[0], nums[1], ..., nums[n-1] (|nums[i]| ≤ 10^4).Output Format:- Output a single integer: the total number of continuous subarrays whose sum equals k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_sum = 0\n    subarray_count = 0\n    freq = defaultdict(int)\n    freq[0] = 1                       # empty prefix\n\n    for num in nums:\n        prefix_sum += num\n        subarray_count += freq[prefix_sum - k]\n        freq[prefix_sum] += 1\n\n    print(subarray_count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer representing the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    for num in nums:\n        if num & 1 == 0:       # faster parity check than num % 2 == 0\n            even_count += 1\n\n    odd_count = n - even_count\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer, the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Map prefix_sum -> earliest index where this sum occurred\n    earliest = {0: -1}\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we've seen prefix_sum - k before, subarray (earliest_idx + 1 .. i) sums to k\n        target = prefix_sum - k\n        if target in earliest:\n            max_len = max(max_len, i - earliest[target])\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in earliest:\n            earliest[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Output a single integer representing the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, subarray (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_first_index:\n            length = i - prefix_first_index[target]\n            if length > max_len:\n                max_len = length\n\n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_first_index:\n            prefix_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:- Print a single integer: the length of the longest subarray with sum exactly k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_first_idx = {}       # prefix_sum -> earliest index where it occurs\n    current_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        current_sum += val\n\n        # Case 1: subarray from 0..i sums to k\n        if current_sum == k:\n            best_len = max(best_len, i + 1)\n\n        # Case 2: subarray ending at i sums to k\n        needed = current_sum - k\n        if needed in prefix_first_idx:\n            best_len = max(best_len, i - prefix_first_idx[needed])\n\n        # Record earliest occurrence of this prefix sum\n        if current_sum not in prefix_first_idx:\n            prefix_first_idx[current_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of only lowercase English letters, return the length of the longest substring without repeating characters.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.- The second line contains the string s of length n.Output Format:- Output a single integer, the length of the longest substring without repeating characters.Constraints:- 1 ≤ n ≤ 10^5- s consists of only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window technique that keeps the last index at which every\n    character has appeared. For lowercase English letters we can use\n    a fixed-size array of 26 elements instead of a dictionary.\n    \"\"\"\n    last_seen = [-1] * 26         # last_seen[char] -> last index where char occurred\n    max_len = 0\n    left = 0                      # left bound of current window (inclusive)\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97        # map 'a'..'z' to 0..25\n        if last_seen[idx] >= left:\n            # char already in current window, move left just after its last position\n            left = last_seen[idx] + 1\n        last_seen[idx] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line is n, second is the string\n    # We don't actually need n after reading the string\n    s = data[1] if len(data) > 1 else \"\"\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find and return the length of the longest substring that contains no repeating characters.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S.The second line contains the string S of length n.Output:Print a single integer representing the length of the longest substring without repeating characters.Constraints:1 ≤ n ≤ 10^5S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    # Array to store the last index at which each letter appeared\n    # We use -1 to indicate that the character has not appeared yet\n    last_pos = [-1] * 26  # only lowercase letters\n    left = 0              # left bound of current window\n    best = 0              # length of the best window found\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97  # map 'a'..'z' to 0..25\n        # If this character was seen inside the current window,\n        # move the left bound just after its last occurrence\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        # Update last position of current character\n        last_pos[idx] = right\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())          # length of the string (can be ignored for logic)\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Just in case the provided n is inconsistent, rely on actual string length\n    result = longest_unique_substring(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n space-separated integers nums[i] (|nums[i]| ≤ 10^4).Output Format:Output a single integer representing the length of the longest contiguous subarray with sum k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Map: prefix_sum -> earliest index where this sum occurs\n    prefix_index = {0: -1}      # sum 0 occurs before array starts\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there exists a previous prefix with value (current_sum - k),\n        # the subarray between that index+1 and current index sums to k\n        target = prefix_sum - k\n        if target in prefix_index:\n            max_len = max(max_len, i - prefix_index[target])\n\n        # Only store the first occurrence to maximize subarray length\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 <= i < j < n and nums[i] + nums[j] is divisible by k, where k is a given positive integer.  Input Format:  The first line contains two integers n and k (1 <= n <= 10^4, 1 <= k <= 100).  The second line contains n integers nums[i] (1 <= nums[i] <= 10^4) separated by spaces.  Output Format:  Print a single integer: the number of valid pairs.  Constraints:  - 1 <= n <= 10^4  - 1 <= k <= 100  - 1 <= nums[i] <= 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Count occurrences of each remainder\n    rem_count = [0] * k\n    for num in nums:\n        rem_count[num % k] += 1\n    \n    pairs = 0\n    \n    # Remainder 0 pairs with itself\n    c0 = rem_count[0]\n    pairs += c0 * (c0 - 1) // 2\n    \n    # Handle remaining remainders\n    for r in range(1, (k + 1) // 2):\n        pairs += rem_count[r] * rem_count[k - r]\n    \n    # If k is even, the remainder k/2 pairs within itself\n    if k % 2 == 0:\n        c = rem_count[k // 2]\n        pairs += c * (c - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the minimum possible value of the largest element in nums after performing at most k operations. In each operation, you can select any element in nums and decrease its value by 1 (to a minimum of 0). Output the minimum possible value of the largest element after at most k operations.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer — the minimum possible value of the largest element after at most k operations.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_largest_after_k_ops(nums, k):\n    \"\"\"\n    Returns the minimum possible largest value of the array `nums`\n    after performing at most `k` decrements (each decrement lowers an\n    element by exactly 1 but not below 0).\n    \"\"\"\n    # Quick shortcut: if we can zero the entire array\n    total_sum = sum(nums)\n    if total_sum <= k:\n        return 0\n\n    lo, hi = 0, max(nums)\n\n    # Helper: how many decrements are required to bring every element\n    # down to `target`\n    def needed(target):\n        required = 0\n        for x in nums:\n            if x > target:\n                required += x - target\n                if required > k:          # early exit (pruning)\n                    break\n        return required\n\n    # Binary search for minimal feasible `mid`\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if needed(mid) <= k:\n            hi = mid\n        else:\n            lo = mid + 1\n\n    return lo\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = min_largest_after_k_ops(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is exactly equal to K. If there is no such subarray, output 0.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (-10^4 ≤ Ai ≤ 10^4).Output:Output a single integer, the length of the longest contiguous subarray with sum exactly K.Constraints:1 ≤ N ≤ 10^5-10^9 ≤ K ≤ 10^9-10^4 ≤ Ai ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    N = int(data[0])\n    K = int(data[1])\n    arr = list(map(int, data[2:2 + N]))  # assumes exactly N numbers follow\n\n    prefix_to_first_idx = {0: -1}   # prefix sum -> earliest index where it occurs\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If prefix_sum - K has been seen, update max_len\n        target = prefix_sum - K\n        if target in prefix_to_first_idx:\n            length = i - prefix_to_first_idx[target]\n            if length > max_len:\n                max_len = length\n\n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Output a single integer, the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_len(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray whose sum equals k.\n    \"\"\"\n    prefix_index = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there is a prefix_sum - k seen before, subarray (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_index:\n            best_len = max(best_len, i - prefix_index[target])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_len(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that does not appear in nums. In other words, find the minimum positive integer x such that x is not in nums. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer — the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    present = set(nums)                 # store all numbers that appear\n    for x in range(1, n + 2):           # only need to check up to n + 1\n        if x not in present:\n            print(x)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k.  Input Format:  The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).  Output Format:  Print a single integer representing the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_limit(nums, k):\n    max_d = deque()      # Decreasing deque for current window maximums’ indices\n    min_d = deque()      # Increasing deque for current window minimums’ indices\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # Maintain decreasing deque for max\n        while max_d and nums[max_d[-1]] < value:\n            max_d.pop()\n        max_d.append(right)\n\n        # Maintain increasing deque for min\n        while min_d and nums[min_d[-1]] > value:\n            min_d.pop()\n        min_d.append(right)\n\n        # Shrink window until it satisfies the condition\n        while nums[max_d[0]] - nums[min_d[0]] > k:\n            if max_d[0] == left:\n                max_d.popleft()\n            if min_d[0] == left:\n                min_d.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_limit(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is strictly less than a given integer k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum less than k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    left = 0           # left end of the sliding window\n    window_sum = 0     # sum of current window\n    best = 0           # best (maximum) length found\n    \n    for right, val in enumerate(nums):\n        window_sum += val\n        # shrink window from the left until the sum is strictly < k\n        while left <= right and window_sum >= k:\n            window_sum -= nums[left]\n            left += 1\n        # now window_sum < k -> update answer\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer representing the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    even = 0\n    odd = 0\n\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens plus number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers. Return the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray containing at most two distinct numbers.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    count = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        count[value] += 1\n\n        # shrink window if we have more than two distinct numbers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_two(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find two distinct indices i and j such that nums[i] + nums[j] = target. Return the indices as a pair (i, j) in increasing order (i < j). If there are multiple possible answers, return any one of them. If no such pair exists, output -1 -1.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print two integers i and j (0 ≤ i < j < n) such that nums[i] + nums[j] = target. If no such pair exists, print -1 -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, target = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Dictionary to store value -> index of the first occurrence\n    seen = {}\n\n    for j, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            i = seen[complement]\n            # guarantee i < j\n            print(i, j)\n            return\n        # only keep the first index of each number to satisfy i < j automatically\n        if num not in seen:\n            seen[num] = j\n\n    # If we get here, no pair exists\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the number of distinct pairs where the sum is even.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    cnt_even = cnt_odd = 0\n    for num in nums:\n        if num & 1:\n            cnt_odd += 1\n        else:\n            cnt_even += 1\n\n    # Number of ways to choose 2 evens + 2 odds\n    ans = cnt_even * (cnt_even - 1) // 2 + cnt_odd * (cnt_odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of ways to pick 2 evens + 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"good\" if the sum of its elements is divisible by a given integer k. Your task is to find the total number of good subarrays in nums.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the number of good subarrays.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    \n    # Frequency of each prefix sum modulo k\n    freq = [0] * k\n    freq[0] = 1          # Empty prefix\n    \n    prefix = 0\n    good_subarrays = 0\n    \n    for _ in range(n):\n        num = int(next(it))\n        prefix = (prefix + num) % k\n        # Ensure non-negative modulo\n        prefix = prefix if prefix >= 0 else prefix + k\n        good_subarrays += freq[prefix]\n        freq[prefix] += 1\n    \n    print(good_subarrays)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    even_count = 0\n    odd_count = 0\n    \n    for x in nums:\n        if x & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    \n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers. Your task is to determine whether there exists a pair of distinct elements in the list whose sum is exactly equal to a given integer K.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (-10^9 ≤ Ai ≤ 10^9).Output Format:Print \"YES\" if such a pair exists, otherwise print \"NO\".Constraints:1 ≤ N ≤ 10^5-10^9 ≤ K ≤ 10^9-10^9 ≤ Ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    N = int(data[0])\n    K = int(data[1])\n\n    nums = map(int, data[2:2 + N])  # slice protects against extra whitespace/newlines\n    seen = set()\n\n    for num in nums:\n        if K - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is even. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:      # odd\n            odd_count += 1\n        else:            # even\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_pos = dict()           # stores the last index at which each value appeared\n    max_len = 0\n    left = 0                    # left border of the current window\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate detected inside the current window -> move left past the previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray such that the absolute difference between any two elements in this subarray is at most 1. Return the length of the longest such subarray.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the length of the longest valid contiguous subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Double-ended queues to keep current window minimum and maximum\n    min_dq = deque()   # monotonically increasing\n    max_dq = deque()   # monotonically decreasing\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques for new element\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # shrink window until condition satisfied\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all unique elements (no repeated values). Return the length of this subarray.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = {}           # value -> most recent index\n    left = 0                # start index of current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If value seen in current window, move left pointer\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:n + 1]        # ensure we take exactly n numbers\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If all elements are the same, return 1.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer, the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_index = {}          # stores the most recent index of each number\n    left = 0                 # left pointer of the current window\n    best = 0                 # length of the best (longest) window found\n\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            # value is repeated inside the current window -> move left pointer\n            left = last_index[value] + 1\n        last_index[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))   # ensure only n numbers taken\n    result = longest_distinct_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is exactly equal to K. If there is no such subarray, output 0.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_to_first_idx = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for idx, value in enumerate(arr):\n        prefix_sum += value\n\n        # If we have seen prefix_sum - K before, a subarray summing to K ends here\n        need = prefix_sum - K\n        if need in prefix_to_first_idx:\n            length = idx - prefix_to_first_idx[need]\n            if length > best_len:\n                best_len = length\n\n        # Store first occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = idx\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. That is, no two elements in the subarray are the same. If there are multiple such subarrays, output the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = {}\n    start = 0\n    best = 0\n    for i, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= start:\n            # Duplicate found inside current window; move start past its last occurrence\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_unique_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"good\" if the sum of its elements is an even number. Your task is to count the number of \"good\" subarrays in nums.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer: the total number of good subarrays.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # cnt[0] -> how many prefix sums have even parity\n    # cnt[1] -> how many prefix sums have odd  parity\n    cnt = [1, 0]        # prefix sum before any element is 0 (even)\n    parity = 0          # current prefix parity (0 = even, 1 = odd)\n\n    for x in nums:\n        parity ^= (x & 1)   # update parity with current element's parity\n        cnt[parity] += 1\n\n    # number of ways to choose 2 equal-parity prefixes gives count of even-sum subarrays\n    res = cnt[0] * (cnt[0] - 1) // 2 + cnt[1] * (cnt[1] - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray whose sum is k. If there is no such subarray, print 0.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_first_index = {0: -1}      # prefix_sum -> first index where it appears\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current_prefix_sum - k) was seen before, a subarray summing to k ends here\n        need = prefix_sum - k\n        if need in prefix_first_index:\n            length = i - prefix_first_index[need]\n            if length > max_len:\n                max_len = length\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_first_index:\n            prefix_first_index[prefix_sum] = i\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements (no repeated values). If multiple such subarrays exist, return the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = dict()        # value -> latest index seen\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate inside current window; move left boundary\n            left = last_pos[value] + 1\n        last_pos[value] = right               # update latest position\n        best = max(best, right - left + 1)    # update answer\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string S.The second line contains the string S of length n.Output:Output a single integer — the length of the longest substring without repeating characters.Constraints:1 ≤ n ≤ 10^5S consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window approach that keeps the window [l, r)\n    free of duplicates using a dictionary that stores the\n    last position (+1) each character was seen.\n    \"\"\"\n    last_pos = [-1] * 26          # only lowercase English letters\n    best = 0\n    left = 0                      # left border (inclusive)\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97\n        # If character already seen inside current window,\n        # move left just past its previous occurrence.\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line: n, second line: string\n    # We ignore n because the string's length can be inferred\n    if len(data) == 1:\n        # in case input is given on one line \"n s\"\n        parts = data[0].split()\n        if len(parts) == 2:\n            s = parts[1]\n        else:\n            s = \"\"\n    else:\n        s = data[1].rstrip('\\n')\n\n    ans = longest_unique_substring_length(s)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums consisting of n elements, determine whether it is possible to rearrange the array such that no two adjacent elements are equal. If possible, output \"YES\", otherwise output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output \"YES\" if such a rearrangement exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Frequency of each number\n    freq = Counter(nums)\n    max_freq = max(freq.values())\n\n    # A rearrangement without equal neighbours exists\n    # iff the most frequent element doesn't exceed ceil(n/2)\n    if max_freq <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any element by 1. Return the minimum number of moves needed.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the minimum number of moves required.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Sort to find median\n    nums.sort()\n    median = nums[n // 2]  # Works for both even and odd n\n    \n    # Compute total moves\n    moves = sum(abs(x - median) for x in nums)\n    \n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray that contains at most two distinct integers.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer - the length of the longest contiguous subarray with at most two distinct integers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    count = defaultdict(int)\n    left = 0\n    max_len = 0\n    \n    for right, val in enumerate(nums):\n        count[val] += 1\n        \n        # Shrink window if more than two distinct integers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n        \n        # Update maximum length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n            \n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_subarray_at_most_two(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine the minimum number of elements you need to remove from the array so that the remaining array is strictly increasing (each element is greater than the previous one). Output the minimum number of elements to remove.Input Format:The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer: the minimum number of elements to remove so that the remaining array is strictly increasing.Constraints:1 ≤ n ≤ 1000-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns the length of the Longest Strictly Increasing Subsequence (LIS)\n    in the given list `arr` using an O(n log n) algorithm.\n    \"\"\"\n    tails = []                       # tails[i] = smallest tail of an IS of length i+1\n    for num in arr:\n        idx = bisect.bisect_left(tails, num)  # first position >= num\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Length of the longest strictly increasing subsequence\n    lis_len = lis_length(nums)\n    \n    # Minimum removals = total elements - LIS length\n    print(n - lis_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is equal to a given integer k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) for 0 ≤ i < n.Output:Print a single integer, the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # If we have seen a prefix such that current_prefix - k = that_prefix\n        needed = prefix_sum - k\n        if needed in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[needed])\n        \n        # Store the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest subarray where the sum of its elements is divisible by k. A subarray is a contiguous part of the array. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the length of the longest subarray with sum divisible by k.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^4−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_divisible_subarray(nums, k):\n    # Dictionary to store the first index at which each remainder is seen.\n    # Initialize with remainder 0 at index -1 to handle prefixes divisible by k.\n    first_index = {0: -1}\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        remainder = prefix_sum % k   # Python gives non-negative remainder automatically.\n\n        if remainder in first_index:\n            # Current subarray (first_index[rem] + 1 .. i) is divisible by k\n            max_len = max(max_len, i - first_index[remainder])\n        else:\n            # Store only the first occurrence to maximize subarray length\n            first_index[remainder] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    result = longest_divisible_subarray(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    min_q = deque()        # monotonically increasing values (window minima at front)\n    max_q = deque()        # monotonically decreasing values (window maxima at front)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # add current value, keeping deques monotonic\n        while min_q and val < min_q[-1]:\n            min_q.pop()\n        min_q.append(val)\n\n        while max_q and val > max_q[-1]:\n            max_q.pop()\n        max_q.append(val)\n\n        # shrink window from the left until valid\n        while max_q[0] - min_q[0] > 1:\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers, representing the elements of nums (|nums[i]| ≤ 10^9).Output Format:Output a single integer, the number of unique pairs (i, j) with i < j where nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if it is a palindrome (the string reads the same forwards and backwards). Output \"YES\" if it is a palindrome, otherwise output \"NO\".Input:The first line contains a single string S (1 ≤ |S| ≤ 1000), consisting only of lowercase English letters.Output:Output \"YES\" if S is a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if s == s[::-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers.  Input:  The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.  Output:  Print a single integer — the length of the longest contiguous subarray containing at most two distinct numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    counts = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        counts[val] += 1\n\n        # Shrink window until we have at most two distinct numbers\n        while len(counts) > 2:\n            counts[nums[left]] -= 1\n            if counts[nums[left]] == 0:\n                del counts[nums[left]]\n            left += 1\n\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_subarray_two_distinct(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with strictly increasing elements. A subarray is a sequence of consecutive elements from the array.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers: nums_1, nums_2, ..., nums_n (1 ≤ nums_i ≤ 10^9).Output:Output a single integer, the length of the longest strictly increasing contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    max_len = curr_len = 1  # At least one element exists\n    for i in range(1, n):\n        if nums[i] > nums[i-1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the difference between the maximum and minimum elements does not exceed a given integer limit. The subarray must contain at least one element.Input Format:- The first line contains two integers n and limit (1 ≤ n ≤ 10^5, 1 ≤ limit ≤ 10^9).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9- 1 ≤ limit ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    limit = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    max_deque = deque()      # stores elements in non-increasing order\n    min_deque = deque()      # stores elements in non-decreasing order\n\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # update deques with the new value\n        while max_deque and value > max_deque[-1]:\n            max_deque.pop()\n        max_deque.append(value)\n\n        while min_deque and value < min_deque[-1]:\n            min_deque.pop()\n        min_deque.append(value)\n\n        # shrink window from the left until it satisfies the constraint\n        while max_deque[0] - min_deque[0] > limit:\n            if nums[left] == max_deque[0]:\n                max_deque.popleft()\n            if nums[left] == min_deque[0]:\n                min_deque.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer, the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}          # value -> last index seen\n    best = 0               # best window length found so far\n    left = 0               # left boundary of current window\n\n    for right, value in enumerate(nums):\n        # if value already seen inside current window, move left pointer\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray where the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).  The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:Output a single integer — the length of the longest subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5  -10^9 ≤ k ≤ 10^9  -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Map: prefix_sum -> earliest index where it occurs\n    first_occurrence = {0: -1}      # sum 0 occurs before array starts\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current_sum - k) has been seen, subarray (first_occurrence+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in first_occurrence:\n            best_len = max(best_len, i - first_occurrence[target])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine if there exists a pair of distinct indices (i, j) such that nums[i] + nums[j] equals a given target value k. If such a pair exists, print \"YES\". Otherwise, print \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[0], nums[1], ..., nums[n-1] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exists a pair of indices (i, j) with i ≠ j such that nums[i] + nums[j] = k. Otherwise, print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                     # no input\n    \n    it = map(int, data)\n    n = next(it)                   # length of the array\n    k = next(it)                   # target sum\n    \n    seen = set()                   # stores numbers we've already processed\n    \n    for _ in range(n):\n        x = next(it)\n        if (k - x) in seen:        # complement found\n            sys.stdout.write(\"YES\")\n            return\n        seen.add(x)\n    \n    sys.stdout.write(\"NO\")         # no suitable pair found\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine the length of the longest contiguous subarray where the sum of its elements is exactly K. If there are multiple subarrays with this sum, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).Output Format:Output a single integer, the length of the longest contiguous subarray with sum exactly K.Constraints:1 ≤ N ≤ 10^5|K| ≤ 10^9-10^4 ≤ A_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_sum = 0\n    earliest_index = {0: -1}        # prefix_sum value -> earliest position\n    longest = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If a previous prefix with value prefix_sum - K exists,\n        # the subarray between that position + 1 and i sums to K\n        needed = prefix_sum - K\n        if needed in earliest_index:\n            length = i - earliest_index[needed]\n            if length > longest:\n                longest = length\n\n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in earliest_index:\n            earliest_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any non-empty subarray where you are allowed to remove at most one element from that subarray (the removed element does not contribute to the sum). The subarray must remain non-empty after the removal. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer, the maximum sum achievable as described above.Constraints:- 1 ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_one_deletion(nums):\n    n = len(nums)\n    if n == 1:\n        # Cannot delete the only element (subarray must stay non-empty)\n        return nums[0]\n\n    # forward[i] = maximum subarray sum ending exactly at i (no deletions)\n    forward = [0] * n\n    forward[0] = nums[0]\n    for i in range(1, n):\n        forward[i] = max(nums[i], forward[i - 1] + nums[i])\n\n    # backward[i] = maximum subarray sum starting exactly at i (no deletions)\n    backward = [0] * n\n    backward[-1] = nums[-1]\n    for i in range(n - 2, -1, -1):\n        backward[i] = max(nums[i], backward[i + 1] + nums[i])\n\n    # Start with the best subarray that uses NO deletions\n    best = max(forward)\n\n    # Try deleting each element once and join the best left and right parts\n    for i in range(n):\n        if i == 0:\n            # delete the first element → take best starting at index 1\n            best = max(best, backward[1])\n        elif i == n - 1:\n            # delete the last element → take best ending at index n-2\n            best = max(best, forward[n - 2])\n        else:\n            # delete nums[i] → concatenate left part ending at i-1 with right part starting at i+1\n            best = max(best, forward[i - 1] + backward[i + 1])\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = max_subarray_sum_one_deletion(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements unique (no duplicates). If there are multiple such subarrays, return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    seen = dict()               # maps value -> latest index\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    whose elements sum exactly to k.\n    \"\"\"\n    prefix_to_first_index = {0: -1}      # prefix_sum -> leftmost index\n    max_len = 0\n    prefix_sum = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # Is there a prefix that leaves k for the current subarray?\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[need])\n\n        # Record the first time we see this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers `nums` of length `n`. Your task is to find the length of the longest subarray (contiguous elements) whose sum is divisible by a given integer `k`.Input:The first line contains two integers `n` and `k` (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains `n` integers `nums[i]` (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the length of the longest subarray whose sum is divisible by `k`.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    prefix = 0\n    first_pos = {0: -1}          # remainder -> first index where it appeared\n    best = 0\n\n    for i in range(n):\n        prefix += nums[i]\n        rem = prefix % k         # Python’s % already returns non-negative for positive k\n\n        if rem not in first_pos:\n            first_pos[rem] = i   # remember earliest occurrence only\n        else:\n            best = max(best, i - first_pos[rem])\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered distinct if they have different indices.  Input:  The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.  Output:  Output a single integer — the number of distinct pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for x in nums:\n        if x & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # number of pairs from k elements = k*(k-1)//2\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If no such subarray exists, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum equals k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Dictionary to remember the first index at which each prefix sum is seen.\n    first_occurrence = {0: -1}          # prefix sum 0 occurs before the array starts\n    prefix = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix += val\n\n        # If we have seen prefix - k before, there is a subarray summing to k\n        target = prefix - k\n        if target in first_occurrence:\n            best_len = max(best_len, i - first_occurrence[target])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix not in first_occurrence:\n            first_occurrence[prefix] = i\n\n    print(best_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements. A subarray is a sequence of consecutive elements from the array. If there are multiple answers, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_index = {}              # value -> most recent position\n    start = 0                    # left border of the current window\n    best = 0\n\n    for i, v in enumerate(nums):\n        if v in last_index and last_index[v] >= start:\n            # duplicate inside the window -> shrink from the left\n            start = last_index[v] + 1\n        last_index[v] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is less than or equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Helper that tells whether there exists a sub-array of length L\n    # whose sum is <= k\n    def feasible(L: int) -> bool:\n        curr = sum(nums[:L])\n        if curr <= k:\n            return True\n        for i in range(L, n):\n            curr += nums[i] - nums[i - L]\n            if curr <= k:\n                return True\n        return False\n\n    lo, hi, ans = 1, n, 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if feasible(mid):\n            ans = mid\n            lo = mid + 1     # try to find a longer one\n        else:\n            hi = mid - 1     # need shorter length\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the number of such pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])               # length of array (can be ignored afterwards)\n    numbers = map(int, data[1:])   # iterator over the array elements\n    \n    even_count = odd_count = 0\n    for num in numbers:\n        if num & 1:                # odd number\n            odd_count += 1\n        else:                      # even number\n            even_count += 1\n    \n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray where the absolute difference between any two elements is at most 1. A subarray is a contiguous non-empty part of the array.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the maximum length of a subarray that satisfies the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_diff_at_most_one(nums):\n    min_dq = deque()   # increasing deque – front is current minimum\n    max_dq = deque()   # decreasing deque – front is current maximum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # insert into min deque\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # insert into max deque\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # shrink window until condition satisfied\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_with_diff_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. Assume that each input will have exactly one solution, and you may not use the same element twice. Output the indices as a space-separated pair in increasing order.Input:The first line contains two integers n (the length of nums) and target.The second line contains n integers representing nums.Output:Print two integers, the indices (0-based) of the two numbers that add up to target, separated by a space, in increasing order.Constraints:2 ≤ n ≤ 10^4-10^9 ≤ nums[i] ≤ 10^9-10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            i, j = seen[complement], idx\n            if i > j:\n                i, j = j, i\n            print(i, j)\n            return\n        seen[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, determine whether there exists a pair of distinct indices i and j such that nums[i] + nums[j] equals a given target value k. If such a pair exists, print \"YES\"; otherwise, print \"NO\".Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (-10^9 ≤ k ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print \"YES\" if there is a pair of distinct indices with the required sum, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains only even numbers. If no even numbers exist, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the length of the longest contiguous subarray consisting entirely of even numbers.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    max_len = curr = 0\n    for num in nums:\n        if num % 2 == 0:\n            curr += 1\n            if curr > max_len:\n                max_len = curr\n        else:\n            curr = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Two pairs (i, j) and (j, i) are considered the same and should only be counted once. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    even = odd = 0\n    for val in nums:\n        if val & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # pairs formed by two evens + pairs formed by two odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a continuous part of the array. Return the length of the longest subarray where every element is unique.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^6), separated by spaces.Output:Output a single integer—the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}              # element -> last index seen\n    left = 0                   # left bound of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1         # shrink window past duplicate\n        last_pos[val] = right                # update last position\n        best = max(best, right - left + 1)   # update answer\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray where the sum of its elements is even. A subarray is a contiguous part of the array. If there are multiple subarrays with the same maximal length, return the length only.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # earliest and latest positions of each prefix-sum parity\n    earliest = [-1, -1]\n    latest   = [-1, -1]\n\n    prefix_parity = 0          # sum of zero elements -> even\n    earliest[0] = latest[0] = 0\n\n    for idx, val in enumerate(nums, 1):   # prefix length goes from 1 … n\n        prefix_parity = (prefix_parity + (val & 1)) & 1   # keep only parity bit\n        if earliest[prefix_parity] == -1:\n            earliest[prefix_parity] = idx\n        latest[prefix_parity] = idx\n\n    ans = 0\n    for p in (0, 1):\n        if earliest[p] != -1:                 # parity appeared at least once\n            ans = max(ans, latest[p] - earliest[p])\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string s.  The second line contains the string s of length n.Output:Output a single integer: the length of the longest substring without repeating characters.Constraints:1 ≤ n ≤ 10^5  s consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.read().split()\n    if not data:\n        return\n\n    n = int(data[0])                   # length of the string (can be ignored in logic)\n    s = data[1] if len(data) > 1 else \"\"\n\n    # Array to store last index of each character; -1 denotes not seen yet.\n    last_index = [-1] * 26             # since only lowercase English letters\n    start = 0                          # left boundary of current window\n    best = 0                           # best (maximum) length found\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97             # map 'a'..'z' to 0..25\n\n        # If character was seen inside current window, move start right after it\n        if last_index[idx] >= start:\n            start = last_index[idx] + 1\n\n        last_index[idx] = i            # update last seen index\n        best = max(best, i - start + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the difference between the maximum and minimum elements in the subarray is at most k. Return this maximum length.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer representing the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^91 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    max_deque = deque()   # stores indices, nums[idx] in non-increasing order\n    min_deque = deque()   # stores indices, nums[idx] in non-decreasing order\n\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # update max deque\n        while max_deque and nums[max_deque[-1]] < value:\n            max_deque.pop()\n        max_deque.append(right)\n\n        # update min deque\n        while min_deque and nums[min_deque[-1]] > value:\n            min_deque.pop()\n        min_deque.append(right)\n\n        # shrink window until it satisfies the condition\n        while nums[max_deque[0]] - nums[min_deque[0]] > k:\n            left += 1\n            if max_deque[0] < left:\n                max_deque.popleft()\n            if min_deque[0] < left:\n                min_deque.popleft()\n\n        # record the best window length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers. Return this length.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer, the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    counts = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        counts[value] += 1\n\n        while len(counts) > 2:                 # shrink window until it has ≤ 2 distinct numbers\n            left_value = nums[left]\n            counts[left_value] -= 1\n            if counts[left_value] == 0:\n                del counts[left_value]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:        # no input\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_subarray_at_most_two(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] == target. If such a pair exists, output \"YES\"; otherwise, output \"NO\".Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (-10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" if there exist two distinct indices i and j (i ≠ j) such that nums[i] + nums[j] == target. Otherwise, output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for x in nums:\n        if target - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of pairs (i, j) with i < j such that nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. If there are multiple such subarrays with the same length, return the length only.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Print a single integer, the length of the longest contiguous subarray containing only unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}              # value -> last index it was seen at\n    left = 0                   # left boundary of the sliding window\n    best = 0                   # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate found inside current window, shrink the window\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # Case 1: subarray from 0 .. i sums to k\n        if prefix_sum - k in prefix_to_first_index:\n            length = i - prefix_to_first_index[prefix_sum - k]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the smallest positive integer that cannot be represented as the sum of elements from any subset of the array (each element can be used at most once). Output this smallest integer.Input:The first line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the array.The second line contains N space-separated positive integers A_i (1 ≤ A_i ≤ 10^9).Output:Print a single integer: the smallest positive integer that cannot be represented as the sum of a subset of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_unrepresentable(nums):\n    \"\"\"\n    Given a list of positive integers, returns the smallest positive integer\n    that cannot be represented as the sum of elements of any subset.\n    \"\"\"\n    nums.sort()\n    # `reachable` is the smallest integer strictly greater than every\n    # subset‐sum we can currently form.\n    reachable = 1\n    for x in nums:\n        if x > reachable:\n            break\n        reachable += x\n    return reachable\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(smallest_unrepresentable(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are distinct if they have different values for i or j.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the number of pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    evens = odds = 0\n\n    # Count even and odd numbers\n    for num in map(int, data[1:1 + n]):\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Pairs with even sum: choose 2 evens or 2 odds\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, an element is called a \"peak\" if it is strictly greater than its immediate neighbors. The first and last elements of the array are considered to have only one neighbor. Find the number of peak elements in the array.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer — the number of peak elements in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef count_peaks(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1     # the sole element is considered a peak\n    peaks = 0\n    for i in range(n):\n        if i == 0:\n            if nums[i] > nums[i+1]:\n                peaks += 1\n        elif i == n-1:\n            if nums[i] > nums[i-1]:\n                peaks += 1\n        else:\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                peaks += 1\n    return peaks\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:  # no input\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(count_peaks(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is strictly less than a given integer k.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum strictly less than k.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^91 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                         # no input\n    \n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    left = 0\n    current_sum = 0\n    best = 0\n\n    # Sliding-window: all nums[i] are positive, so window sum\n    # only grows when we move the right edge and shrinks when\n    # we move the left edge. This guarantees O(n) total work.\n    for right in range(n):\n        current_sum += nums[right]\n\n        # Shrink from the left until sum becomes strictly < k\n        while left <= right and current_sum >= k:\n            current_sum -= nums[left]\n            left += 1\n\n        # Now sum < k, window length (right-left+1) is valid\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) — the elements of the array.Output:Output a single integer — the number of valid pairs (i, j) where the sum nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    even = sum(1 for x in nums if x & 1 == 0)\n    odd = n - even\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the length of the longest contiguous subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}                # num -> last index seen\n    start = 0                    # left boundary of current window\n    best = 0                     # best length found\n    \n    for i, num in enumerate(nums):\n        if num in last_pos and last_pos[num] >= start:\n            # Duplicate inside current window → shrink window\n            start = last_pos[num] + 1\n        last_pos[num] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, your task is to count the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the sum of the ith and jth elements is even. Output the total number of such pairs.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list.The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).Output:Print a single integer representing the number of pairs with even sums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    \"\"\"\n    Reads an integer n and a list of n integers from standard input,\n    then counts how many unordered index pairs (i, j), 1 ≤ i < j ≤ n,\n    have an even sum. A sum is even when both addends share the same\n    parity (both even or both odd).\n\n    The answer equals:\n        C(evens, 2) + C(odds, 2)\n    where C(x, 2) = x*(x-1)//2.\n    \"\"\"\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:   # odd\n            odd_count += 1\n        else:         # even\n            even_count += 1\n\n    def choose2(x: int) -> int:\n        return x * (x - 1) // 2\n\n    result = choose2(even_count) + choose2(odd_count)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the maximum sum of any contiguous subarray of nums. The subarray must have at least one element. Return the maximum sum.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers, where the i-th integer is nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer, the maximum sum of a contiguous subarray.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm to find maximum subarray sum.\n    \"\"\"\n    current = best = nums[0]\n    for x in nums[1:]:\n        current = x if x > current + x else current + x\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (|nums[i]| ≤ 10^9).Output Format:Output a single integer: the number of pairs with even sums.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting only of lowercase English letters, find the length of the longest substring with no repeating characters.Input Format:The first line contains a string S (1 ≤ |S| ≤ 10^5).Output Format:Print a single integer: the length of the longest substring of S with all unique characters.Constraints:- 1 ≤ |S| ≤ 10^5- S contains only lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n\n    last_pos = {}            # stores last seen index of each character\n    start = 0                # left boundary of the current window\n    best = 0                 # length of the best window found so far\n\n    for i, ch in enumerate(s):\n        # If the character was seen and is inside the current window, move `start`\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        # Update last seen position\n        last_pos[ch] = i\n        # Update best answer\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether there exists a non-empty subarray (contiguous elements) whose sum is exactly zero. If such a subarray exists, print \"Yes\", otherwise print \"No\".Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print \"Yes\" if there exists a non-empty subarray with sum zero. Otherwise, print \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    seen_prefix_sums = set()\n    prefix_sum = 0\n\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen_prefix_sums:\n            print(\"Yes\")\n            return\n        seen_prefix_sums.add(prefix_sum)\n\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two numbers sum to an even number if both are even or both are odd. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of valid pairs (i, j) such that i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n    \n    even_cnt = 0\n    odd_cnt = 0\n    \n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n    \n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) where 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer, the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find two distinct indices i and j such that nums[i] + nums[j] = target. Return the indices as a tuple (i, j) where i < j. If there are multiple valid pairs, return the pair with the smallest i. If no such pair exists, return (-1, -1).Input Format:- The first line contains two integers n (the length of the array) and target.- The second line contains n integers, the elements of nums.Output Format:- Output two integers i and j, the indices of the two numbers adding up to target, or -1 -1 if no solution exists.Constraints:- 2 ≤ n ≤ 10^4- -10^9 ≤ nums[i] ≤ 10^9- -10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:          # no input\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    first_pos = {}        # value -> earliest index\n\n    for i, num in enumerate(nums):\n        need = target - num\n        if need in first_pos:\n            print(first_pos[need], i)\n            return\n        # store the first (smallest) index at which `num` appears\n        if num not in first_pos:\n            first_pos[num] = i\n\n    # no pair found\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the number of valid pairs where the sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    for num in nums:\n        if num & 1 == 0:   # num % 2 == 0\n            even += 1\n    odd = n - even\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements being unique (no repeated numbers). If there are multiple such subarrays, output the length of any one of them.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    seen = set()\n    left = 0\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        # shrink the window until val becomes unique in it\n        while val in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(val)\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the absolute difference between any two elements in the subarray is at most 1.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the length of the longest contiguous subarray satisfying the condition.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Sliding–window over the array while keeping the current window’s\n    minimum and maximum with two monotone deques.\n    \"\"\"\n    max_dq = deque()   # decreasing → front is current maximum\n    min_dq = deque()   # increasing → front is current minimum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain max deque (decreasing)\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # Maintain min deque (increasing)\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # Shrink window until condition satisfied\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    if n == 0:\n        print(0)\n        return\n    # Safety in case fewer/more numbers supplied, slice exactly n\n    nums = nums[:n]\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there are multiple such subarrays, output the length of any one of them. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Output a single integer — the length of the longest contiguous subarray whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}      # prefix_sum : earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (prefix_sum - k) has been seen, subarray (prev_index+1 .. i) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = {}          # Stores the most recent index of each element\n    start = 0              # Left boundary of the current window\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= start:\n            # We found a duplicate inside the current window.\n            # Move `start` right past the previous occurrence of `val`.\n            start = last_pos[val] + 1\n\n        last_pos[val] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices.  Input Format:  The first line contains a single integer n (1 ≤ n ≤ 10^5).  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).  Output Format:  Print a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The next n integers are the array elements\n    evens = odds = 0\n    for i in range(1, n + 1):\n        if int(data[i]) & 1:   # odd\n            odds += 1\n        else:                  # even\n            evens += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray with all distinct elements. A subarray is a sequence of consecutive elements from the array. If the array is empty, return 0.Input Format:- The first line contains an integer n (0 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer — the length of the longest contiguous subarray with all distinct elements.Constraints:- 0 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}          # element -> last index seen\n    start = 0              # start index of current window\n    best = 0               # best window length found\n    \n    for i, val in enumerate(nums):\n        # If val already seen in current window, move start\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n])) if n else []\n    \n    if n == 0:\n        print(0)\n    else:\n        print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:- Output a single integer, the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n    \n    prefix_to_first_idx = {0: -1}  # prefix sum : earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # If there is a previous prefix with sum = prefix_sum - k,\n        # then subarray (prev_idx + 1 ... i) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_idx:\n            max_len = max(max_len, i - prefix_to_first_idx[need])\n        \n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to choose 2 evens plus number of ways to choose 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray (contiguous elements) with the sum equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer: the length of the longest subarray whose sum is exactly k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix_sum -> earliest index where this prefix sum occurred\n    first_idx = {0: -1}\n    prefix = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix += val\n\n        # If we have seen prefix - k before, the subarray (first_idx[prefix-k]+1 .. i) sums to k\n        needed = prefix - k\n        if needed in first_idx:\n            best_len = max(best_len, i - first_idx[needed])\n\n        # record earliest occurrence of this prefix sum\n        if prefix not in first_idx:\n            first_idx[prefix] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. Print the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_index = {}          # value -> most recent index\n    left = 0                 # left boundary of current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1  # shrink window past duplicate\n        last_index[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:          # odd\n            odd_count += 1\n        else:                # even\n            even_count += 1\n\n    # number of pairs from k items is k*(k-1)//2\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of a non-empty subarray with at most one element removed. A subarray is a contiguous part of the array. You may choose to remove at most one element from the subarray to potentially obtain a higher sum, but you are not required to remove any element. The subarray must contain at least one element after removal.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer, the maximum sum possible as described.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_with_one_deletion(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    if n == 1:                        # cannot delete the only element\n        return nums[0]\n\n    dp0 = nums[0]                     # no deletion\n    dp1 = float('-inf')               # one deletion already performed\n    best = nums[0]\n\n    for i in range(1, n):\n        x = nums[i]\n\n        dp1 = max(dp1 + x, dp0)       # either we had deleted before, or delete x now\n        dp0 = max(dp0 + x, x)         # normal Kadane transition\n\n        best = max(best, dp0, dp1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(max_subarray_sum_with_one_deletion(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. You may assume that each input has exactly one solution, and you may not use the same element twice. Output the indices as a pair in increasing order.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print two integers, the indices (0-based) of the two numbers that add up to target, separated by a space, in increasing order.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            j = seen[complement]\n            # Output indices in increasing order\n            if j < i:\n                print(j, i)\n            else:\n                print(i, j)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray such that the absolute difference between any two elements in this subarray is at most 1.Input:  - The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.  - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).Output:  - Output a single integer, the length of the longest contiguous subarray meeting the above condition.Constraints:  - 1 ≤ n ≤ 10^5  - 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n\n    # Deques to keep track of current window's max and min in O(1)\n    max_dq = deque()  # non-increasing: front is current window maximum\n    min_dq = deque()  # non-decreasing: front is current window minimum\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(a):\n        # Maintain max deque\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # Maintain min deque\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # Shrink window from the left until the condition holds\n        while max_dq[0] - min_dq[0] > 1:\n            if a[left] == max_dq[0]:\n                max_dq.popleft()\n            if a[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    even = 0\n    odd = 0\n    \n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of unique pairs (i, j) where the sum of nums[i] and nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])           # length of the array (may be unused beyond reading)\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # combinations C(k, 2) = k * (k - 1) // 2\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements equal. If there are multiple such subarrays with the same length, return the length. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer representing the maximum length of a contiguous subarray with identical elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    max_len = 1  # at least one element exists by constraints\n    cur_len = 1\n\n    for i in range(1, n):\n        if nums[i] == nums[i-1]:\n            cur_len += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = 1\n    # final check\n    if cur_len > max_len:\n        max_len = cur_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If all elements are the same, the answer is 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer — the length of the longest subarray where all elements are different.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_pos = {}\n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    # If all elements are the same, best will be 1 already.\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer—the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, a subarray summing to k ends here\n        need = prefix_sum - k\n        if need in prefix_to_index:\n            best = max(best, i - prefix_to_index[need])\n\n        # Record the earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers of length N. Your task is to find the maximum sum of a contiguous subarray with at least one element. Print the maximum sum that can be obtained.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the array.The second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4), the elements of the array.Output:Print a single integer, the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # max(x, cur + x)\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray with all elements distinct (i.e., no repeating elements). A subarray is a contiguous part of the original array.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> latest index\n    left = 0               # left edge of current window\n    best = 0               # best window length found\n\n    for right, val in enumerate(nums):\n        # If we've seen this value inside the current window,\n        # move the left edge right after its previous position.\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n\n        last_pos[val] = right          # update latest position\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Return the minimum number of moves needed.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the minimum number of moves needed to make all elements equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n\n    nums.sort()\n    median = nums[n // 2]                 # works for both even and odd n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray with a sum equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^4).Output:Print a single integer, the length of the longest contiguous subarray whose sum equals K.Constraints:1 ≤ N ≤ 10^5|K| ≤ 10^9|Ai| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we've seen prefix_sum - k before, subarray (prev_idx+1 .. i) sums to k\n        want = prefix_sum - k\n        if want in prefix_to_first_index:\n            best_len = max(best_len, i - prefix_to_first_index[want])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Output the total number of such pairs.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the total number of pairs with even sums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:   # odd\n            odd_count += 1\n        else:         # even\n            even_count += 1\n\n    # Compute combinations C(k, 2) = k * (k - 1) // 2\n    pairs_even = even_count * (even_count - 1) // 2\n    pairs_odd = odd_count * (odd_count - 1) // 2\n\n    print(pairs_even + pairs_odd)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine the length of the longest contiguous subarray whose sum is not divisible by a given integer k. If no such subarray exists, output -1.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 2 ≤ k ≤ 10^9).- The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9).Output Format:- Output a single integer representing the maximum length of a contiguous subarray whose sum is not divisible by k, or -1 if no such subarray exists.Constraints:- 1 ≤ n ≤ 10^5- 2 ≤ k ≤ 10^9- |a_i| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    a = list(map(int, data[2:2 + n]))\n\n    total = sum(a)\n    # If the whole array already works\n    if total % k != 0:\n        print(n)\n        return\n\n    # Smallest prefix to drop so that remaining sum is NOT divisible by k\n    prefix_len = n + 1          # sentinel larger than any possible length\n    curr = 0\n    for i, val in enumerate(a):\n        curr += val\n        if curr % k != 0:\n            prefix_len = i + 1  # number of elements we drop\n            break\n\n    # Smallest suffix to drop so that remaining sum is NOT divisible by k\n    suffix_len = n + 1\n    curr = 0\n    for i in range(n - 1, -1, -1):\n        curr += a[i]\n        if curr % k != 0:\n            suffix_len = n - i  # number of elements we drop\n            break\n\n    best = max(n - prefix_len, n - suffix_len)\n\n    print(best if best > 0 else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to make all elements in nums equal by incrementing or decrementing any element by 1 in each operation. You can perform as many operations as needed on any element. Output \"YES\" if it is possible to make all elements equal, otherwise output \"NO\".Input Format:The first line contains an integer n (1 ≤ n ≤ 1000).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single line with \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n    \n    # Read the entire input (even though we don't really need to inspect the values\n    # for this problem, we still parse to follow the format).\n    data = sys.stdin.read().strip().split()\n    \n    # If there's no data, nothing to do (defensive programming).\n    if not data:\n        return\n    \n    # Regardless of the numbers, we can always make all elements equal by\n    # incrementing or decrementing each element as many times as needed.\n    print(\"YES\")\n\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, your task is to find the number of unique pairs (i, j) such that i < j and the sum of arr[i] and arr[j] is an even number. Print the count of such pairs.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list.The second line contains n integers arr[1], arr[2], ..., arr[n] (1 ≤ arr[i] ≤ 10^9).Output:Print a single integer — the number of pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n    \n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # number of ways to choose 2 out of k items: k * (k - 1) // 2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the array elements.Output Format:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    def pairs(count: int) -> int:\n        return count * (count - 1) // 2\n\n    result = pairs(even) + pairs(odd)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^5).Output:Output a single integer: the length of the longest contiguous subarray whose sum is k. If there is no such subarray, output 0.Constraints:1 ≤ n ≤ 10^5|a_i| ≤ 10^5|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current prefix - k) has been seen, update max_len\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest appearance of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the array.Output:Print a single integer: the number of pairs (i, j) such that nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens plus number of ways to pick 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to return the length of the longest contiguous subarray with all distinct elements.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen (prefix_sum - k) before, subarray (prev_index+1 .. i) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > best_len:\n                best_len = length\n\n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return best_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the maximum sum of a non-empty subarray, where at most one element can be removed from the chosen subarray (removal is optional, but at least one element must remain). The subarray must be contiguous. For example, given nums = [1, -2, 0, 3], the answer is 4 (by removing -2 from subarray [1, -2, 0, 3], resulting in [1, 0, 3] with sum 4).Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer, the maximum sum as described.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # dp0: max subarray sum ending at current index without deletion\n    # dp1: max subarray sum ending at current index with exactly one deletion\n    NEG_INF = -10 ** 15\n    dp0 = nums[0]\n    dp1 = NEG_INF\n    best = nums[0]\n\n    for i in range(1, n):\n        x = nums[i]\n        dp1 = max(dp1 + x, dp0)     # either extend previous 'one-deletion' subarray or\n                                    # delete the current element (hence take dp0)\n        dp0 = max(dp0 + x, x)       # standard Kadane’s update\n        best = max(best, dp0, dp1)  # track global maximum\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] = target. If such a pair exists, output \"YES\"; otherwise, output \"NO\".Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (−10^9 ≤ target ≤ 10^9).  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))  # Ensure we only take n numbers\n\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. Two pairs (i, j) and (x, y) are considered different if (i, j) != (x, y).  Input:  - The first line contains two integers n and k (1 ≤ n ≤ 10^4, -10^9 ≤ k ≤ 10^9), where n is the length of the array and k is the target sum.  - The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).  Output:  - Output a single integer representing the number of unique pairs whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = Counter(nums)\n    pairs = 0\n\n    for x in freq:\n        y = k - x\n        if y not in freq:\n            continue\n        if x < y:                       # distinct values, count cross-product\n            pairs += freq[x] * freq[y]\n        elif x == y:                    # same value, choose 2 out of freq[x]\n            pairs += freq[x] * (freq[x] - 1) // 2\n        # if x > y, the pair (y, x) was already processed, so skip\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] equals target.Input Format:- The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9), where n is the length of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the number of distinct pairs whose sum is equal to target.Constraints:- 1 ≤ n ≤ 10^4- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, target = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = Counter(nums)\n    pairs = 0\n\n    for x in freq:\n        y = target - x\n        if y not in freq:\n            continue\n\n        if x < y:                         # count once for (x, y) where x != y\n            pairs += freq[x] * freq[y]\n        elif x == y:                      # pairs made within the same value\n            pairs += freq[x] * (freq[x] - 1) // 2\n        # if x > y, the pair was already considered when processing y\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers nums, your task is to find the length of the longest contiguous subarray whose sum is equal to k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:Print a single integer representing the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9|nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_equal_k(nums, k):\n    prefix_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we've seen a prefix with value (current - k), subarray between that\n        # position+1 and current index sums to k.\n        if (prefix_sum - k) in prefix_index:\n            best_len = max(best_len, i - prefix_index[prefix_sum - k])\n\n        # Record the earliest occurrence of this prefix sum.\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_equal_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))  # ensure only n numbers are read\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # combinations C(k, 2) = k * (k - 1) // 2\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements. If all elements are unique, return n. If all elements are the same, return 1.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers, nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}              # value -> last index seen\n    left = 0                   # left boundary of the current window\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # value repeated inside current window, move left pointer\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_unique_subarray(nums)\n    sys.stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest subarray in which all elements are distinct. A subarray is a contiguous segment of the array. Return the length of the longest such subarray.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array.Output Format:Print a single integer: the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(arr):\n    last_pos = {}         # value -> last index where it appeared\n    left = 0              # left end of the current window\n    best = 0\n\n    for right, value in enumerate(arr):\n        # If we've seen this value inside the current window, move `left`\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Output the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    with all distinct elements.\n    \"\"\"\n    last_pos = {}          # maps element -> most recent index\n    left = 0               # left boundary of current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # Duplicate within the current window; move 'left'\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # Ensure exactly n numbers are read\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers, nums. Your task is to determine if it is possible to partition nums into two subsets such that the sum of elements in both subsets is equal. If possible, output \"YES\"; otherwise, output \"NO\".Input:The first line contains an integer n (1 ≤ n ≤ 100).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 100), separated by spaces.Output:Output \"YES\" if the array can be partitioned into two subsets with equal sum, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, it can't be split equally\n    if total % 2 == 1:\n        return False\n    \n    target = total // 2\n    # dp[i] indicates whether a subset with sum i is achievable\n    dp = [False] * (target + 1)\n    dp[0] = True\n    \n    for num in nums:\n        # Traverse backwards to avoid using the same number multiple times\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        # Early exit if we've already found the target\n        if dp[target]:\n            return True\n    \n    return dp[target]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n    \n    if can_partition(nums):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different. Input:- The first line contains a single integer n (1 ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:- Output a single integer: the number of distinct pairs (i, j) where i < j and nums[i] + nums[j] is even.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:   # odd\n            odds += 1\n        else:         # even\n            evens += 1\n\n    # Combinations of 2: C(k, 2) = k * (k - 1) // 2\n    result = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any element by 1. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the minimum number of moves required.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    nums.sort()\n    median = nums[n // 2]          # works for both odd and even n\n    moves = sum(abs(x - median) for x in nums)\n\n    # print as int\n    sys.stdout.write(str(moves))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays with the same sum, return the sum for any one of them.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).Output:Print a single integer: the maximum sum of any contiguous subarray of length k.Constraints:1 ≤ k ≤ n ≤ 10^5-10^4 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = map(int, data)\n    n = next(it)\n    k = next(it)\n    nums = [next(it) for _ in range(n)]\n\n    # Initialize the sum of the first window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window from k to n-1\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]  # add new element, remove leftmost\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of contiguous subarrays whose sum is exactly k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9), where n is the length of nums.- The second line contains n integers, the elements of nums (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer: the number of contiguous subarrays whose sum is exactly k.Constraints:- 1 ≤ n ≤ 10^5- |k| ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1  # empty prefix sum\n    current_sum = 0\n    result = 0\n\n    for num in nums:\n        current_sum += num\n        # number of earlier prefixes with sum (current_sum - k)\n        result += prefix_counts[current_sum - k]\n        prefix_counts[current_sum] += 1\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, your task is to determine whether there exists a contiguous subarray of length at least 2 whose sum is a multiple of k. In other words, find out if there exists indices i and j with 0 ≤ i < j < n and (j - i + 1) ≥ 2 such that the sum of nums[i] + nums[i+1] + ... + nums[j] is divisible by k. Return \"YES\" if such a subarray exists, otherwise return \"NO\".Input:The first line contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ |k| ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" if such a subarray exists, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # We only care about the absolute value of k for divisibility.\n    k = abs(k)\n\n    # If k == 1 every integer is divisible by 1, so any sub-array of length ≥ 2 works.\n    if k == 1:\n        print(\"YES\")\n        return\n\n    # Dictionary that maps a remainder to the earliest index at which it appears.\n    # We put remainder 0 at index -1 so sub-arrays that start at 0 are handled.\n    first_pos = {0: -1}\n\n    prefix = 0\n    for i, val in enumerate(nums):\n        prefix = (prefix + val) % k\n        if prefix in first_pos:\n            # Length of the sub-array is i - first_pos[prefix]\n            if i - first_pos[prefix] >= 2:\n                print(\"YES\")\n                return\n        else:\n            # Store the first occurrence only, since we want the largest distance later.\n            first_pos[prefix] = i\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, return the length of any one. If no such subarray exists, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # first[p]  – first index (0-based on prefix array) where prefix parity == p\n    # last[p]   – last  index where prefix parity == p\n    first = [-1, -1]\n    last = [-1, -1]\n\n    parity = 0          # prefix parity before any element (index 0)\n    first[0] = 0\n    last[0] = 0\n\n    for idx, val in enumerate(nums, 1):   # idx is position in prefix array\n        parity ^= (val & 1)               # update parity (0 even, 1 odd)\n        if first[parity] == -1:\n            first[parity] = idx\n        last[parity] = idx\n\n    max_len = 0\n    for p in (0, 1):\n        if first[p] != -1 and last[p] != -1:\n            max_len = max(max_len, last[p] - first[p])\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    count_even = 0\n    count_odd = 0\n\n    for num in nums:\n        if num & 1:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    # number of ways to pick 2 from k elements: k * (k - 1) // 2\n    pairs = count_even * (count_even - 1) // 2 + count_odd * (count_odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any non-empty subarray with at most one element removed (you may choose to remove one element from the subarray or keep all elements). A subarray is a contiguous part of the original array. Return the maximum possible sum.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the maximum subarray sum with at most one element removed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:                 # no input\n        return\n    n = data[0]\n    nums = data[1:]\n    \n    # n is guaranteed to match the length of nums in valid input\n    if n == 1:                   # only one element → we cannot delete it\n        print(nums[0])\n        return\n    \n    # forward[i]  = max sub-array sum ending exactly at i  (no deletion)\n    # backward[i] = max sub-array sum starting exactly at i (no deletion)\n    forward  = [0] * n\n    backward = [0] * n\n    \n    forward[0] = nums[0]\n    for i in range(1, n):\n        forward[i] = max(nums[i], forward[i - 1] + nums[i])\n    \n    backward[-1] = nums[-1]\n    for i in range(n - 2, -1, -1):\n        backward[i] = max(nums[i], backward[i + 1] + nums[i])\n    \n    # answer with no deletion at all\n    ans = max(forward)           # ordinary Kadane result\n    \n    # try deleting exactly one element inside (not first/last for now)\n    for i in range(1, n - 1):\n        ans = max(ans, forward[i - 1] + backward[i + 1])\n    \n    # deletion of the first or the last element\n    ans = max(ans, backward[1], forward[n - 2])\n    \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray where the sum of its elements is divisible by a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest contiguous subarray whose sum is divisible by k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_divisible_subarray_length(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array whose sum is divisible by k\n    \"\"\"\n    first_occurrence = {0: -1}          # remainder -> first index it was seen\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        rem = prefix_sum % k            # Python handles negatives as we want\n\n        # Record first time this remainder appears\n        if rem not in first_occurrence:\n            first_occurrence[rem] = i\n        else:\n            # subarray (first_occurrence[rem] + 1 … i) sums to multiple of k\n            max_len = max(max_len, i - first_occurrence[rem])\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:          # no input\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_divisible_subarray_length(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of distinct pairs where the sum is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the smallest positive integer that does not appear in the list. If all positive integers up to n are present, return n+1.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list.- The second line contains n space-separated integers ai (−10^6 ≤ ai ≤ 10^6).Output Format:- Output a single integer: the smallest positive integer not present in the list.Constraints:- 1 ≤ n ≤ 10^5- −10^6 ≤ ai ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Store all positive numbers we encounter in a set\n    positives = set()\n    for x in map(int, data[1:]):\n        if x > 0:\n            positives.add(x)\n\n    # The missing integer is guaranteed to be in the range [1, n+1]\n    for candidate in range(1, n + 2):\n        if candidate not in positives:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, return the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. If there are multiple such substrings with the maximum length, return the length of any one of them.Input:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output:Print a single integer: the length of the longest substring without repeating characters.Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Array to store the last position of each character (a-z)\n    last_pos = [-1] * 26\n    left = 0            # Left boundary of the current window\n    best = 0            # Length of the best (longest) window found\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97  # Map 'a'..'z' to 0..25\n        # If character seen in current window, shrink window from the left\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        # Update last seen position of the current character\n        last_pos[idx] = right\n        # Update best length\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S containing only lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input Format:The first line contains the string S.Output Format:Print a single integer representing the length of the longest substring without repeating characters.Constraints:1 ≤ |S| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window algorithm to find the length of the longest substring\n    without repeating characters.\n    Time complexity : O(n)\n    Space complexity: O(α) where α is the alphabet size (≤ 26 here)\n    \"\"\"\n    last_seen = {}            # maps character -> most recent index\n    start = 0                 # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= start:\n            # character repeated inside current window, move start\n            start = last_seen[ch] + 1\n        last_seen[ch] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray whose length is at least k. Return the maximum sum.  Input Format:  The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).  The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).  Output Format:  Print a single integer representing the maximum sum as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # If we must take the whole array\n    if k == n:\n        print(sum(nums))\n        return\n\n    # Initial window of exactly k elements (ending at index k-1)\n    window_sum = sum(nums[:k])\n    dp_prev = window_sum           # dp[k-1]: best subarray ending at k-1 with len >= k\n    best = dp_prev                 # global optimum\n\n    # Iterate from position k to n-1\n    for i in range(k, n):\n        # Update the sum of the last k elements ending at i\n        window_sum += nums[i] - nums[i - k]\n\n        # dp[i] is either:\n        # 1. A fresh window of length exactly k ending at i   (window_sum)\n        # 2. Extend the previous optimal subarray (len ≥ k) by nums[i] (dp_prev + nums[i])\n        dp_curr = max(window_sum, dp_prev + nums[i])\n\n        best = max(best, dp_curr)\n        dp_prev = dp_curr\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers A[1..N]. Your task is to calculate the number of pairs of indices (i, j) such that 1 ≤ i < j ≤ N and A[i] + A[j] is divisible by a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 1000).The second line contains N integers A[1], A[2], ..., A[N] (1 ≤ A[i] ≤ 10^9).Output:Output a single integer: the number of valid pairs (i, j) as described.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    N, K = data[0], data[1]\n    arr = data[2:]\n    # frequency array for residues modulo K\n    freq = [0] * K\n    pairs = 0\n\n    for val in arr:\n        r = val % K\n        complement = (-r) % K          # same as (K - r) % K but works for r == 0\n        pairs += freq[complement]      # all previous numbers with that residue\n        freq[r] += 1                   # include current number for future pairs\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Two pairs are considered different if they have different indices. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the number of unique pairs where the sum is even.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])            # first integer is n\n    nums = map(int, data[1:])   # the rest are the numbers\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:      # odd\n            odd_cnt += 1\n        else:            # even\n            even_cnt += 1\n\n    # number of pairs from k elements = k * (k - 1) // 2\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two strings A and B consisting of lowercase English letters, determine whether it is possible to make the strings equal by swapping at most one pair of characters in string A. If it is possible, output \"YES\", otherwise output \"NO\".Input:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.  For each test case, two lines follow:  The first line contains the string A (1 ≤ |A| ≤ 1000).  The second line contains the string B (|B| = |A|).Output:For each test case, output a single line with either \"YES\" or \"NO\".Constraints:- Both strings consist of only lowercase English letters.- The lengths of A and B in each test case are equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_make_equal_by_one_swap(a: str, b: str) -> bool:\n    \"\"\"\n    Return True if strings `a` and `b` can be made equal\n    by performing at most one swap on string `a`.\n    \"\"\"\n    # Collect indices where the strings differ\n    diff_indices = [i for i, (ca, cb) in enumerate(zip(a, b)) if ca != cb]\n\n    # Case 0: already equal\n    if not diff_indices:\n        return True\n\n    # Any swap involves two positions, so there must be exactly two mismatches\n    if len(diff_indices) != 2:\n        return False\n\n    i, j = diff_indices\n    # After swapping a[i] with a[j], the characters should match B\n    return a[i] == b[j] and a[j] == b[i]\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    idx = 1\n    for _ in range(t):\n        a = data[idx].rstrip('\\n')\n        b = data[idx + 1].rstrip('\\n')\n        idx += 2\n        out_lines.append(\"YES\" if can_make_equal_by_one_swap(a, b) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray whose sum is exactly K. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen (current prefix - k), we can form a subarray ending here with sum k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If the array is empty, return 0.Input Format:The first line contains an integer n (0 ≤ n ≤ 10^5), the length of the array.The second line contains n integers: nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the length of the longest contiguous subarray with all elements distinct.Constraints:0 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    with all distinct elements.\n    \"\"\"\n    last_pos = {}            # element -> last index seen\n    start = 0                # left edge of the current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        # If val has been seen and is inside the current window,\n        # move the start just after its previous occurrence.\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - start + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:        # no input at all\n        return\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the number of pairs (i, j) with 0 ≤ i < j < n such that nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:        # odd\n            odd_count += 1\n        else:              # even\n            even_count += 1\n\n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. If there are multiple such subarrays, output the length of any one of them.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums_1, nums_2, ..., nums_n (1 ≤ nums_i ≤ 10^9), the elements of the array.Output Format:- Output a single integer representing the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_idx = {}\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_idx and last_idx[val] >= left:\n            left = last_idx[val] + 1\n        last_idx[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine the minimum number of characters you must delete from S to make it a palindrome. You may delete any characters in any order. Output the minimum number of deletions required.Input:The first line contains a single integer n (1 ≤ n ≤ 1000), the length of S.  The second line contains the string S.Output:Output a single integer—the minimum number of deletions required to make S a palindrome.Constraints:1 ≤ n ≤ 1000  S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_palindromic_subsequence_length(s: str) -> int:\n    \"\"\"\n    Computes the length of the longest palindromic subsequence in s\n    using LCS between s and its reverse. Runs in O(n^2) time and O(n) memory.\n    \"\"\"\n    n = len(s)\n    rev = s[::-1]\n\n    # Two rolling rows for LCS DP\n    prev = [0] * (n + 1)\n    curr = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        # swap rows\n        prev, curr = curr, prev\n        for j in range(1, n + 1):\n            if s[i - 1] == rev[j - 1]:\n                curr[j] = prev[j - 1] + 1\n            else:\n                curr[j] = max(prev[j], curr[j - 1])\n\n    return curr[n]\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())  # length, can be ignored safely\n    s = data[1].strip() if len(data) > 1 else \"\"\n    lps_len = longest_palindromic_subsequence_length(s)\n    min_deletions = n - lps_len\n    print(min_deletions)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray that contains at most two distinct integers. A subarray is a sequence of consecutive elements from the array. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with at most two distinct integers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    left = 0\n    freq = {}\n    best = 0\n\n    for right, val in enumerate(nums):\n        # include current element in the window\n        freq[val] = freq.get(val, 0) + 1\n\n        # shrink window until it has at most 2 distinct numbers\n        while len(freq) > 2:\n            left_val = nums[left]\n            freq[left_val] -= 1\n            if freq[left_val] == 0:\n                del freq[left_val]\n            left += 1\n\n        # update the maximum length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums_i (|nums_i| ≤ 10^4), representing the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    first_idx = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If prefix_sum - k has been seen, subarray (first_idx[prefix_sum-k]+1 .. i) sums to k\n        if prefix_sum - k in first_idx:\n            max_len = max(max_len, i - first_idx[prefix_sum - k])\n\n        # Store the earliest occurrence of this prefix_sum\n        if prefix_sum not in first_idx:\n            first_idx[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    ans = longest_subarray_with_sum_k(nums, k)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 items from k items: k * (k - 1) // 2\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays, return the maximum among them. Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer, the maximum sum of any contiguous subarray of length exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Compute the sum of the first `k` elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window from position `k` to `n - 1`\n    for i in range(k, n):\n        window_sum += nums[i]          # add the next element\n        window_sum -= nums[i - k]      # remove the element leaving the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If k > n, return -1.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the maximum sum of any contiguous subarray of length k, or -1 if not possible.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_k(nums, k):\n    \"\"\"\n    Returns the maximum sum of any contiguous sub-array\n    of length k in nums. Assumes k <= len(nums).\n    \"\"\"\n    # Initial window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window\n    for i in range(k, len(nums)):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    \n    n, k = data[0], data[1]\n    nums = data[2:]\n    \n    # Guard against invalid input sizes\n    if k > n or len(nums) < n:\n        print(-1)\n        return\n    \n    # Compute and output the answer\n    print(max_subarray_sum_k(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Each pair should be counted only once, regardless of the order of the numbers. Return the total count of such pairs.Input:The first line contains two integers n (1 ≤ n ≤ 10^4) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of unique pairs whose sum equals the target.Constraints:1 ≤ n ≤ 10^4−10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef count_unique_pairs(nums, target):\n    \"\"\"\n    Counts the number of UNIQUE unordered value-pairs (a, b) with a + b == target.\n    A pair is considered unique by its values, not by indices.\n    \"\"\"\n    freq = Counter(nums)\n    pairs = 0\n\n    for num in freq:\n        comp = target - num\n        # Ensure each unordered pair is considered only once\n        if num < comp:\n            if comp in freq:\n                pairs += 1\n        elif num == comp:\n            # Need at least two occurrences to form a pair (num, num)\n            if freq[num] >= 2:\n                pairs += 1\n        # If num > comp : that pair has already been counted when comp was visited\n\n    return pairs\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, target = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = count_unique_pairs(nums, target)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine whether it is possible to rearrange the elements of nums so that no two adjacent elements in the rearranged array are equal. If it is possible, output \"YES\"; otherwise, output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^5), representing the elements of the array.Output Format:Print \"YES\" if such a rearrangement is possible; otherwise, print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    freq = Counter(nums)\n    mx = max(freq.values())\n    \n    # A rearrangement without equal neighbours is possible\n    # iff the most frequent element does not occupy more than\n    # half (rounded up) of the positions.\n    if mx <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray whose sum is k. If no such subarray exists, print 0.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    prefix_to_first_idx = {0: -1}           # prefix sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, subarray (prev_idx+1 ... i) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_idx:\n            longest = max(longest, i - prefix_to_first_idx[need])\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, count the number of pairs (i, j) such that i < j and A[i] + A[j] is an even number. Print the result.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers A[1], A[2], ..., A[N] (1 ≤ A[i] ≤ 10^9).Output:Print a single integer — the number of valid pairs.Constraints:1 ≤ N ≤ 10^51 ≤ A[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to rearrange the elements of nums such that every pair of adjacent elements has a different parity (that is, one is even and the other is odd). Print \"YES\" if such a rearrangement is possible, otherwise print \"NO\".Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if such a rearrangement is possible, otherwise print \"NO\".Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Count evens and odds\n    even_cnt = sum(1 for x in nums if x % 2 == 0)\n    odd_cnt = n - even_cnt\n    \n    # It is possible to arrange alternately iff the counts differ by at most 1\n    if abs(even_cnt - odd_cnt) <= 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine if it is possible to rearrange the elements to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Output \"YES\" if possible, otherwise \"NO\".Input:The first line contains an integer N (1 ≤ N ≤ 10^5).The second line contains N space-separated integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^6).Output:Print \"YES\" if the elements can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(nums):\n    \"\"\"\n    Returns True if the multiset `nums` can be rearranged\n    into a palindrome, otherwise False.\n    \"\"\"\n    freq = Counter(nums)\n    odd_counts = sum(1 for c in freq.values() if c & 1)  # count values with odd frequency\n    # For a palindrome, at most one element may have an odd frequency\n    return odd_counts <= 1\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(\"YES\" if can_form_palindrome(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer target. Your task is to find two distinct indices i and j such that nums[i] + nums[j] = target. If such a pair exists, print the indices i and j (0-based, in any order). If there are multiple valid answers, print any one. If no such pair exists, print -1 -1.Input:The first line contains two integers n and target (2 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print two integers i and j (0 ≤ i, j < n, i ≠ j), representing the indices of the elements that sum to target, or \"-1 -1\" if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = {}  # value -> index\n    for idx, val in enumerate(nums):\n        need = target - val\n        if need in seen:\n            print(seen[need], idx)\n            return\n        seen[val] = idx\n    # If we exit the loop, no pair was found\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. If all elements are unique, return n.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_index = {}           # value -> latest position\n    left = 0                  # start of current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            # Duplicate inside the current window – move left past it\n            left = last_index[value] + 1\n        last_index[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the length of the longest contiguous subarray where the sum of its elements is less than or equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).The second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is less than or equal to K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    left = 0\n    current_sum = 0\n    best = 0\n\n    for right, val in enumerate(arr):\n        current_sum += val\n        # shrink window from the left while sum exceeds k\n        while current_sum > k and left <= right:\n            current_sum -= arr[left]\n            left += 1\n        # after adjustment, window [left, right] is valid\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray whose sum is divisible by a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the length of the longest contiguous subarray whose sum is divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    first_occurrence = {0: -1}          # remainder -> earliest index\n    prefix = 0\n    best = 0\n\n    for idx, val in enumerate(nums):\n        prefix = (prefix + val) % k\n        if prefix in first_occurrence:\n            best = max(best, idx - first_occurrence[prefix])\n        else:\n            first_occurrence[prefix] = idx\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. Return the length of this subarray.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^6), representing the elements of the array.Output:Output a single integer — the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}                   # value -> latest index seen\n    max_len = 0\n    left = 0                       # left boundary of current window\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # value is repeated inside the current window – move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different.  Input Format:  The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.  The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).  Output Format:  Output a single integer representing the number of unique pairs with an even sum.  Constraints:  1 ≤ n ≤ 10^5  −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Count evens and odds while reading to avoid storing the whole list unnecessarily\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        num = int(data[i])\n        if num & 1:           # odd\n            odd_count += 1\n        else:                 # even\n            even_count += 1\n\n    # Pairs with even sum: both even OR both odd\n    def choose2(x: int) -> int:\n        return x * (x - 1) // 2\n\n    result = choose2(even_count) + choose2(odd_count)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Return the minimum number of moves needed.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the minimum number of moves needed to make all array elements equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Find the median\n    nums.sort()\n    median = nums[n // 2]\n\n    # Calculate total moves (sum of absolute differences to the median)\n    total_moves = 0\n    for num in nums:\n        total_moves += abs(num - median)\n\n    # Output the result\n    print(total_moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements (no duplicates). If the array is empty, return 0.Input:The first line contains an integer n (0 ≤ n ≤ 10^5) — the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                       # no input at all\n        return\n    n = int(data[0])\n    if n == 0:                         # empty array\n        print(0)\n        return\n\n    nums = list(map(int, data[1:1 + n]))\n\n    last_index = {}                    # value -> most recent position\n    left = 0                           # start of current window\n    best = 0                           # length of longest unique subarray\n\n    for right, value in enumerate(nums):\n        # If value seen inside current window, move left just past its last occurrence\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        last_index[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs (i, j) where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements. If the array is empty, return 0.Input Format:The first line contains an integer n (0 ≤ n ≤ 10^5), the size of nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:Print a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:0 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray with all distinct\n    elements in `nums`.\n    \"\"\"\n    last_pos = {}          # element -> last index where it appeared\n    start = 0              # left boundary of the current window\n    best = 0               # best length found so far\n    \n    for i, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= start:\n            start = last_pos[value] + 1     # shrink window to exclude duplicate\n        last_pos[value] = i\n        best = max(best, i - start + 1)\n    \n    return best\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    \n    if not data:                 # no input at all\n        return\n    n = data[0]\n    \n    if n == 0:\n        # Either the array line is missing or empty – answer is 0\n        print(0)\n        return\n    \n    nums = data[1:1+n]           # safeguard if extra numbers exist\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 <= i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 <= n <= 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 <= nums[i] <= 10^9), separated by spaces.Output:Print a single integer: the number of valid pairs.Constraints:1 <= n <= 10^5-10^9 <= nums[i] <= 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of pairs from k elements is k*(k-1)//2\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is divisible by k.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^4), where n is the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^4- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Count frequency of each remainder\n    freq = Counter(num % k for num in nums)\n    \n    pairs = 0\n    \n    # Remainder 0 pairs with itself\n    zero_cnt = freq.get(0, 0)\n    if zero_cnt > 1:\n        pairs += zero_cnt * (zero_cnt - 1) // 2\n    \n    # Handle k even and remainder k/2\n    if k % 2 == 0:\n        mid_cnt = freq.get(k // 2, 0)\n        if mid_cnt > 1:\n            pairs += mid_cnt * (mid_cnt - 1) // 2\n        start = 1\n        end = k // 2 - 1\n    else:\n        start = 1\n        end = k // 2  # floor\n    \n    # Pair remainder r with k - r\n    for r in range(start, end + 1):\n        pairs += freq.get(r, 0) * freq.get(k - r, 0)\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray whose sum is equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i in range(n):\n        prefix_sum += nums[i]\n\n        # if prefix_sum - k has been seen, subarray (prev_index+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[target])\n\n        # record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is divisible by a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 100- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Frequency array for remainders\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    # Count pairs\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    pairs += freq[0] * (freq[0] - 1) // 2\n\n    # Handle remainders 1..k//2\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, remainder k/2 pairs with itself\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs (i1, j1) and (i2, j2) are considered different if (i1, j1) ≠ (i2, j2). Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the number of distinct pairs with even sums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 elements from k elements: k * (k - 1) // 2\n    pairs_even = even_count * (even_count - 1) // 2\n    pairs_odd = odd_count * (odd_count - 1) // 2\n\n    total_pairs = pairs_even + pairs_odd\n    print(total_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray that contains at most two distinct numbers.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^50 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    left = 0\n    freq = defaultdict(int)\n    best = 0\n\n    for right, value in enumerate(nums):\n        freq[value] += 1\n\n        # Shrink window until we have at most 2 distinct numbers\n        while len(freq) > 2:\n            discard = nums[left]\n            freq[discard] -= 1\n            if freq[discard] == 0:\n                del freq[discard]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers, the elements of nums (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer, the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_sum = 0\n    earliest_index = {0: -1}      # prefix_sum -> earliest position\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # Check if there is a previous prefix such that\n        # current_prefix - previous_prefix == k\n        target = prefix_sum - k\n        if target in earliest_index:\n            longest = max(longest, i - earliest_index[target])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in earliest_index:\n            earliest_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if there exists a subarray (contiguous segment) whose sum is exactly k. Return \"YES\" if such a subarray exists, otherwise return \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).Output Format:Output \"YES\" if there exists a subarray whose sum is exactly k. Otherwise, output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n\n    prefix_sum = 0\n    seen_prefixes = {0}          # prefix sum before any element\n\n    for x in arr:\n        prefix_sum += x\n        if prefix_sum - k in seen_prefixes:\n            print(\"YES\")\n            return\n        seen_prefixes.add(prefix_sum)\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N positive integers, determine if it is possible to select exactly two different elements whose sum is equal to a given integer K. Output \"YES\" if such a pair exists, otherwise output \"NO\".Input Format:The first line contains two integers N and K (2 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).Output Format:Output a single line containing either \"YES\" or \"NO\".Constraints:- 2 ≤ N ≤ 10^5- 1 ≤ K ≤ 10^9- 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:]))\n\n    seen = set()\n    for x in nums:\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a contiguous subarray. The subarray must contain at least one element. Return the maximum possible sum.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer: the maximum sum of any contiguous subarray.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = num if current_sum < 0 else current_sum + num\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is exactly equal to a given integer k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    whose elements sum exactly to k.\n    \"\"\"\n    prefix_to_first_idx = {0: -1}          # prefix_sum : earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen (prefix_sum - k) before, subarray (prev_idx+1 .. i) sums to k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_idx:\n            candidate_len = i - prefix_to_first_idx[needed]\n            if candidate_len > best_len:\n                best_len = candidate_len\n\n        # Record first occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = i\n\n    return best_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. Return the maximum length found.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer representing the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}            # value -> latest index encountered\n    left = 0                 # left end of current window\n    best = 0                 # best window length found\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window; move left just after previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements. If all elements are the same, the answer is 1. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}\n    left = 0\n    max_len = 0\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of size n, return the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix_index maps a prefix sum to its earliest index\n    prefix_index = {0: -1}        # sum 0 occurs before the array starts\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current prefix sum - k) was seen before, subarray between them sums to k\n        target = prefix_sum - k\n        if target in prefix_index:\n            length = i - prefix_index[target]\n            if length > longest:\n                longest = length\n\n        # Store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == '__main__':\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. Each pair should be counted only once, even if there are duplicates in nums.Input:- The first line contains two integers n and k (1 ≤ n ≤ 10^4, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:- Output a single integer: the number of unique pairs whose sum is k.Constraints:- 1 ≤ n ≤ 10^4- -10^9 ≤ k, nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    freq = Counter(nums)\n    pairs = 0\n    \n    for x in list(freq.keys()):\n        y = k - x\n        if x < y:\n            if y in freq:\n                pairs += 1\n        elif x == y:\n            if freq[x] > 1:\n                pairs += 1\n        # if x > y we have already considered the pair when processing y\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Output a single integer: the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums):\n    min_d = deque()         # increasing deque -> front is current minimum\n    max_d = deque()         # decreasing deque -> front is current maximum\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # maintain min deque (increasing)\n        while min_d and value < min_d[-1]:\n            min_d.pop()\n        min_d.append(value)\n\n        # maintain max deque (decreasing)\n        while max_d and value > max_d[-1]:\n            max_d.pop()\n        max_d.append(value)\n\n        # shrink window until condition satisfied\n        while max_d[0] - min_d[0] > 1:\n            if nums[left] == min_d[0]:\n                min_d.popleft()\n            if nums[left] == max_d[0]:\n                max_d.popleft()\n            left += 1\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if there exist two distinct elements in nums whose sum is equal to target. Print \"YES\" if such a pair exists, or \"NO\" otherwise.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (−10^9 ≤ target ≤ 10^9), the length of the array and the target sum.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print \"YES\" if there exist two distinct elements in nums whose sum is equal to target, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if target - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine if it is possible to rearrange them to form a palindrome. A palindrome is a sequence that reads the same forward and backward. Print \"YES\" if possible, otherwise print \"NO\".Input:The first line contains an integer N (1 ≤ N ≤ 10^5), the number of integers.The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^6).Output:Print \"YES\" if the numbers can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    freq = Counter(nums)\n    \n    # Count how many numbers have an odd frequency\n    odd_count = sum(1 for v in freq.values() if v & 1)\n    \n    # A palindrome permutation is possible if at most one number\n    # appears an odd number of times.\n    print(\"YES\" if odd_count <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest subarray where the sum of its elements is zero. If no such subarray exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer: the length of the longest zero-sum subarray.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    prefix_first_index = {0: -1}        # prefix_sum : earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        if prefix_sum in prefix_first_index:\n            # Zero-sum subarray exists between previous index + 1 and i\n            curr_len = i - prefix_first_index[prefix_sum]\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            # Store first occurrence of this prefix sum\n            prefix_first_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous elements) in which all elements are distinct. If there are multiple such subarrays, return the length of any one of them.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_seen = {}\n    left = 0          # left end of the current window\n    best = 0          # best window length found so far\n    \n    for right, value in enumerate(nums):\n        # If we've seen this value in the current window, move `left`\n        if value in last_seen and last_seen[value] >= left:\n            left = last_seen[value] + 1\n        \n        last_seen[value] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of all elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer, the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_idx = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for idx, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, update max_len\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            current_len = idx - prefix_to_first_idx[target]\n            if current_len > max_len:\n                max_len = current_len\n\n        # Record the earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = idx\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, return the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.- The second line contains the string s of length n.Output Format:- Output a single integer: the length of the longest substring of s with all unique characters.Constraints:- 1 ≤ n ≤ 10^5- s contains only lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window approach that keeps track of the last position at which each\n    character appeared. Works in O(n) time and O(1) extra space (26 letters).\n    \"\"\"\n    last_pos = [-1] * 26          # last positions for 'a'..'z'\n    left = 0                      # left end of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97        # map 'a'..'z' -> 0..25\n        if last_pos[idx] >= left: # ch repeated inside current window\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # first line: n (can be ignored except for validation)\n    # second line: the string\n    s = data[1].rstrip(\"\\n\") if len(data) > 1 else \"\"\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Return the length of this subarray.Input:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the array.Output:- Output a single integer: the length of the longest contiguous subarray with an absolute difference of at most 1 between any two elements.Constraints:1 ≤ n ≤ 10^51 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_range_at_most_one(arr):\n    min_deque = deque()   # increasing\n    max_deque = deque()   # decreasing\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        # insert into deques\n        while min_deque and value < min_deque[-1]:\n            min_deque.pop()\n        min_deque.append(value)\n\n        while max_deque and value > max_deque[-1]:\n            max_deque.pop()\n        max_deque.append(value)\n\n        # shrink window until range <= 1\n        while max_deque[0] - min_deque[0] > 1:\n            if arr[left] == min_deque[0]:\n                min_deque.popleft()\n            if arr[left] == max_deque[0]:\n                max_deque.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    result = longest_subarray_range_at_most_one(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    for x in nums:\n        if x & 1 == 0:   # even\n            even += 1\n    odd = n - even\n\n    # Pairs of evens + pairs of odds\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether it is possible to rearrange the characters of S to form a palindrome. Print \"YES\" if possible, otherwise print \"NO\".Input Format:The first line contains an integer N (1 ≤ N ≤ 10^5), the length of string S.  The second line contains the string S.Output Format:Print \"YES\" if it's possible to rearrange the string into a palindrome, otherwise print \"NO\".Constraints:1 ≤ N ≤ 10^5  S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    \"\"\"\n    odd = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    return odd <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    # The first token is the length N, the second is the string S\n    # We only need the string itself to solve the problem.\n    _, s = data[0], data[1]\n    \n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given integer k.Input:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    max_dq = deque()  # decreasing, keeps indices of potential maxima\n    min_dq = deque()  # increasing, keeps indices of potential minima\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques with the new value at position right\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window if constraint violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    print(longest_subarray(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Return the length of such a subarray. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers, nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums):\n    \"\"\"\n    Finds the length of the longest contiguous sub-array such that\n    the absolute difference between its maximum and minimum element\n    is not greater than 1.\n    \"\"\"\n    min_q = deque()   # increasing deque -> front is current minimum\n    max_q = deque()   # decreasing deque -> front is current maximum\n    \n    left = 0          # left border of the sliding window\n    best = 0          # best window length found so far\n    \n    for right, value in enumerate(nums):\n        # Insert current value into both deques, maintaining order\n        while min_q and min_q[-1] > value:\n            min_q.pop()\n        min_q.append(value)\n        \n        while max_q and max_q[-1] < value:\n            max_q.pop()\n        max_q.append(value)\n        \n        # Shrink window from the left while constraint violated\n        while max_q[0] - min_q[0] > 1:\n            # remove nums[left] from deques if necessary\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            left += 1\n        \n        best = max(best, right - left + 1)\n    \n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if S can be rearranged to form a palindrome. Return \"YES\" if it is possible, and \"NO\" otherwise.Input:The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases.  Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output:For each test case, print \"YES\" if the string can be rearranged into a palindrome, otherwise print \"NO\".Constraints:1 ≤ T ≤ 10  1 ≤ |S| ≤ 1000  S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters in `s` can be rearranged to form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    # Count of characters that appear an odd number of times\n    odd_count = sum(1 for count in freq.values() if count % 2)\n    # For a palindrome, at most one character may have an odd count\n    return odd_count <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    results = []\n    for i in range(1, t + 1):\n        s = data[i].strip()\n        results.append(\"YES\" if can_form_palindrome(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(results))\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. A subarray is a contiguous sequence of elements within the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer representing the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}            # value -> most recent index\n    left = 0                 # left border of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window: shrink from the left\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Each input will have exactly one solution, and you may not use the same element twice. Return the answer as a list of two indices in any order.Input Format:- The first line contains two integers n (length of nums) and target.- The second line contains n integers representing the array nums.Output Format:- Print two integers, the indices (0-based) of the elements that add up to target, separated by a space.Constraints:- 2 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9- -10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    index_map = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in index_map:\n            print(index_map[complement], i)\n            return\n        index_map[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of distinct pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Combination counts: C(k, 2) = k * (k - 1) // 2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find two distinct indices i and j (i < j) such that nums[i] + nums[j] = target. Output the pair of indices (i, j). If there are multiple solutions, output the one with the smallest i, and if there are multiple with the same i, output the one with the smallest j. If no such pair exists, output \"-1 -1\".Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print two integers i and j (0-based indices), or \"-1 -1\" if no valid pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    earliest_index = {}          # value -> first position it appears\n    best_i, best_j = n, n        # initialise with impossible large indices\n\n    for j, val in enumerate(nums):\n        complement = target - val\n\n        # If complement was seen before, a pair (i, j) exists with i < j\n        if complement in earliest_index:\n            i = earliest_index[complement]\n            # Choose the pair with the smallest i, and if tie, smallest j\n            if i < best_i or (i == best_i and j < best_j):\n                best_i, best_j = i, j\n\n        # Record the earliest occurrence of val\n        if val not in earliest_index:\n            earliest_index[val] = j\n\n    if best_i == n:\n        print(\"-1 -1\")\n    else:\n        print(f\"{best_i} {best_j}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).Output:Print a single integer — the length of the longest contiguous subarray with sum equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(arr, k):\n    prefix_to_index = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If there is a previous prefix with sum (prefix_sum - k),\n        # the subarray between that index+1 and current i sums to k.\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            best = max(best, i - prefix_to_index[target])\n\n        # Store earliest occurrence of each prefix sum.\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n    print(longest_subarray_with_sum_k(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine if there exist two distinct indices i and j such that nums[i] + nums[j] == k, where k is a given integer. Print \"YES\" if such a pair exists, otherwise print \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[0], nums[1], ..., nums[n-1] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exists a pair of distinct indices with the required sum, otherwise print \"NO\".Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    seen = set()\n    for _ in range(n):\n        num = int(next(it))\n        if k - num in seen:\n            sys.stdout.write(\"YES\")\n            return\n        seen.add(num)\n    sys.stdout.write(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to k. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum is k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}   # prefix sum -> first index where it appears\n    prefix_sum = 0\n    best = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If a subarray starting from 0 sums to k\n        if prefix_sum == k:\n            best = max(best, i + 1)\n\n        # If there exists a prefix so that current_sum - previous_sum == k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            best = max(best, i - prefix_to_first_index[needed])\n\n        # Record the first time we see this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements being distinct. If the array is empty, return 0.Input Format:- The first line contains an integer n (0 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).Output Format:- Print a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:- 0 ≤ n ≤ 10^5- 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(arr):\n    last_pos = {}          # value -> most recent index\n    left = 0               # left boundary of current window\n    best = 0\n\n    for right, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate found inside the current window: move left boundary\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n    # Remaining n integers (may span multiple lines)\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer target. Your task is to find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Two pairs are considered different if their indices are different. Print the total number of such pairs.Input Format:The first line contains two integers n and target.The second line contains n integers representing the array nums.Output Format:Print a single integer, the number of unique pairs whose sum equals target.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    target = int(next(it))\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    freq = defaultdict(int)       # stores how many times a value has appeared so far\n    pair_cnt = 0                  # total number of valid (i, j) pairs, i < j\n\n    for num in nums:\n        complement = target - num\n        pair_cnt += freq[complement]   # every previous complement forms a new pair\n        freq[num] += 1                 # record current number for future pairs\n\n    print(pair_cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest subarray (contiguous segment) whose sum is exactly k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer: the length of the longest subarray with sum exactly k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_index = {0: -1}           # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If (current prefix - k) has been seen, we found a subarray summing to k\n        if (prefix_sum - k) in prefix_index:\n            length = i - prefix_index[prefix_sum - k]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray where the absolute difference between any two elements is at most 1. A subarray is a contiguous part of the array.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Output a single integer: the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_valid_subarray(nums):\n    max_dq = deque()  # indices of elements, values in non-increasing order\n    min_dq = deque()  # indices of elements, values in non-decreasing order\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain max deque\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain min deque\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_valid_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray in which the difference between the maximum and minimum values does not exceed k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer — the length of the longest valid contiguous subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^9−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    whose max - min does not exceed k.\n    \"\"\"\n    min_d = deque()   # increasing deque -> front is current minimum\n    max_d = deque()   # decreasing deque -> front is current maximum\n    best = 0\n    left = 0\n\n    for right, value in enumerate(nums):\n        # maintain monotone deques for minimum\n        while min_d and nums[min_d[-1]] > value:\n            min_d.pop()\n        min_d.append(right)\n\n        # maintain monotone deques for maximum\n        while max_d and nums[max_d[-1]] < value:\n            max_d.pop()\n        max_d.append(right)\n\n        # shrink window until it becomes valid\n        while nums[max_d[0]] - nums[min_d[0]] > k:\n            left += 1\n            if min_d[0] < left:\n                min_d.popleft()\n            if max_d[0] < left:\n                max_d.popleft()\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    print(longest_subarray(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Output the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the array.Output Format:Output a single integer: the length of the longest such subarray.Constraints:1 ≤ n ≤ 10^51 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n    \n    # Deques that keep indices of elements in non-increasing (for max)\n    # and non-decreasing (for min) order inside the current window\n    max_dq = deque()\n    min_dq = deque()\n    \n    left = 0\n    best = 0\n    \n    for right, val in enumerate(a):\n        # Maintain decreasing deque for maximums\n        while max_dq and a[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n        \n        # Maintain increasing deque for minimums\n        while min_dq and a[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n        \n        # Shrink window from the left until the condition is satisfied\n        while a[max_dq[0]] - a[min_dq[0]] > 1:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n        \n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains at most two distinct numbers. A subarray is a sequence of consecutive elements in the array. If the array is empty, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9), representing the array elements.Output:Print a single integer, the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    \n    if not data:          # no input at all\n        print(0)\n        return\n    \n    n = data[0]           # length of the array\n    nums = data[1:]       # remaining numbers\n    \n    if n == 0 or not nums:\n        print(0)\n        return\n\n    # Sliding-window to keep at most two distinct numbers\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        # shrink window until we have at most two distinct numbers\n        while len(freq) > 2:\n            drop = nums[left]\n            freq[drop] -= 1\n            if freq[drop] == 0:\n                del freq[drop]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Output the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}               # value -> latest index\n    max_len = 0\n    left = 0                    # left boundary of current window\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window -> move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        cur_len = right - left + 1\n        if cur_len > max_len:\n            max_len = cur_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only even numbers. If there are multiple such subarrays, output the length of any one of them. If no even numbers exist in the array, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer: the length of the longest contiguous subarray with only even numbers.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    max_len = 0\n    cur = 0\n    for num in nums:\n        if num % 2 == 0:\n            cur += 1\n            if cur > max_len:\n                max_len = cur\n        else:\n            cur = 0\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the length of the longest contiguous subarray whose elements sum up to an even number. If there is no such subarray, output 0.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.The second line contains N space-separated positive integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).Output:Print a single integer: the maximum length of a contiguous subarray with an even sum.Constraints:1 ≤ N ≤ 10^51 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # first_occurrence[parity] = earliest index where this prefix-parity appeared\n    # we start with prefix sum 0 (even) at index 0\n    first_occurrence = [0, None]      # index of first even, first odd prefix\n    prefix_parity = 0                 # running sum parity\n    max_len = 0\n\n    for i, val in enumerate(arr, 1):  # positions are 1-based for convenience\n        prefix_parity ^= (val & 1)    # toggle parity if the element is odd\n\n        if first_occurrence[prefix_parity] is None:\n            # first time this parity appears\n            first_occurrence[prefix_parity] = i\n        else:\n            # we have seen this parity before – subarray (first_idx, i] has even sum\n            length = i - first_occurrence[prefix_parity]\n            if length > max_len:\n                max_len = length\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers, nums. Your task is to find the minimum number of elements you need to remove from the array so that the remaining elements are all equal. If the array is already made up of equal elements, you should return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the minimum number of elements to remove.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Count frequency of each number\n    freq = Counter(nums)\n    \n    # Find the highest frequency\n    max_freq = max(freq.values())\n    \n    # Elements to remove = total elements - highest frequency\n    removals = n - max_freq\n    \n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums consisting of n elements, find the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays, output the maximum sum among them.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n space-separated integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the maximum sum of any contiguous subarray of length exactly k.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Compute the sum of the first window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window from index k to n-1\n    for i in range(k, n):\n        window_sum += nums[i]       # add the next element entering the window\n        window_sum -= nums[i - k]   # remove the element leaving the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_indices = {0: -1}            # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If prefix_sum - k seen before, subarray between previous index +1 and i sums to k\n        target = prefix_sum - k\n        if target in prefix_indices:\n            max_len = max(max_len, i - prefix_indices[target])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_indices:\n            prefix_indices[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine whether the string is a palindrome. A palindrome is a string that reads the same backward as forward. Output \"YES\" if S is a palindrome, otherwise output \"NO\".Input Format:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output Format:For each test case, output \"YES\" or \"NO\" on a separate line.Constraints:1 ≤ T ≤ 1001 ≤ |S| ≤ 1000\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if `s` is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    try:\n        t = int(data[0].strip())\n    except ValueError:\n        # If the first line is not an integer, default to treating the entire input as a single test case\n        t = 1\n        data = [''] + data  # pad so indexing below works uniformly\n\n    out_lines = []\n    for i in range(1, t + 1):\n        if i < len(data):\n            s = data[i].strip()\n        else:\n            s = \"\"  # handle any missing lines gracefully\n        out_lines.append(\"YES\" if is_palindrome(s) else \"NO\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the number of pairs (i, j) with i < j such that nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n    \n    # number of ways to choose 2 elements from k elements: k * (k - 1) // 2\n    pairs_even_sum = even_count * (even_count - 1) // 2\n    pairs_even_sum += odd_count * (odd_count - 1) // 2\n    \n    print(pairs_even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum values is at most 2. Output the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_with_small_spread(nums, limit=2):\n    \"\"\"\n    Returns the length of the longest contiguous subarray whose max - min <= limit.\n    \"\"\"\n    min_q = deque()          # increasing deque -> front is current minimum\n    max_q = deque()          # decreasing deque -> front is current maximum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain monotone queues\n        while min_q and val < min_q[-1]:\n            min_q.pop()\n        min_q.append(val)\n\n        while max_q and val > max_q[-1]:\n            max_q.pop()\n        max_q.append(val)\n\n        # Shrink window until it satisfies the condition\n        while max_q[0] - min_q[0] > limit:\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:n+1]\n    print(longest_subarray_with_small_spread(nums, 2))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is less than or equal to k. Return the length of this subarray.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    min_dq = deque()   # increasing deque for minima\n    max_dq = deque()   # decreasing deque for maxima\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain decreasing deque for maximums\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain increasing deque for minimums\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    print(longest_subarray(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of the elements in the subarray is exactly k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:Print a single integer: the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_first_idx = {0: -1}  # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # check if there exists a prefix yielding subarray with sum k\n        need = prefix_sum - k\n        if need in prefix_first_idx:\n            max_len = max(max_len, i - prefix_first_idx[need])\n        \n        # store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_first_idx:\n            prefix_first_idx[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only even numbers. If there is no such subarray, return 0.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest contiguous subarray of even numbers.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    max_len = 0\n    current = 0\n\n    for num in nums:\n        if num % 2 == 0:       # even\n            current += 1\n            if current > max_len:\n                max_len = current\n        else:                  # odd – reset\n            current = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of ways to pick 2 evens plus 2 odds\n    result = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a contiguous segment of the array. Return the length of the longest such subarray.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) — the elements of the array.Output:Output a single integer — the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}           # value -> last index it appeared\n    left = 0                # left boundary of current window\n    max_len = 0\n    \n    for right, value in enumerate(nums):\n        # if value already seen and is inside current window,\n        # move left boundary just after its previous position\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        window_len = right - left + 1\n        if window_len > max_len:\n            max_len = window_len\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] == target. Each pair is counted only once regardless of the order.  Input Format:  The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).  The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).  Output Format:  Output a single integer — the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n    from collections import defaultdict\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = defaultdict(int)   # counts of numbers we've already seen\n    pairs = 0\n\n    for num in nums:\n        complement = target - num\n        pairs += freq.get(complement, 0)\n        freq[num] += 1\n\n    print(pairs)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is equal to k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_sum_first_index = {0: -1}  # prefix sum -> earliest index\n    prefix = 0\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix += val\n        target = prefix - k                   # we want prefix[j] = prefix - k\n        if target in prefix_sum_first_index:\n            best = max(best, i - prefix_sum_first_index[target])\n\n        # store first occurrence only\n        if prefix not in prefix_sum_first_index:\n            prefix_sum_first_index[prefix] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:- The first line contains a single integer n (1 ≤ n ≤ 10^5).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:- Output a single integer: the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Count evens and odds while reading\n    even = odd = 0\n    for i in range(1, n + 1):\n        num = int(data[i])\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of pairs with even sum = C(even,2) + C(odd,2)\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}     # prefix sum -> earliest index\n    current_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        current_sum += num\n\n        if (current_sum - k) in prefix_to_first_index:\n            max_len = max(max_len, i - prefix_to_first_index[current_sum - k])\n\n        # store the first occurrence of this prefix sum\n        if current_sum not in prefix_to_first_index:\n            prefix_to_first_index[current_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements in the subarray is at most 2. Return this length.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Deques to keep indices of current window elements in monotone order\n    max_dq = deque()   # decreasing values -> front is current maximum\n    min_dq = deque()   # increasing values -> front is current minimum\n\n    left = 0           # left end of sliding window\n    best = 0           # best window length found\n\n    for right, value in enumerate(nums):\n        # Maintain max deque (strictly decreasing)\n        while max_dq and nums[max_dq[-1]] < value:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain min deque (strictly increasing)\n        while min_dq and nums[min_dq[-1]] > value:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window from the left until it satisfies max - min <= 2\n        while nums[max_dq[0]] - nums[min_dq[0]] > 2:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray with length exactly k. If there are multiple such subarrays with the same maximum sum, return the leftmost sum. Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the maximum sum of any contiguous subarray of length exactly k.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    # Initial window sum (first k elements)\n    window_sum = sum(nums[:k])\n    best_sum = window_sum  # maximum sum found so far\n    # Slide the window across the array\n    for i in range(k, n):\n        window_sum += nums[i]          # add new element entering the window\n        window_sum -= nums[i - k]      # remove element exiting the window\n        if window_sum > best_sum:      # strictly greater keeps the leftmost tie\n            best_sum = window_sum\n\n    print(best_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the indices of the two numbers in nums that add up to target. You may assume that each input has exactly one solution, and you may not use the same element twice. Return the answer as a pair of indices (i, j) such that i < j.Input:The first line contains two integers n (length of nums) and target.The second line contains n integers representing the elements of nums.Output:Output two integers i and j (0-based indices, i < j), separated by a space.Constraints:2 ≤ n ≤ 10^4  -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    index_map = {}                       # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in index_map:\n            print(index_map[complement], i)\n            return\n        index_map[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains at most two distinct integers. If there are fewer than two distinct integers, return the length of the entire array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the maximum length of a contiguous subarray with at most two distinct integers.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    left = 0\n    freq = defaultdict(int)\n    max_len = 0\n    \n    for right, value in enumerate(nums):\n        freq[value] += 1\n        \n        # Shrink window if we have more than two distinct numbers\n        while len(freq) > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n        \n        # Update maximum length\n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Directly compute using sliding window\n    result = longest_subarray_two_distinct(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    # earliest index at which a given parity (0=even,1=odd) of prefix sum occurred\n    earliest = [-2] * 2      # initiate with impossible indexes\n    earliest[0] = -1         # prefix sum 0 (even) occurs before array starts\n    earliest[1] = None       # haven't encountered odd prefix yet\n\n    max_len = 0\n    prefix = 0\n    for i, val in enumerate(nums):\n        prefix ^= val & 1    # update parity only (0 or 1)\n        if earliest[prefix] is None:\n            earliest[prefix] = i\n        # length of subarray with same parity difference\n        if earliest[prefix] is not None:\n            max_len = max(max_len, i - earliest[prefix])\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of only lowercase English letters. Your task is to determine if S can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. Return \"YES\" if it is possible to rearrange the string into a palindrome, otherwise return \"NO\".Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string S.The second line contains the string S of length N.Output:Output \"YES\" if S can be rearranged into a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters in `s` can be rearranged to form a palindrome.\n    \"\"\"\n    # Count occurrences of each character\n    freq = Counter(s)\n    # Number of characters that appear an odd number of times\n    odd_counts = sum(1 for c in freq.values() if c % 2)\n    # For even-length strings no odd counts allowed, for odd-length at most 1\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:               # no input edge case\n        return\n    n = int(data[0])           # length of the string (not strictly needed)\n    s = data[1] if len(data) > 1 else \"\"\n    # Quick sanity check (optional, but harmless)\n    # If given length doesn't match, rely on actual string length.\n    result = \"YES\" if can_form_palindrome(s) else \"NO\"\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements being distinct. Return the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer, the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. Each pair should be counted only once, regardless of the order of the elements. Input:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:- Print a single integer: the number of unique pairs whose sum is equal to k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    freq = defaultdict(int)   # stores how many times we've seen each value so far\n    pairs = 0\n\n    for num in nums:\n        complement = k - num\n        pairs += freq[complement]   # all earlier occurrences of complement form valid pairs\n        freq[num] += 1              # record current number for future elements\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any one element by 1. Return the minimum number of moves needed.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the minimum number of moves required.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, *nums = data\n    # If n is zero (shouldn't happen by constraints) just print 0.\n    if n == 0:\n        print(0)\n        return\n    # Keep only the first n numbers in case extra were provided.\n    nums = nums[:n]\n    \n    # Sort to find the median.\n    nums.sort()\n    median = nums[n // 2]                       # Works for both odd and even n.\n    \n    # Compute total moves (sum of absolute differences to the median).\n    moves = sum(abs(x - median) for x in nums)\n    \n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of size n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices.  Input:  The first line contains a single integer n (1 ≤ n ≤ 10^5).  The second line contains n integers nums[0], nums[1], ..., nums[n-1] (|nums[i]| ≤ 10^9).  Output:  Print a single integer denoting the number of distinct pairs (i, j) such that nums[i] + nums[j] is even.  Constraints:  1 ≤ n ≤ 10^5  |nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the length of the longest contiguous subarray whose sum is divisible by k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the length of the longest contiguous subarray whose sum is divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    earliest = {0: -1}          # remainder -> first index seen\n    prefix = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix += val\n        rem = prefix % k         # Python's % already yields non-negative result\n        if rem in earliest:\n            max_len = max(max_len, i - earliest[rem])\n        else:\n            earliest[rem] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this missing integer.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output Format:Output a single integer, the smallest positive integer missing from the array.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # The smallest missing positive integer is at most n + 1\n    size = n + 2                    # room for indices 0..n+1\n    present = [False] * size        # present[i] is True if i is in nums\n\n    for x in nums:\n        if 1 <= x < size:           # we only care about 1 .. n+1 inclusive\n            present[x] = True\n\n    # find first index starting from 1 that is not present\n    for i in range(1, size):\n        if not present[i]:\n            print(i)\n            return\n\n# required call\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal, where a move consists of incrementing or decrementing a single element by 1. Return the minimum number of moves.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer representing the minimum number of moves.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Sorting to obtain the median\n    nums.sort()\n    median = nums[n // 2]          # works for both odd and even n\n    \n    # Sum of absolute differences to the median\n    moves = sum(abs(x - median) for x in nums)\n    \n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs (i, j) where i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # number of ways to choose 2 items from k items: k * (k - 1) // 2\n    res = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a contiguous subarray with at least one element. A subarray is a sequence of consecutive elements from the array. Output the maximum sum possible.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer representing the maximum sum of any contiguous subarray.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    current = best = nums[0]\n    for x in nums[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray where the sum of its elements is even. If there are multiple such subarrays of maximal length, output the length of any one of them. If no such subarray exists, output 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:Print a single integer, the length of the longest subarray with an even sum.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # earliest index at which a particular prefix-parity (0 or 1) was first seen\n    earliest = [-1, -1]\n    earliest[0] = 0                     # prefix sum 0 (even) occurs before array starts\n    max_len = 0\n    prefix_parity = 0                   # current prefix parity\n    \n    for i, val in enumerate(nums, 1):   # enumerate from 1 so that length = i - earliest[idx]\n        prefix_parity ^= (val & 1)      # update parity (0=even,1=odd)\n        \n        if earliest[prefix_parity] != -1:\n            max_len = max(max_len, i - earliest[prefix_parity])\n        else:\n            earliest[prefix_parity] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] = target. If such a pair exists, print \"YES\", otherwise print \"NO\".Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exist two distinct indices i and j such that nums[i] + nums[j] = target. Otherwise, print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. Output the maximum possible length.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.The second line contains the string s of length n.Output:Output a single integer — the length of the longest substring of s with all distinct characters.Constraints:1 ≤ n ≤ 10^5s consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains all distinct characters.\n    \"\"\"\n    last_pos = {}           # char -> last index it appeared\n    start = 0               # left border of current window\n    best = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # `ch` is inside the current window -> shrink from the left\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line can be n, second line the string.\n    # But be tolerant if they come on same line or extra blank lines.\n    if len(data) == 1:\n        s = data[0].strip()\n    else:\n        s = data[1].strip()\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the minimum number of elements you need to remove so that the remaining elements are all equal. Output this minimum number.Input Format:The first line contains a single integer N (1 ≤ N ≤ 10^5).  The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^5).Output Format:Print a single integer: the minimum number of elements to remove.Constraints:1 ≤ N ≤ 10^5  1 ≤ a_i ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # safeguard if extra whitespace\n    if n == 0:\n        print(0)\n        return\n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine whether there exist two distinct indices i and j such that the sum of the elements at these indices is equal to a given target number T. If such a pair exists, output \"YES\". Otherwise, output \"NO\".Input:The first line contains two integers N and T (1 ≤ N ≤ 10^5, -10^9 ≤ T ≤ 10^9).The second line contains N integers a_1, a_2, ..., a_N (−10^9 ≤ a_i ≤ 10^9).Output:Output \"YES\" if there exist two distinct indices i and j such that a_i + a_j = T. Otherwise, output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, target = data[0], data[1]\n    arr = data[2:]\n\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Output a single integer: the number of distinct pairs whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    even = sum(1 for x in nums if x % 2 == 0)\n    odd = n - even\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Return the length as an integer.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    \"\"\"Return length of the longest contiguous subarray with all distinct elements.\"\"\"\n    seen = {}\n    left = 0          # left boundary of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            # val is inside current window, move left just past its previous index\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to k. Return the length of this subarray.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    min_dq = deque()   # increasing deque to track current window minimum\n    max_dq = deque()   # decreasing deque to track current window maximum\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain deques: min_dq increasing, max_dq decreasing\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # Shrink window from the left until condition satisfied\n        while max_dq[0] - min_dq[0] > k:\n            # Remove element leaving window if it equals front of deque\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, output the length of any one of them. If there is no such subarray, output 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer representing the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Compute total sum parity and positions of first/last odd numbers\n    total_parity = 0  # 0 = even, 1 = odd\n    first_odd = -1\n    last_odd = -1\n    \n    for i, val in enumerate(nums):\n        if val & 1:  # odd\n            if first_odd == -1:\n                first_odd = i\n            last_odd = i\n            total_parity ^= 1  # toggles parity\n        else:\n            total_parity ^= 0  # no change\n    \n    # If the whole array already has an even sum\n    if total_parity == 0:\n        print(n)\n        return\n    \n    # Otherwise, remove the shortest prefix up to first odd\n    # or the shortest suffix starting from last odd\n    # and take the longer remaining length\n    max_len = 0\n    if first_odd != -1:\n        max_len = max(max_len, n - (first_odd + 1))\n    if last_odd != -1:\n        max_len = max(max_len, last_odd)\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that is missing from the array. An integer x is considered missing if it does not appear anywhere in nums. Input:The first line contains a single integer n (1 ≤ n ≤ 100,000), the length of the array.The second line contains n space-separated integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Output a single integer — the smallest positive integer missing from nums.Constraints:- 1 ≤ n ≤ 100,000- −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Boolean presence array for numbers 1..n+1 (at most n+1 needed)\n    present = [False] * (n + 2)     # indices 0..n+1\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # Find the first index i (from 1) that is False\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in the array. Return this integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), representing the elements of the array.Output:Print a single integer — the smallest positive integer missing from the array.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Boolean array to mark presence of numbers 1 .. n+1\n    present = [False] * (n + 2)          # indices 0..n+1 ; we ignore index 0\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # First index (starting from 1) that is still False is the answer\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of the minimum element of every contiguous subarray of nums. As the answer can be very large, return it modulo 10^9 + 7.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^4).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^5), separated by spaces.Output Format:Print a single integer — the sum of the minimum element of every contiguous subarray of nums, modulo 10^9 + 7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef sum_subarray_mins(nums):\n    n = len(nums)\n\n    # Previous Less Element index\n    ple = [-1] * n\n    stack = []\n    for i, x in enumerate(nums):\n        # strictly less\n        while stack and nums[stack[-1]] > x:\n            stack.pop()\n        ple[i] = stack[-1] if stack else -1\n        stack.append(i)\n\n    # Next Less-or-Equal Element index\n    nle = [n] * n\n    stack.clear()\n    for i in range(n - 1, -1, -1):\n        x = nums[i]\n        # less or equal\n        while stack and nums[stack[-1]] >= x:\n            stack.pop()\n        nle[i] = stack[-1] if stack else n\n        stack.append(i)\n\n    total = 0\n    for i, x in enumerate(nums):\n        left = i - ple[i]\n        right = nle[i] - i\n        total = (total + x * left * right) % MOD\n    return total\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(sum_subarray_mins(nums) % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum possible sum of a non-empty subarray (contiguous elements) of nums. The subarray must contain at least one element.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer — the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    best = cur = nums[0]\n    for x in nums[1:]:\n        cur = x if cur + x < x else cur + x  # equivalent to cur = max(x, cur + x)\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine the length of the longest contiguous subarray whose sum is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) representing the elements of the array.Output:Print a single integer representing the length of the longest contiguous subarray with an even sum.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # first_occurrence[parity] stores the earliest index where a prefix\n    # sum with that parity was seen. We start with prefix sum 0 (even) at index 0.\n    first_occurrence = {0: 0, 1: None}\n\n    prefix_parity = 0   # current prefix parity (0 for even, 1 for odd)\n    max_len = 0\n\n    # Traverse the array and update prefix parity.\n    for i in range(1, n + 1):\n        prefix_parity ^= (nums[i - 1] & 1)  # add current number's parity\n        if first_occurrence[prefix_parity] is None:\n            # first time we see this parity\n            first_occurrence[prefix_parity] = i\n        else:\n            # subarray (first_occurrence[p] .. i-1) has even sum\n            max_len = max(max_len, i - first_occurrence[prefix_parity])\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. Each input will have exactly one solution, and you may not use the same element twice. The answer can be returned in any order.Input:- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9), where n is the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), representing the array.Output:- Output two integers, the 0-based indices of the two numbers whose sum equals target.Constraints:- Exactly one valid answer exists.- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read the first line: n (array length) and target value\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, target = int(data[0]), int(data[1])\n\n    # Read second line: n integers in the array\n    nums = list(map(int, sys.stdin.readline().strip().split()))\n\n    # Hash map to store value -> index\n    seen = {}\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            # Found the pair – output indices and terminate\n            print(seen[complement], idx)\n            return\n        seen[num] = idx\n\n# Call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum sum of a non-empty subsequence such that no two selected elements are adjacent in the original array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output:Output a single integer, the maximum possible sum as described above.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().strip().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    if n == 0:\n        return\n\n    # dp0: best sum so far when we skip current index\n    # dp1: best sum so far when we take current index\n    dp0 = 0\n    dp1 = -10**18        # effectively -inf for our constraints\n\n    for x in nums:\n        new_dp1 = dp0 + x\n        new_dp0 = dp0 if dp0 >= dp1 else dp1  # max(dp0, dp1)\n        dp0, dp1 = new_dp0, new_dp1\n\n    result = dp0 if dp0 >= dp1 else dp1   # max(dp0, dp1)\n\n    # Ensure the subsequence is non-empty\n    if result == 0:\n        if 0 in nums:              # we can choose at least one zero\n            print(0)\n        else:                      # all numbers are negative\n            print(max(nums))\n    else:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray with all elements distinct. That is, determine the maximum length of a subarray in which no element repeats.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums_i (1 ≤ nums_i ≤ 10^9), the elements of the array.Output:Print a single integer, the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, determine whether it is possible to divide the list into two non-empty subsets such that the sum of the numbers in each subset is equal. If possible, output \"YES\", otherwise output \"NO\".Input:The first line contains an integer n (2 ≤ n ≤ 20).The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000).Output:Output \"YES\" if it is possible to partition the list into two non-empty subsets with equal sums, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition_equal_subset(nums):\n    \"\"\"\n    Returns True if `nums` can be split into two non-empty subsets\n    having the same sum, otherwise False.\n    \"\"\"\n    total = sum(nums)\n    # The total must be even for two equal parts to exist\n    if total % 2:\n        return False\n\n    target = total // 2\n    n = len(nums)\n\n    # Enumerate all non-empty, non-full subsets using bitmasks\n    # n ≤ 20  ⇒  at most 2^20 ≈ 1 048 576 masks → easily fast enough\n    full_mask = (1 << n) - 1\n    for mask in range(1, full_mask):          # skip empty subset (0)\n        if mask == full_mask:                 # skip full set (trivial complement empty)\n            continue\n        current_sum = 0\n        # accumulate sum of elements belonging to this mask\n        for i in range(n):\n            if mask & (1 << i):\n                current_sum += nums[i]\n        if current_sum == target:\n            return True\n    return False\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    answer = \"YES\" if can_partition_equal_subset(nums) else \"NO\"\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains at most two distinct numbers. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n space-separated integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    \"\"\"\n    Sliding–window solution that keeps counts of the numbers currently\n    inside the window.  Whenever the window holds more than two distinct\n    values, move the left border to shrink it again.\n    \"\"\"\n    count = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        count[value] += 1\n\n        # shrink window until it contains at most two distinct numbers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        # update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    if n == 0:\n        # Problem statement says n ≥ 1, but handle defensively\n        print(0)\n        return\n\n    result = longest_subarray_at_most_two(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Output the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Print a single integer representing the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> last index seen\n    left = 0                 # left boundary of the current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If we've seen this value and it's inside the current window, move 'left'\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:n+1]        # ensure we only take n numbers\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is divisible by a given integer k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is divisible by k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    prefix_remainder_first_index = {0: -1}    # remainder 0 seen at virtual index -1\n    prefix_sum = 0\n    longest = 0\n\n    for idx, num in enumerate(nums):\n        prefix_sum += num\n        remainder = prefix_sum % k\n\n        # First time seeing this remainder: record its position\n        if remainder not in prefix_remainder_first_index:\n            prefix_remainder_first_index[remainder] = idx\n        else:\n            # Subarray between first occurrence +1 and current idx has sum divisible by k\n            candidate_len = idx - prefix_remainder_first_index[remainder]\n            if candidate_len > longest:\n                longest = candidate_len\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray such that the absolute difference between any two elements in this subarray is at most 1. The subarray must be contiguous. Return the length of this longest subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Sliding-window with two monotone deques that keep\n    the current window’s minimum and maximum.\n    \"\"\"\n    n = len(nums)\n    max_dq = deque()        # indices, monotone decreasing by value\n    min_dq = deque()        # indices, monotone increasing by value\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques with the new element\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum of a contiguous subarray. The subarray must contain at least one element. Print the maximum sum.Input Format:The first line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the array.  The second line contains N integers A_1, A_2, ..., A_N, where -10^4 ≤ A_i ≤ 10^4.Output Format:Print a single integer, the maximum sum of a contiguous subarray.Constraints:1 ≤ N ≤ 10^5  -10^4 ≤ A_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # For safety handle cases where input may have less numbers than declared,\n    # slice accordingly.\n    arr = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to rearrange the elements of nums such that the difference between any two adjacent elements is at most 1. If it is possible, output \"YES\", otherwise output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output \"YES\" if it is possible to rearrange the array as described, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Collect distinct values\n    distinct_values = set(nums)\n    k = len(distinct_values)\n\n    # If the range equals (k - 1), the values are consecutive\n    if max(distinct_values) - min(distinct_values) == k - 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of pairs with even sum: choose 2 evens + choose 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find two distinct indices i and j (i < j) such that nums[i] + nums[j] == target. If such a pair exists, print the indices i and j (0-based). If no such pair exists, print -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print two integers i and j if such a pair exists, otherwise print -1 -1.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        target = int(next(it))\n    except StopIteration:\n        return\n    \n    nums = [int(next(it)) for _ in range(n)]\n    \n    seen = {}  # value -> index\n    for j, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            i = seen[complement]\n            print(i, j)\n            return\n        # store only first occurrence to keep i < j\n        if num not in seen:\n            seen[num] = j\n    # no pair found\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single integer: the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4-10^9 ≤ k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_index = {0: -1}   # prefix_sum : earliest index where it occurs\n    prefix_sum = 0\n    best_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # If we have seen (prefix_sum - k) before, subarray (that_index+1 .. i) sums to k\n        wanted = prefix_sum - k\n        if wanted in prefix_to_index:\n            best_len = max(best_len, i - prefix_to_index[wanted])\n        \n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n    \n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. If there are multiple such subarrays with the same maximum length, return the length only.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^6) separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}                # value -> last index seen\n    left = 0                     # left boundary of current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window → shrink from left\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        curr_len = right - left + 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k.  Input Format:  The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).  The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).  Output Format:  Print a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"Return length of longest contiguous subarray with max-min ≤ k.\"\"\"\n    max_dq = deque()  # indices of elements, values decreasing\n    min_dq = deque()  # indices of elements, values increasing\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain decreasing deque for max\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain increasing deque for min\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of pairs (i, j) where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])           # length of the array (not really needed after reading)\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick two evens + two odds\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest missing positive integer greater than 0 that does not appear in the array. Your solution should run in O(n) time and use constant extra space.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.  The second line contains n space-separated integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output Format:Output a single integer, the smallest missing positive integer.Constraints:1 ≤ n ≤ 10^5  −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef first_missing_positive(nums):\n    n = len(nums)\n\n    # 1) Throw away useless numbers (≤0 or > n)\n    for i in range(n):\n        if nums[i] <= 0 or nums[i] > n:\n            nums[i] = n + 1          # any value > n works as a sentinel\n\n    # 2) Use indices 0 … n-1 to record presence of values 1 … n\n    for i in range(n):\n        val = abs(nums[i])\n        if 1 <= val <= n:\n            idx = val - 1\n            if nums[idx] > 0:        # make it negative once to mark “seen”\n                nums[idx] = -nums[idx]\n\n    # 3) First positive index ⇒ smallest missing positive\n    for i in range(n):\n        if nums[i] > 0:\n            return i + 1\n\n    # 4) If every 1 … n is present, answer is n + 1\n    return n + 1\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    print(first_missing_positive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, you only need to output the length of any one of them. If no such subarray exists, output 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # earliest index at which a particular parity (0 even, 1 odd) of prefix sum appears\n    earliest = {0: -1}      # prefix sum 0 (even) occurs before the array starts\n    prefix_parity = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_parity ^= (val & 1)     # update parity (XOR with val's parity)\n\n        if prefix_parity in earliest:\n            # subarray (earliest[prefix_parity] + 1 … i) has even sum\n            max_len = max(max_len, i - earliest[prefix_parity])\n        else:\n            # first time this parity is seen, record its index\n            earliest[prefix_parity] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If no such subarray exists, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Output a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    # Maps prefix_sum to its earliest index\n    prefix_index = {0: -1}          # sum==k starting at 0 handled\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k, subarray (prev_index+1 ... i) sums to k\n        if (prefix_sum - k) in prefix_index:\n            max_len = max(max_len, i - prefix_index[prefix_sum - k])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. A subarray is a sequence of consecutive elements from the array. If all elements are the same, return 1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    seen = {}\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        # if val seen and its last index within current window, move left\n        if val in seen and seen[val] >= left:\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this missing integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the smallest positive integer missing from the array.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n\n    # Boolean array to mark presence of numbers from 1 .. n+1\n    # The answer can never exceed n+1\n    present = [False] * (n + 2)\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # First index (starting from 1) that is absent is the answer\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Your task is to find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, output the length of the longest one.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9), the elements of the array.Output Format:Print a single integer — the length of the longest contiguous subarray with even sum.Constraints:1 ≤ n ≤ 10^5|a_i| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1+n]))\n    \n    # first_pos[parity] stores the earliest index where the given\n    # prefix-sum parity was seen.  We start with prefix sum = 0 at index 0.\n    first_pos = {0: 0, 1: None}\n    \n    longest = 0          # best subarray length found so far\n    parity = 0           # running parity of the prefix sum (0 = even, 1 = odd)\n    \n    for idx, val in enumerate(a, 1):   # indices run from 1 .. n (inclusive)\n        parity ^= (val & 1)            # update parity (since only parity matters)\n        \n        if first_pos[parity] is None:  # first time we see this parity\n            first_pos[parity] = idx\n        else:\n            # subarray (first_pos[parity], idx] has even sum\n            longest = max(longest, idx - first_pos[parity])\n    \n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Split nums into even and odd counts\n    cnt_even = cnt_odd = 0\n    for i in range(1, n + 1):\n        if int(data[i]) & 1:\n            cnt_odd += 1\n        else:\n            cnt_even += 1\n\n    # Number of pairs with even sum:\n    # choose 2 evens + choose 2 odds\n    ans = cnt_even * (cnt_even - 1) // 2 + cnt_odd * (cnt_odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements. If the array is empty, return 0.Input:The first line contains an integer n (0 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:0 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    containing all distinct elements.\n    \"\"\"\n    last_pos = {}        # maps value -> last index it appeared at\n    start = 0            # left boundary of current window\n    best = 0\n\n    for i, v in enumerate(nums):\n        if v in last_pos and last_pos[v] >= start:\n            # duplicate inside current window, move start\n            start = last_pos[v] + 1\n        last_pos[v] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n    nums = list(map(int, data[1:1 + n]))  # safe even if extra spaces/newlines\n    ans = longest_distinct_subarray_length(nums)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all unique elements (no repeated numbers). If there are multiple such subarrays with the same maximum length, output the length only.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    last_index = {}\n    left = 0\n    best = 0\n\n    for right, val in enumerate(arr):\n        # If we've seen `val` and it's inside the current window,\n        # move the left boundary just past its previous occurrence.\n        if val in last_index and last_index[val] >= left:\n            left = last_index[val] + 1\n        # Record/refresh last position of `val`.\n        last_index[val] = right\n        # Update answer.\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    max_deque = deque()   # indices of elements, non-increasing values\n    min_deque = deque()   # indices of elements, non-decreasing values\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain max deque (front is current maximum)\n        while max_deque and val > nums[max_deque[-1]]:\n            max_deque.pop()\n        max_deque.append(right)\n\n        # Maintain min deque (front is current minimum)\n        while min_deque and val < nums[min_deque[-1]]:\n            min_deque.pop()\n        min_deque.append(right)\n\n        # Shrink window until it satisfies the condition\n        while nums[max_deque[0]] - nums[min_deque[0]] > k:\n            if max_deque[0] == left:\n                max_deque.popleft()\n            if min_deque[0] == left:\n                min_deque.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray with all elements distinct.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the length of the longest contiguous subarray in which all the elements are distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_index = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        last_index[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] == target. Each pair should be counted only once, regardless of how many times the elements appear in the array. Output the count.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the number of distinct pairs whose sum equals target.Constraints:1 ≤ n ≤ 10^4-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen_numbers = set()       # numbers encountered so far\n    unique_pairs = set()       # store each distinct (min, max) pair only once\n\n    for num in nums:\n        complement = target - num\n        if complement in seen_numbers:\n            pair = (min(num, complement), max(num, complement))\n            unique_pairs.add(pair)\n        seen_numbers.add(num)\n\n    print(len(unique_pairs))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine the maximum sum of any contiguous subarray (a subarray is a sequence of consecutive elements from the original array). If all numbers are negative, the maximum sum is the largest single element.Input:The first line contains an integer N (1 ≤ N ≤ 10^5).The second line contains N integers A1, A2, ..., AN (−10^4 ≤ Ai ≤ 10^4).Output:Print a single integer representing the maximum sum of any contiguous subarray.Constraints:1 ≤ N ≤ 10^5−10^4 ≤ Ai ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    \"\"\"\n    Returns the maximum sum of a contiguous sub-array.\n    Handles the 'all negative' case naturally by starting with the first element.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at current element\n        max_ending_here = max(x, max_ending_here + x)\n        # Track the best we have seen so far\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    # In case the provided N doesn't match the number of integers, slice defensively\n    result = kadane(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any non-empty subarray. A subarray is a contiguous sequence of elements within the array. Print the maximum sum.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer representing the maximum subarray sum.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    best = cur = nums[0]\n    for x in nums[1:]:\n        cur = max(x, cur + x)  # either start new subarray at x or extend\n        best = max(best, cur)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of elements you must remove from the array so that the remaining elements are all equal. You may remove any element any number of times. Return the minimum number of removals required.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer representing the minimum number of removals needed.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # ensure we only take n numbers\n    if n == 0:\n        print(0)\n        return\n    \n    freq = Counter(nums)\n    max_freq = max(freq.values(), default=0)\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is divisible by k. Two pairs (i1, j1) and (i2, j2) are considered different if i1 ≠ i2 or j1 ≠ j2.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of unique pairs (i, j) where i < j and nums[i] + nums[j] is divisible by k.Constraints:1 ≤ n ≤ 10^5  1 ≤ k ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = map(int, data)\n    n = next(it)\n    k = next(it)\n    \n    freq = [0] * k          # frequency of each remainder seen so far\n    pairs = 0\n    \n    for _ in range(n):\n        num = next(it)\n        r = num % k\n        comp = (-r) % k      # same as (k - r) % k but avoids k % k == 0 case\n        pairs += freq[comp]\n        freq[r] += 1\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a contiguous portion of the array. Return the length of the longest such subarray.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer: the length of the longest subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    seen = dict()              # value -> latest index\n    left = 0                   # left boundary of the window\n    best = 0\n\n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            # duplicate inside the window, move left just after previous occurrence\n            left = seen[val] + 1\n        seen[val] = right       # update latest position\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray containing only unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}                # value -> last index seen\n    left = 0                     # left end of current window\n    max_len = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window: move left past last occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays, return the sum of the leftmost one. If k > n, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Print a single integer representing the answer.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    \n    # If k > n, no window of size k exists.\n    if k > n:\n        print(0)\n        return\n    \n    nums = list(map(int, data[2:2 + n]))  # exactly n numbers\n    \n    # Initial window sum (first k elements)\n    window_sum = sum(nums[:k])\n    max_sum = window_sum   # best sum found so far\n    \n    # Slide the window from left to right\n    for i in range(k, n):\n        window_sum += nums[i]          # add new element\n        window_sum -= nums[i - k]      # remove element leaving the window\n        \n        if window_sum > max_sum:\n            max_sum = window_sum       # strictly greater ensures left-most retained\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.  Input Format:  The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.  Output Format:  Output a single integer: the number of valid pairs (i, j) as described above.  Constraints:  1 ≤ n ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]                       # length of the array\n    nums = data[1:]\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for x in nums:\n        if x & 1:                     # odd\n            odd_cnt += 1\n        else:                         # even\n            even_cnt += 1\n\n    # number of pairs with even sum:\n    # choose any two evens OR any two odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Your task is to determine whether S is a palindrome. A palindrome is a string that reads the same backward as forward.Input:The first line contains a single string S (1 ≤ |S| ≤ 1000), consisting only of lowercase English letters.Output:Print \"Yes\" if S is a palindrome, otherwise print \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read the input string, stripping the trailing newline (if any)\n    s = sys.stdin.readline().rstrip('\\n')\n    \n    # Check if the string is a palindrome\n    if s == s[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Execute the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays with the same maximum sum, return the one that appears first. Output the starting and ending indices (0-based) of the subarray.Input Format:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:Output two integers representing the starting and ending indices of the subarray with the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # Initial window [0, k-1]\n    window_sum = sum(nums[:k])\n    best_sum = window_sum\n    best_start = 0\n\n    # Slide the window\n    for right in range(k, n):\n        window_sum += nums[right] - nums[right - k]\n\n        # Update the best window only if we find a strictly larger sum.\n        # This keeps the first occurrence when sums are equal.\n        if window_sum > best_sum:\n            best_sum = window_sum\n            best_start = right - k + 1\n\n    print(best_start, best_start + k - 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays, return the sum corresponding to the first one found (with the smallest starting index).Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer, the maximum sum as described.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Initial window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i]          # add the new element\n        window_sum -= nums[i - k]      # remove the element that slides out\n        \n        if window_sum > max_sum:       # only update on strictly greater\n            max_sum = window_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of unique pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Count evens and odds\n    evens = odds = 0\n    for x in map(int, data[1: 1 + n]):\n        if x & 1:\n            odds += 1\n        else:\n            evens += 1\n    # Pairs with even sum: both even or both odd\n    res = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] == k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^4, -10^9 ≤ k ≤ 10^9), where n is the length of the array and k is the target sum.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    freq = defaultdict(int)\n    pairs = 0\n\n    for num in nums:\n        complement = k - num\n        pairs += freq[complement]          # existing numbers that form a pair with current\n        freq[num] += 1                     # add current number for future pairs\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the length of the longest contiguous subarray with all distinct elements. Return the length as an integer.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> latest index seen\n    left = 0                 # left edge of current window\n    best = 0\n\n    for right, val in enumerate(nums):\n        # if val already in window, shrink from the left\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer — the number of pairs (i, j) where the sum nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = data[1:]  # bytes\n    even = 0\n    for i in range(n):\n        # Convert to int and check parity\n        if int(nums[i]) & 1 == 0:\n            even += 1\n    odd = n - even\n    # Number of pairs with even sum = C(even,2) + C(odd,2)\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray with sum equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                         # no input edge-case\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_sum = 0\n    first_pos = {0: -1}                  # prefix_sum : earliest index\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If a previous prefix gives the needed difference, update best length\n        need = prefix_sum - k\n        if need in first_pos:\n            best = max(best, i - first_pos[need])\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in first_pos:\n            first_pos[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, count the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] == k. Each pair should be counted only once, regardless of the order of the numbers. Return the total number of such pairs.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the number of distinct pairs whose sum is equal to k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nfrom collections import Counter\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n  = int(data[0])\n    k  = int(data[1])\n    # read exactly n numbers that follow\n    nums = list(map(int, data[2:2 + n]))\n    \n    freq = Counter(nums)\n    pairs = 0\n    \n    for x in freq:\n        y = k - x\n        if y not in freq:\n            continue\n        \n        # ensure each unordered pair is counted once\n        if x < y:\n            pairs += 1\n        elif x == y and freq[x] >= 2:\n            pairs += 1\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the smallest positive integer that does not appear in nums. If all positive integers up to n are present, return n+1.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6), representing the elements of the array.Output:Print a single integer: the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Boolean presence array for 1 .. n+1\n    present = [False] * (n + 2)        # index 0 unused\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # First index i (>=1) that is False is the answer\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray (contiguous elements) that contains at most two distinct integers.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest subarray with at most two distinct integers.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        # Shrink window if we have more than two distinct numbers\n        while len(freq) > 2:\n            drop_val = nums[left]\n            freq[drop_val] -= 1\n            if freq[drop_val] == 0:\n                del freq[drop_val]\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    ans = longest_subarray_at_most_two(nums)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Print the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer, the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    min_deque = deque()  # increasing values, front is current min\n    max_deque = deque()  # decreasing values, front is current max\n\n    best = 0\n    left = 0\n\n    for right, val in enumerate(nums):\n        # insert into min deque\n        while min_deque and min_deque[-1] > val:\n            min_deque.pop()\n        min_deque.append(val)\n\n        # insert into max deque\n        while max_deque and max_deque[-1] < val:\n            max_deque.pop()\n        max_deque.append(val)\n\n        # shrink window until condition satisfied\n        while max_deque[0] - min_deque[0] > 1:\n            if nums[left] == min_deque[0]:\n                min_deque.popleft()\n            if nums[left] == max_deque[0]:\n                max_deque.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Output a single integer: the number of distinct (i, j) pairs (with i < j) whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of pairs with both even + number of pairs with both odd\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether there exist two distinct indices i and j such that nums[i] + nums[j] == 0. If such a pair exists, output \"YES\". Otherwise, output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single line: \"YES\" if there exists such a pair, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    freq = Counter(nums)\n\n    for x in freq:\n        if -x in freq and (x != 0 or freq[x] >= 2):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine if it is possible to rearrange the elements of nums to form an arithmetic progression (a sequence where the difference between consecutive elements is constant). If possible, print \"YES\", else print \"NO\".Input:The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" (without quotes) if the array can be rearranged to form an arithmetic progression, otherwise output \"NO\".Constraints:2 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_form_arithmetic_progression(nums):\n    n = len(nums)\n    \n    # For two elements the answer is always YES\n    if n == 2:\n        return True\n\n    nums.sort()\n    d = nums[1] - nums[0]           # common difference expected\n\n    for i in range(2, n):\n        if nums[i] - nums[i - 1] != d:\n            return False\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n    \n    print(\"YES\" if can_form_arithmetic_progression(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of pairs (i, j) where i < j and nums[i] + nums[j] is divisible by k.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^3), the length of the array and the divisor.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Frequency of each remainder modulo k\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    # Pairs where both numbers give remainder 0\n    res = freq[0] * (freq[0] - 1) // 2\n\n    # Pairs with complementary remainders r and k - r\n    for r in range(1, (k + 1) // 2):\n        res += freq[r] * freq[k - r]\n\n    # Special case when k is even: remainder exactly k/2 pairs with itself\n    if k % 2 == 0:\n        res += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).Output:Output a single integer — the length of the longest contiguous subarray with sum equal to K. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    A = [int(next(it)) for _ in range(N)]\n\n    prefix_to_first_index = {0: -1}       # prefix sum -> earliest position\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(A):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - K before, subarray (prev_index+1 ... i) sums to K\n        target = prefix_sum - K\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > max_len:\n                max_len = length\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the length of the longest contiguous subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    seen = dict()          # value -> last index\n    left = 0               # left end of current window\n    best = 0               # best window length found\n\n    for right, val in enumerate(nums):\n        if val in seen and seen[val] >= left:\n            # duplicate inside current window; move left past its last position\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) with i < j such that nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of pairs (i, j) with i < j such that nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + 2 odds\n    def pairs(cnt):\n        return cnt * (cnt - 1) // 2\n\n    result = pairs(even_count) + pairs(odd_count)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray such that the sum of its elements is exactly k. If no such subarray exists, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:- Print a single integer representing the length of the longest subarray with sum exactly k.Constraints:- 1 ≤ n ≤ 10^5- |k| ≤ 10^9- |nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n  = int(next(it))\n    k  = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix_sum -> earliest index where this sum occurs\n    first_occurrence = {0: -1}        # sum 0 before the array starts\n    prefix_sum = 0\n    longest = 0\n\n    for idx, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there is a previous prefix with value prefix_sum - k,\n        # the subarray (previous_index+1 .. idx) sums to k.\n        target = prefix_sum - k\n        if target in first_occurrence:\n            longest = max(longest, idx - first_occurrence[target])\n\n        # Store earliest position for each prefix sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = idx\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements distinct. A subarray is a contiguous part of the array. Output the maximum possible length.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the array elements.Output:Output a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_index = {}\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        last_index[value] = right\n        curr_len = right - left + 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_unique_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to rearrange the elements of nums to form an arithmetic progression (a sequence where the difference between consecutive elements is constant).Input:The first line contains an integer n (2 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print \"YES\" if it is possible to rearrange nums into an arithmetic progression, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_form_arithmetic_progression(nums):\n    n = len(nums)\n    if n <= 2:\n        return True                           # Any 1–2 numbers trivially form an AP.\n\n    nums.sort()\n    d = nums[1] - nums[0]                    # Common difference candidate.\n\n    for i in range(2, n):\n        if nums[i] - nums[i - 1] != d:       # Difference breaks → impossible.\n            return False\n    return True\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(\"YES\" if can_form_arithmetic_progression(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray where the sum of its elements is strictly less than k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^4).Output:Output a single integer: the length of the longest subarray with sum strictly less than k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    left = 0\n    current_sum = 0\n    best = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n\n        # Shrink the window until its sum becomes strictly less than k\n        while left <= right and current_sum >= k:\n            current_sum -= nums[left]\n            left += 1\n\n        # Now the subarray nums[left:right+1] (if any) has sum < k\n        window_len = right - left + 1\n        if window_len > best:\n            best = window_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray with length exactly k (1 ≤ k ≤ n). Return this maximum sum.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Output a single integer, the maximum sum of any contiguous subarray of length k.Constraints:1 ≤ k ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # Initial sum of the first `k` elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window from index `k` to `n-1`\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of all elements is strictly greater than 0. If no such subarray exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer, the length of the longest contiguous subarray with sum > 0.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_positive_subarray(nums):\n    \"\"\"\n    Returns the maximum length of a contiguous sub-array whose sum is > 0.\n    \"\"\"\n    n = len(nums)\n\n    # Prefix sums: pref[0] = 0, pref[k] = sum(nums[0 .. k-1])\n    pref = [0]*(n+1)\n    for i in range(n):\n        pref[i+1] = pref[i] + nums[i]\n\n    # Step 1: build a stack of indices with strictly decreasing prefix values.\n    # `stack` will hold candidate left endpoints (small prefix sums, far left).\n    stack = []\n    for idx, val in enumerate(pref):\n        if not stack or val < pref[stack[-1]]:     # strictly smaller\n            stack.append(idx)\n\n    # Step 2: sweep from the right, try to widen (i, j) while pref[i] < pref[j].\n    best = 0\n    for j in range(n, -1, -1):                     # j goes n … 0\n        while stack and pref[stack[-1]] < pref[j]:\n            i = stack.pop()\n            best = max(best, j - i)                # j > i guaranteed here\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_positive_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that is missing from the array. For example, if nums = [3, 4, -1, 1], the answer is 2. Your solution must run in O(n) time and use O(1) additional space (excluding the input array).  Input:  The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6), the elements of the array.  Output:  Print a single integer: the smallest positive integer missing from the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef first_missing_positive(nums):\n    n = len(nums)\n    for i in range(n):\n        # Place nums[i] to its correct position if possible\n        while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]:\n            correct_idx = nums[i] - 1\n            nums[i], nums[correct_idx] = nums[correct_idx], nums[i]\n    # After placement, the first index that doesn't satisfy nums[i] == i+1\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    return n + 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(first_missing_positive(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of size n, find the length of the longest contiguous subarray with all distinct elements.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}          # value -> last index it appeared at\n    left = 0               # left end of current window\n    best = 0               # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate inside current window, move left past its last position\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the minimum number of moves required to make all array elements equal. In each move, you may increment or decrement exactly one element by 1. Two elements can be changed in the same move as long as only one unit is changed per operation. Output the minimum number of moves required.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer — the minimum number of moves required.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Sort to obtain the median\n    nums.sort()\n    median = nums[n // 2]          # works for both even and odd n\n    \n    # Minimum moves is the sum of absolute deviations from the median\n    moves = sum(abs(x - median) for x in nums)\n    \n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all elements equal, where a move consists of incrementing or decrementing a single element by 1. Return the minimum number of moves.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Sort to get the median\n    nums.sort()\n    median = nums[n // 2]                  # For even n, either middle works\n\n    moves = sum(abs(x - median) for x in nums)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray with all elements equal. A subarray is a contiguous part of the array. If there are multiple such subarrays, output the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the length of the longest subarray with all elements equal.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # ensure we only take n numbers\n\n    # Handle edge case when n == 0 (though constraints say n >= 1)\n    if n == 0:\n        print(0)\n        return\n\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, n):\n        if nums[i] == nums[i - 1]:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n            current_len = 1  # reset for new value\n\n    # Final comparison for the last run\n    if current_len > max_len:\n        max_len = current_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. If all positive integers up to n are present, output n + 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers, nums[i] (−10^6 ≤ nums[i] ≤ 10^6), representing the array elements.Output:Print a single integer: the smallest missing positive integer.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Boolean presence array for values 1 .. n\n    present = [False] * (n + 2)          # index 0 unused; size n+2 allows direct access up to n\n\n    for x in nums:\n        if 1 <= x <= n:\n            present[x] = True\n\n    # Find the first positive integer that is not present\n    for i in range(1, n + 1):\n        if not present[i]:\n            print(i)\n            return\n\n    # All 1..n are present\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. Return the length as an integer.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray with all elements distinct.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    seen = {}\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If value already seen and its last occurrence is inside the current window\n        if value in seen and seen[value] >= left:\n            # Move the left boundary right after the last occurrence\n            left = seen[value] + 1\n        # Record/Update the last index of the current value\n        seen[value] = right\n        # Update maximum length\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the total number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the total number of pairs (i, j) where nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers, determine if it is possible to rearrange the elements to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Print \"YES\" if such a rearrangement is possible, otherwise print \"NO\".Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list.The second line contains n integers ai (1 ≤ ai ≤ 10^6), separated by spaces.Output:Print \"YES\" if the list can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n    freq = Counter(nums)\n    odd_count = sum(1 for c in freq.values() if c & 1)\n    print(\"YES\" if odd_count <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum sum of any contiguous subarray of length exactly k. The subarray must contain k consecutive elements from the original list. If there are multiple subarrays with the same maximum sum, return the first one (i.e., the one with the smallest starting index).Input Format:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).Output Format:Output a single integer — the maximum sum of any contiguous subarray of length exactly k.Constraints:1 ≤ k ≤ n ≤ 10^5|a_i| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window sum (first k elements)\n    current_sum = sum(nums[:k])\n    max_sum = current_sum           # best sum so far\n    # Since we only have to output the sum, we do not need to track the index.\n    # But if tie-breaking by earliest index were required, we'd track it here.\n    \n    # Slide the window from position k to n-1\n    for i in range(k, n):\n        current_sum += nums[i] - nums[i - k]  # add new element, remove old one\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if you can rearrange the letters of S to form a palindrome. If it is possible, output \"YES\", otherwise output \"NO\".Input Format:The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases.Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output Format:For each test case, output \"YES\" if it is possible to rearrange the string into a palindrome, or \"NO\" otherwise.Constraints:1 ≤ T ≤ 100  1 ≤ |S| ≤ 1000  S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged into a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    # For a palindrome, at most one character may have an odd frequency\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    for i in range(1, t + 1):\n        s = data[i].strip()\n        out_lines.append(\"YES\" if can_form_palindrome(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the maximum sum of a non-empty subarray that contains at most one negative number. A subarray is a contiguous part of the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer — the maximum sum of a subarray containing at most one negative number.Constraints:- 1 ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nINF_NEG = -10**18          # sufficiently small number (acts like -∞)\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                       # no input\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    dp0 = INF_NEG    # best sum of subarray ending here with 0 negatives\n    dp1 = INF_NEG    # best sum of subarray ending here with exactly 1 negative\n    ans = INF_NEG\n\n    for x in nums:\n        if x >= 0:\n            # update dp0 (still 0 negatives)\n            dp0_new = max(dp0 + x if dp0 != INF_NEG else INF_NEG, x)\n            # extend existing dp1 (already has its single negative)\n            dp1_new = dp1 + x if dp1 != INF_NEG else INF_NEG\n        else:  # x is negative, so dp0 becomes impossible\n            dp0_new = INF_NEG\n\n            # possibilities for dp1\n            cand_extend = dp1 + x if dp1 != INF_NEG else INF_NEG   # extend existing 1-neg subarray\n            cand_convert = dp0 + x if dp0 != INF_NEG else INF_NEG  # add first negative to 0-neg subarray\n            cand_start   = x                                       # start new subarray with this negative\n            dp1_new = max(cand_extend, cand_convert, cand_start)\n\n        dp0, dp1 = dp0_new, dp1_new\n        ans = max(ans, dp0, dp1)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to find the maximum sum of any contiguous subarray of length k in nums.Input Format:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer representing the maximum sum of any contiguous subarray of length k.Constraints:1 ≤ k ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_of_length_k(nums, k):\n    \"\"\"\n    Returns the maximum sum of any contiguous sub-array of\n    exactly length k within the list nums.\n    \"\"\"\n    # Initial window sum\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window across the array\n    for i in range(k, len(nums)):\n        window_sum += nums[i]          # add the next element\n        window_sum -= nums[i - k]      # remove the element leaving the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = max_subarray_sum_of_length_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"beautiful\" if the sum of its elements is divisible by a given integer k. Count the number of beautiful subarrays in nums.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the number of beautiful subarrays.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^4-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    \n    # Frequency array for prefix sums modulo k\n    freq = [0] * k\n    freq[0] = 1                      # Empty prefix\n    \n    prefix_mod = 0\n    for _ in range(n):\n        num = int(next(it))\n        prefix_mod = (prefix_mod + num) % k\n        freq[prefix_mod] += 1\n    \n    # Count pairs of equal remainders\n    result = 0\n    for f in freq:\n        if f > 1:\n            result += f * (f - 1) // 2\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of the elements in the subarray is exactly equal to a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer, the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, output 0.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:        # no input\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        k = int(next(it))\n    except StopIteration:\n        return\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_idx = {0: -1}   # prefix-sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for idx, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, subarray (prev_idx+1 .. idx) sums to k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_idx:\n            best_len = max(best_len, idx - prefix_to_first_idx[needed])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = idx\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the sum of its elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is equal to k. If there is no such subarray, print 0.Constraints:1 ≤ n ≤ 10^5|a_i| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_index = {0: -1}      # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If there was a prefix with sum = prefix_sum - k,\n        # the subarray (that ends here) sums to k\n        need = prefix_sum - k\n        if need in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[need])\n\n        # Store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray where the absolute difference between any two elements is at most 1. A subarray is a contiguous part of the original array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer, the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_len(nums):\n    max_dq = deque()   # decreasing: front is current max\n    min_dq = deque()   # increasing: front is current min\n\n    best = 0\n    l = 0\n    for r, val in enumerate(nums):\n        # update deques\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(r)\n\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(r)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            l += 1\n            if max_dq[0] < l:\n                max_dq.popleft()\n            if min_dq[0] < l:\n                min_dq.popleft()\n\n        best = max(best, r - l + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_len(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Output a single integer — the length of the longest contiguous subarray whose sum is exactly k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_idx = {0: -1}  # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for idx, num in enumerate(nums):\n        prefix_sum += num\n\n        # If this prefix sum hasn't been seen before, record its earliest index\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = idx\n\n        # Check if there is a previous prefix with value prefix_sum - k\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            length = idx - prefix_to_first_idx[target]\n            if length > max_len:\n                max_len = length\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the smallest positive integer that does not appear in the list. If all positive integers up to N appear, return N+1.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of integers in the list.The second line contains N space-separated integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).Output:Print a single integer: the smallest positive integer not present in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    # Boolean presence array for values 1..N+1\n    present = [False] * (n + 2)     # index 0 unused\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer: the number of pairs (i, j) where nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of pairs from evens + number of pairs from odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest subsequence such that all elements in the subsequence are consecutive integers (the order of elements in the subsequence does not need to be the same as their order in the original array). The subsequence should not contain duplicate elements.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list.- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).Output Format:- Print a single integer: the length of the longest subsequence of consecutive integers.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_consecutive(nums):\n    \"\"\"Return length of longest set of consecutive integers in nums.\"\"\"\n    num_set = set(nums)\n    max_len = 0\n\n    for x in num_set:\n        # only start counting if x is the first element of a sequence\n        if x - 1 not in num_set:\n            current = x\n            length = 1\n            while current + 1 in num_set:\n                current += 1\n                length += 1\n            max_len = max(max_len, length)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_consecutive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. Two pairs are considered different if they have different indices.  Input:  The first line contains two integers n and k (1 ≤ n ≤ 10^4, -10^9 ≤ k ≤ 10^9).  The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).  Output:  Print a single integer — the number of unique pairs that sum to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = defaultdict(int)   # counts of numbers seen so far\n    pairs = 0\n\n    for num in nums:\n        complement = k - num\n        pairs += freq[complement]   # all earlier indices that make the sum k\n        freq[num] += 1              # record current number for future pairs\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only unique elements (no duplicates). If there are multiple such subarrays, return the length of any one of them.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}           # value -> most recent index\n    left = 0                # left boundary of current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        # If value seen inside current window, move left boundary\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in the array. Return this missing integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer: the smallest positive integer missing from nums.Constraints:- 1 ≤ n ≤ 10^5- -10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef first_missing_positive(nums):\n    \"\"\"\n    Returns the smallest positive integer that is not in `nums`.\n    \"\"\"\n    present = set()\n    for x in nums:\n        if x > 0:\n            present.add(x)\n\n    # The answer is in the range [1, len(nums)+1]\n    for candidate in range(1, len(nums) + 2):\n        if candidate not in present:\n            return candidate\n    # Logic guarantees we returned inside the loop.\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    missing = first_missing_positive(nums)\n    print(missing)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray whose elements sum to an even number. If there are multiple such subarrays, output the length of the longest one.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the maximum length of a contiguous subarray with an even sum.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    nums = data[1:]\n\n    # earliest[p] – first index where prefix-sum parity p (0 or 1) appears\n    # latest[p]   – last  index where prefix-sum parity p appears\n    earliest = [0, None]   # prefix sum before reading any element is 0 (even) at index 0\n    latest   = [0, None]\n\n    prefix_parity = 0       # current prefix-sum parity (0 = even, 1 = odd)\n\n    for idx, val in enumerate(nums, start=1):   # idx is length of processed prefix\n        prefix_parity ^= (val & 1)              # update parity (xor with val parity)\n\n        if earliest[prefix_parity] is None:\n            earliest[prefix_parity] = idx\n        latest[prefix_parity] = idx             # always update last occurrence\n\n    max_len = 0\n    for p in (0, 1):\n        if earliest[p] is not None:\n            max_len = max(max_len, latest[p] - earliest[p])\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n (1 ≤ n ≤ 10^5). An \"alternating subarray\" is a contiguous subarray of nums where no two adjacent elements are equal. Find the length of the longest alternating subarray in nums.Input:The first line contains a single integer n.The second line contains n integers nums[1], nums[2], ..., nums[n], separated by spaces.Output:Output a single integer: the length of the longest alternating subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    if n == 0:\n        print(0)\n        return\n\n    max_len = 1  # at least one element\n    curr_len = 1\n\n    for i in range(1, n):\n        if nums[i] != nums[i - 1]:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > max_len:\n            max_len = curr_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is not divisible by a given integer k. If no such subarray exists, output -1.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum is not divisible by k, or -1 if there is none.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    it = map(int, data)\n    n = next(it)\n    k = next(it)\n    nums = [next(it) for _ in range(n)]\n\n    total = sum(nums)\n\n    # If the whole array already satisfies the condition\n    if total % k != 0:\n        print(n)\n        return\n\n    # Find the shortest prefix whose sum is NOT divisible by k\n    prefix_len = None\n    s = 0\n    for i, val in enumerate(nums):\n        s += val\n        if s % k != 0:\n            prefix_len = i + 1\n            break\n\n    # Find the shortest suffix whose sum is NOT divisible by k\n    suffix_len = None\n    s = 0\n    for i in range(n - 1, -1, -1):\n        s += nums[i]\n        if s % k != 0:\n            suffix_len = n - i\n            break\n\n    ans = -1\n    if prefix_len is not None:\n        ans = max(ans, n - prefix_len)\n    if suffix_len is not None:\n        ans = max(ans, n - suffix_len)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If no such subarray exists, return 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    containing all distinct elements.\n    \"\"\"\n    last_pos = {}          # value -> most recent index\n    max_len = 0\n    start = 0              # left boundary of the current window\n    \n    for i, val in enumerate(nums):\n        # If we've seen val inside the current window, move `start`\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n        # Record/update latest position\n        last_pos[val] = i\n        # Update best answer\n        max_len = max(max_len, i - start + 1)\n    \n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    \n    # No data => nothing to do (just in case)\n    if not data:\n        return\n    \n    n = int(data[0])\n    # Handle corner‐case where n == 0 (although constraints say n ≥ 1)\n    if n == 0:\n        print(0)\n        return\n    \n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, your task is to determine whether there exists a pair of distinct indices i and j such that nums[i] + nums[j] equals a given integer target. If such a pair exists, print \"YES\", otherwise print \"NO\".Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print \"YES\" if there exists such a pair, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that is missing from the array. An integer is considered missing if it does not appear anywhere in nums. For example, if nums = [3, 4, -1, 1], the smallest missing positive integer is 2.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Output a single integer representing the smallest missing positive integer.Constraints:- 1 ≤ n ≤ 10^5- −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    present = set(nums)            # store all values that actually exist\n    # The answer is in the range [1, n + 1]\n    for candidate in range(1, n + 2):\n        if candidate not in present:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with a sum equal to a given integer k. If there are multiple such subarrays, return the length of any one. If there is no such subarray, return 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9|nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index where it appears\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, a subarray ending here sums to k\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > best_len:\n                best_len = length\n\n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Output a single integer, the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index where it occurs\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If there was a prefix whose sum is (current prefix - k), then the subarray\n        # between that index + 1 and current i has sum k.\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > longest:\n                longest = length\n\n        # Record the earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of contiguous subarrays that contain exactly k distinct integers.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^4).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^5).Output Format:- Print a single integer: the number of contiguous subarrays with exactly k distinct integers.Constraints:- 1 ≤ k ≤ n ≤ 10^4- 1 ≤ nums[i] ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef subarrays_with_at_most(nums, k):\n    if k < 0:\n        return 0\n    freq = defaultdict(int)\n    left = 0\n    res = 0\n    distinct = 0\n\n    for right, val in enumerate(nums):\n        if freq[val] == 0:\n            distinct += 1\n        freq[val] += 1\n\n        while distinct > k:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                distinct -= 1\n            left += 1\n\n        # all subarrays ending at `right` with start >= `left` have at most k distinct\n        res += right - left + 1\n    return res\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    at_most_k     = subarrays_with_at_most(nums, k)\n    at_most_k_minus_1 = subarrays_with_at_most(nums, k - 1)\n\n    print(at_most_k - at_most_k_minus_1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer — the number of unique pairs with even sums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for x in nums:\n        if x & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to choose 2 evens + 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices differ. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the number of distinct pairs where the sum is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))   # ensure we only take n numbers\n\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Each pair should be counted only once, even if the elements have the same value but are at different positions. Return the total count of such unique pairs.Input:The first line contains two integers n (1 ≤ n ≤ 10^4) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer representing the number of unique pairs whose sum is equal to target.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = set()          # numbers we have iterated over\n    unique_pairs = set()  # store pairs as ordered tuples (small, large)\n\n    for num in nums:\n        comp = target - num\n        if comp in seen:\n            pair = (min(num, comp), max(num, comp))\n            unique_pairs.add(pair)\n        seen.add(num)\n\n    print(len(unique_pairs))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray in which all the elements are distinct. Print the length of this subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer representing the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = {}           # element -> last index seen\n    left = 0                # left end of current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window: shrink from the left\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, your task is to determine whether there exists a pair of distinct indices i and j (i ≠ j) such that the sum of arr[i] and arr[j] is equal to a given target integer k. If such a pair exists, print \"YES\". Otherwise, print \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers arr[1], arr[2], ..., arr[n] (-10^9 ≤ arr[i] ≤ 10^9).Output Format:Print \"YES\" if there exists a pair of indices with the required sum, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))  # Ensure exactly n elements\n    \n    seen = set()\n    for x in arr:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases.For each test case, the input consists of a single line containing the string S (1 ≤ |S| ≤ 10^4).Output:For each test case, output a single integer — the length of the longest substring without repeating characters.Constraints:- 1 ≤ T ≤ 10- 1 ≤ |S| ≤ 10^4- S contains only lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters in s.\n    \"\"\"\n    last_pos = [-1] * 26               # Since the string has only lowercase letters\n    start = 0                          # Left end of current window\n    best = 0\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97             # Map 'a'..'z' -> 0..25\n        if last_pos[idx] >= start:     # Character already in the current window\n            start = last_pos[idx] + 1  # Move start right after the repeated character\n        last_pos[idx] = i              # Update last seen position\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    for i in range(1, t + 1):\n        s = data[i].rstrip('\\n')\n        out_lines.append(str(longest_unique_substring_length(s)))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\n\n# Invoke main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of choosing any two different indices i and j (1 ≤ i, j ≤ n, i ≠ j), and swapping nums[i] and nums[j]. Determine the minimum number of operations required to sort the array in non-decreasing order.Input:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^9).Output:- Print a single integer: the minimum number of swap operations needed to sort the array in non-decreasing order.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimum_swaps_to_sort(arr):\n    n = len(arr)\n    # Pair each element with its index\n    indexed = list(enumerate(arr))         # (index, value)\n    # Sort by value, break ties with the original index to get a permutation\n    indexed.sort(key=lambda x: (x[1], x[0]))\n    \n    # pos[i] = position where element originally at i should go\n    pos = [0] * n\n    for sorted_pos, (orig_idx, _) in enumerate(indexed):\n        pos[orig_idx] = sorted_pos\n\n    visited = [False] * n\n    swaps = 0\n\n    for i in range(n):\n        if visited[i]:\n            continue\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = pos[j]\n            cycle_size += 1\n\n        if cycle_size > 1:\n            swaps += cycle_size - 1\n\n    return swaps\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(minimum_swaps_to_sort(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, return the length of the longest substring without repeating characters.Input Format:The first line contains a single string S (1 ≤ |S| ≤ 10^5).Output Format:Print a single integer representing the length of the longest substring of S that contains all unique characters.Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains all unique characters.\n    Uses a sliding window with last-seen positions. Runs in O(n) time.\n    \"\"\"\n    last_seen = [-1] * 26            # only lowercase letters 'a'..'z'\n    start = 0                        # left edge of the current window\n    best = 0\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97           # map 'a'..'z' -> 0..25\n        if last_seen[idx] >= start:  # character already in current window\n            start = last_seen[idx] + 1\n        last_seen[idx] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S can be rearranged to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".Input:A single line containing the string S (1 ≤ |S| ≤ 1000).Output:Output \"YES\" if the characters of S can be rearranged to form a palindrome, otherwise output \"NO\".Constraints:- 1 ≤ |S| ≤ 1000- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged into a palindrome.\n    A string can be permuted into a palindrome iff the number of characters\n    that appear an odd number of times is at most 1.\n    \"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for cnt in freq.values() if cnt % 2)\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (|nums[i]| ≤ 10^9), representing the elements of the array.Output Format:Output a single integer: the number of pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of pairs among even numbers + number of pairs among odd numbers\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine the length of the longest subarray with all distinct elements. A subarray is a contiguous portion of the array. For example, given nums = [1, 2, 3, 1, 2, 3, 4, 5], the longest subarray with all distinct elements is [1, 2, 3, 4, 5], with a length of 5.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer representing the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> last index where it appeared\n    left = 0                 # start of current window\n    best = 0                 # best window size found\n\n    for right, value in enumerate(nums):\n        # If we've seen this value inside the current window,\n        # move the window's left edge just after its previous occurrence\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer array nums of length n. Your task is to find the maximum sum of a contiguous subarray within nums (the subarray must contain at least one element). Print the maximum sum.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Print a single integer: the maximum sum of a contiguous subarray.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    # Kadane's algorithm\n    best = current = nums[0]\n    for x in nums[1:]:\n        current = x if current + x < x else current + x\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # Ensure exactly n numbers are processed\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, return the length of the longest contiguous subarray that contains only even numbers. If there are multiple such subarrays, return the length of any one of them. If there are no even numbers in the array, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.  The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer representing the length of the longest contiguous subarray of even numbers.Constraints:1 ≤ n ≤ 10^5  −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    max_len = 0\n    curr_len = 0\n\n    for num in nums:\n        if num % 2 == 0:           # check even\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            curr_len = 0           # reset when an odd number is encountered\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether there exists a non-empty subarray (contiguous segment) whose elements sum up to zero. If such a subarray exists, output \"YES\". Otherwise, output \"NO\".Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output \"YES\" if there exists a non-empty subarray with sum zero, otherwise output \"NO\".Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    seen_prefix = set()\n    prefix_sum = 0\n    for num in nums:\n        prefix_sum += num\n        if prefix_sum == 0 or prefix_sum in seen_prefix:\n            print(\"YES\")\n            return\n        seen_prefix.add(prefix_sum)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If all elements are the same, return 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the length of the longest contiguous subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    last_pos = {}          # value -> last index where it appeared\n    left = 0               # left edge of the current window\n    best = 0\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside window: shrink the window's left edge\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    # If all elements are the same, best will be 1 automatically\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {}      # prefix_sum -> earliest index where it appears\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # Case 1: subarray starts at index 0\n        if prefix_sum == k:\n            best_len = i + 1\n\n        # Case 2: subarray ends at i and starts after an earlier prefix\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            best_len = max(best_len, i - prefix_to_first_index[needed])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. A subarray is a sequence of consecutive elements from the array. If the array is empty, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}          # value -> latest index it appeared at\n    left = 0               # left boundary of current window\n    best = 0               # best length found so far\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # val already in current window, shrink from the left\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:               # no input at all\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n])) if n else []\n    if not nums:\n        print(0)\n        return\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] == k. Two pairs are considered different if they have different indices (i, j).Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of unique pairs (i, j) such that nums[i] + nums[j] == k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    freq = {}          # stores occurrences of numbers we have passed\n    pairs = 0          # answer\n\n    for x in nums:\n        pairs += freq.get(k - x, 0)  # all previous numbers forming sum k with x\n        freq[x] = freq.get(x, 0) + 1 # add current number to the map\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1: 1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of pairs with even sum = C(evens,2) + C(odds,2)\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only unique elements (no duplicates). If there are multiple such subarrays, return the length of any one of them.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_seen = {}\n    start = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        if val in last_seen and last_seen[val] >= start:\n            # Duplicate inside current window – move start right after the previous occurrence\n            start = last_seen[val] + 1\n        last_seen[val] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all distinct elements. A subarray is a contiguous part of the array. Print the length of the longest such subarray.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer: the length of the longest subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}            # value -> latest index where it appeared\n    left = 0                 # left boundary of current window\n    best = 0                 # best length found\n\n    for right, value in enumerate(nums):\n        # If value already seen and inside current window, move left past it\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        # Record latest position and update best length\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum sum of any contiguous subarray. A subarray is a sequence of consecutive elements from the array. If all numbers are negative, return the largest (least negative) number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n space-separated integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).Output Format:Print a single integer: the maximum sum of any contiguous subarray.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    current_max = global_max = nums[0]\n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n\n    print(global_max)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum sum of any contiguous subarray of nums. A subarray is a non-empty sequence of consecutive elements from the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer, the maximum sum of any contiguous subarray.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n\n    # Kadane's algorithm\n    current_sum = best_sum = nums[0]\n    for x in nums[1:]:\n        current_sum = x if current_sum + x < x else current_sum + x\n        if current_sum > best_sum:\n            best_sum = current_sum\n\n    print(best_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of unique pairs (i, j) where i < j and nums[i] + nums[j] == k. Each pair should be counted only once, regardless of the order of elements. Two pairs are considered different if they involve different indices.Input:- The first line contains two integers n and k (1 ≤ n ≤ 10^4, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:- Print a single integer, the number of unique pairs whose sum is equal to k.Constraints:- 1 ≤ n ≤ 10^4- -10^9 ≤ nums[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    freq = Counter(nums)\n    pairs = 0\n    \n    for x in list(freq.keys()):\n        y = k - x\n        if y not in freq:\n            continue\n        \n        if x < y:                       # count each unordered pair once\n            pairs += freq[x] * freq[y]\n        elif x == y:                    # choose 2 out of freq[x]\n            pairs += freq[x] * (freq[x] - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, you are allowed to select exactly one pair of indices (i, j) such that 0 ≤ i < j < n. Your task is to maximize the value of nums[i] + nums[j] + (j - i). Output the maximum value that can be obtained.Input:The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), separated by spaces.Output:A single integer representing the maximum value achievable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Initialize\n    best_left = nums[0] - 0          # maximum value of nums[i] - i seen so far\n    max_value = -10**18              # sufficiently small\n\n    # Iterate over possible j (start from 1 because i < j)\n    for j in range(1, n):\n        candidate = best_left + nums[j] + j\n        if candidate > max_value:\n            max_value = candidate\n        # Update best_left for next iterations\n        left_value = nums[j] - j\n        if left_value > best_left:\n            best_left = left_value\n\n    print(max_value)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:- Output a single integer: the number of distinct pairs whose sum is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine the minimum number of elements that must be removed so that the remaining numbers are all equal. Print this minimum number.Input Format:The first line contains an integer N (1 ≤ N ≤ 10^5).The second line contains N space-separated integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^4).Output Format:Print a single integer representing the minimum number of elements to remove.Constraints:1 ≤ N ≤ 10^51 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    if n == 0:\n        print(0)\n        return\n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer, the maximum sum of a contiguous subarray.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for num in nums[1:]:\n        max_ending_here = num if max_ending_here + num < num else max_ending_here + num\n        max_so_far = max_so_far if max_so_far > max_ending_here else max_ending_here\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If no such subarray exists, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_sum = 0\n    first_occurrence = {0: -1}   # prefix sum -> earliest index\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, we found a subarray summing to k\n        if prefix_sum - k in first_occurrence:\n            max_len = max(max_len, i - first_occurrence[prefix_sum - k])\n\n        # Record the earliest occurrence of this prefix sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n (1 ≤ n ≤ 10^5), return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two numbers sum to an even number if both are even or both are odd.Input:The first line contains an integer n.The second line contains n integers nums[0], nums[1], ..., nums[n-1], separated by spaces.Output:Print a single integer: the number of pairs (i, j) where nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))   # ensure we don't read extra\n    cnt_even = 0\n    cnt_odd = 0\n    for x in nums:\n        if x & 1:\n            cnt_odd += 1\n        else:\n            cnt_even += 1\n\n    # Combination counts: C(k, 2) = k*(k-1)//2\n    pairs_even = cnt_even * (cnt_even - 1) // 2\n    pairs_odd  = cnt_odd  * (cnt_odd  - 1) // 2\n    print(pairs_even + pairs_odd)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine whether it is possible to partition the array into two non-empty subsets such that the sum of elements in both subsets is equal. Return \"YES\" if such a partition exists, otherwise return \"NO\".Input Format:The first line contains a single integer n (2 ≤ n ≤ 20).The second line contains n integers nums[i] (-100 ≤ nums[i] ≤ 100).Output Format:Output \"YES\" if the array can be partitioned into two subsets with equal sum, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    total = sum(nums)\n    \n    # If the total sum is odd, equal partition is impossible\n    # (Because two equal integers must sum to an even number)\n    # But with negative numbers, \"odd/even\" still applies.\n    if total % 2 != 0:\n        print(\"NO\")\n        return\n    \n    target = total // 2\n    # Enumerate all non-empty, non-full subsets\n    for mask in range(1, (1 << n) - 1):\n        s = 0\n        for i in range(n):\n            if mask & (1 << i):\n                s += nums[i]\n        if s == target:\n            print(\"YES\")\n            return\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of the array.Output:Print a single integer — the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    last_pos = {}\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            # Move left pointer just after previous occurrence\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of distinct elements whose sum is exactly equal to a given target integer k. If such a pair exists, output \"YES\"; otherwise, output \"NO\".Input Format:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).Output Format:Output \"YES\" if there exists a pair of distinct elements whose sum is k, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for x in nums:\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the number of distinct pairs (i, j), where 0 ≤ i < j < n, such that nums[i] + nums[j] equals target. Two pairs are considered distinct if they have different indices. Output the count of such pairs.Input Format:The first line contains two integers n and target.The second line contains n integers, the elements of nums.Output Format:Output a single integer, the number of distinct pairs.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    freq = Counter(nums)\n    ans = 0\n\n    for val in freq:\n        comp = target - val\n        if comp not in freq:\n            continue\n        if val < comp:                       # count each unordered pair once\n            ans += freq[val] * freq[comp]\n        elif val == comp:                    # pairs formed within the same value\n            cnt = freq[val]\n            ans += cnt * (cnt - 1) // 2\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. If all elements are the same, the answer is 1.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find and return the length of the longest contiguous subarray where the absolute difference between any two elements is not greater than 1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:Print a single integer, the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    where max(element) - min(element) <= 1\n    \"\"\"\n    min_deque = deque()   # indices of elements in increasing order\n    max_deque = deque()   # indices of elements in decreasing order\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # Maintain deque for minimums\n        while min_deque and nums[min_deque[-1]] > value:\n            min_deque.pop()\n        min_deque.append(right)\n\n        # Maintain deque for maximums\n        while max_deque and nums[max_deque[-1]] < value:\n            max_deque.pop()\n        max_deque.append(right)\n\n        # Shrink window until it becomes valid\n        while nums[max_deque[0]] - nums[min_deque[0]] > 1:\n            if min_deque[0] == left:\n                min_deque.popleft()\n            if max_deque[0] == left:\n                max_deque.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays with the same sum, return the sum for the leftmost one.  Input:  The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).  The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).  Output:  Output a single integer: the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:          # strictly greater keeps the leftmost sum in ties\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices (1-based) of two distinct elements in the array whose sum is exactly equal to target. If there are multiple valid answers, return any one of them. If no such pair exists, output -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print two integers representing the 1-based indices of the elements whose sum is target, or -1 -1 if no such pair exists.Constraints:- 2 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9- Each input has at most one solution.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = {}                       # value -> index (0-based)\n    for idx, val in enumerate(nums):\n        complement = target - val\n        if complement in seen:\n            # Convert to 1-based indices for output\n            print(seen[complement] + 1, idx + 1)\n            return\n        seen[val] = idx\n\n    # No valid pair found\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the index of the first occurrence of the smallest element in the array. If there are multiple occurrences, return the smallest index. The array is guaranteed to have at least one element.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the index (0-based) of the first occurrence of the smallest element in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # ensure only n numbers considered\n    \n    # Initialize with the first element\n    min_val = nums[0]\n    min_idx = 0\n    \n    # Scan for smaller values; keep the first index when equal\n    for idx in range(1, n):\n        if nums[idx] < min_val:\n            min_val = nums[idx]\n            min_idx = idx\n    \n    print(min_idx)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, find the length of the longest substring without repeating characters.Input Format:The first line contains the string S.Output Format:Print a single integer — the length of the longest substring of S that contains no repeated characters.Constraints:1 ≤ |S| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}           # char -> last seen index\n    left = 0                # left end of the current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Duplicate inside current window – move `left`\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k. Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer representing the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray such that\n    max(subarray) - min(subarray) <= k.\n    \"\"\"\n    max_dq = deque()   # decreasing deque for maximums\n    min_dq = deque()   # increasing deque for minimums\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques with the new value\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # shrink window if constraint violated\n        while max_dq[0] - min_dq[0] > k:\n            if max_dq[0] == nums[left]:\n                max_dq.popleft()\n            if min_dq[0] == nums[left]:\n                min_dq.popleft()\n            left += 1\n\n        # update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. You can perform the following operation any number of times: select any two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j) and swap nums[i] and nums[j]. Your task is to determine whether it is possible to arrange the array in non-decreasing order using any number of such operations.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output \"YES\" if it is possible to sort the array in non-decreasing order using the allowed operations, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read input (array length and the array itself).\n    # We do not actually need the values, because with unrestricted swaps\n    # any permutation is achievable, hence the array is always sortable.\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    # The first number is n; the rest are the elements.\n    # We simply output \"YES\" for every valid input.\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subsequence where the difference between any two consecutive elements is exactly 1. A subsequence is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the length of the longest subsequence with consecutive differences of 1.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # best_len[val] = length of the longest valid subsequence that\n    #                 ends with the value `val`\n    best_len = defaultdict(int)\n    overall_best = 0\n    \n    for v in nums:\n        # Start a new subsequence with the single element v\n        cur_best = 1\n        \n        # We can extend any subsequence that previously ended with v-1 or v+1\n        for neigh in (v - 1, v + 1):\n            if best_len[neigh]:\n                cur_best = max(cur_best, best_len[neigh] + 1)\n        \n        # Update the best length for sequences ending with value v\n        if cur_best > best_len[v]:\n            best_len[v] = cur_best\n        \n        # Keep track of the global maximum\n        if cur_best > overall_best:\n            overall_best = cur_best\n    \n    print(overall_best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest subarray (contiguous segment) whose sum is an even number. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), representing the elements of the array.Output:Print a single integer: the maximum length of a contiguous subarray with an even sum.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # parity 0 -> even prefix-sum, 1 -> odd prefix-sum\n    first_pos = [0, -1]          # first_pos[parity] = earliest index where this parity occurred\n    parity = 0                   # prefix-sum parity up to current position\n    best_len = 0                 # answer to keep\n\n    for idx, val in enumerate(nums, 1):   # idx is 1-based position (prefix length)\n        parity ^= (val & 1)               # update running parity (XOR by current number's parity)\n\n        if first_pos[parity] != -1:\n            # we have seen this parity before -> subarray (first_pos..idx-1) has even sum\n            best_len = max(best_len, idx - first_pos[parity])\n        else:\n            # first time this parity appears: record its position\n            first_pos[parity] = idx\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the minimum number of moves required to make all elements equal. In each move, you can increment or decrement a single element by 1. Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the minimum number of moves needed.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    nums.sort()\n    median = nums[n // 2]                # works for both odd and even n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the absolute difference between any two elements in the subarray is less than or equal to k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the length of the longest valid contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Deque to maintain indices of current window's minimums (in increasing order of value)\n    min_dq = deque()\n    # Deque to maintain indices of current window's maximums (in decreasing order of value)\n    max_dq = deque()\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain min deque (values increasing)\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Maintain max deque (values decreasing)\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            left += 1\n            # Remove outdated indices\n            if min_dq[0] < left:\n                min_dq.popleft()\n            if max_dq[0] < left:\n                max_dq.popleft()\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k (1 ≤ k ≤ n). If there are multiple such subarrays with the same sum, return the one that starts at the smallest index. Output the sum and the starting index (0-based) of this subarray.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output two integers: the maximum sum and the starting index of the subarray.Constraints:1 ≤ k ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window\n    current_sum = sum(nums[:k])\n    max_sum = current_sum\n    max_idx = 0\n\n    # Slide the window\n    for i in range(k, n):\n        current_sum += nums[i] - nums[i - k]   # add next, remove first of window\n        start_idx = i - k + 1                  # current window start\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_idx = start_idx\n        # If equal, keep the earlier index (no update)\n\n    print(f\"{max_sum} {max_idx}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains at most two distinct numbers. If the array is empty, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums_i (1 ≤ nums_i ≤ 10^9), representing the array.Output:Output a single integer: the length of the longest contiguous subarray with at most two distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ nums_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    if not nums:\n        return 0\n\n    count = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        count[val] += 1\n\n        # shrink window until we have at most 2 distinct numbers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        # update best length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        print(0)\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_two_distinct(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that is missing from the array. An integer is considered missing if it does not appear in nums. You must solve this problem in O(n) time and use O(1) additional space (ignore the input array's space).Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n space-separated integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output Format:Print a single integer: the smallest missing positive integer.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef first_missing_positive(nums):\n    n = len(nums)\n\n    # Place each number x in position x-1 if 1 ≤ x ≤ n\n    for i in range(n):\n        # keep swapping until the current number is in its correct position\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            correct_idx = nums[i] - 1\n            nums[i], nums[correct_idx] = nums[correct_idx], nums[i]\n\n    # The first place where index i doesn't have number i+1 is the answer\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n\n    # All positions are correct ⇒ smallest missing is n + 1\n    return n + 1\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(first_missing_positive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if the indices (i, j) are different.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer — the number of unique pairs (i, j) with i < j and nums[i] + nums[j] even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to pick 2 evens + 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the minimum number of moves required to make all elements equal. In one move, you can increment or decrement a single element by 1. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the minimum number of moves required.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    nums.sort()\n    median = nums[n // 2]                 # Works for both even and odd n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether it is possible to rearrange the characters of S to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".Input:The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases.  Each of the next T lines contains a string S (1 ≤ |S| ≤ 1000).Output:For each test case, print \"YES\" or \"NO\" on a separate line.Constraints:1 ≤ T ≤ 100  1 ≤ |S| ≤ 1000  S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can be arranged into a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd = sum(1 for cnt in freq.values() if cnt % 2)\n    # For even length strings no odd counts allowed, for odd length strings exactly one\n    return odd <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    idx = 1\n    out_lines = []\n\n    for _ in range(t):\n        s = data[idx]\n        idx += 1\n        out_lines.append(\"YES\" if can_form_palindrome(s) else \"NO\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of the elements in the subarray is even. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The next line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # first_occurrence[parity] = earliest index where this prefix parity appeared\n    # we use 0-based indices for positions in the original array,\n    # but prefix index goes from 0..n (prefix before any element is index 0).\n    first_occurrence = [-1] * 2          # -1 means not seen yet\n    first_occurrence[0] = 0              # empty prefix has even (0) parity\n    prefix_parity = 0\n    max_len = 0\n    \n    for i, val in enumerate(nums, 1):    # i = 1 .. n (prefix length)\n        prefix_parity = (prefix_parity ^ (val & 1))  # xor gives parity mod 2\n        if first_occurrence[prefix_parity] == -1:\n            first_occurrence[prefix_parity] = i\n        else:\n            length = i - first_occurrence[prefix_parity]\n            if length > max_len:\n                max_len = length\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Return the answer as a tuple (i, j), where i < j. If there are multiple answers, return the one with the smallest i. If no such pair exists, return (-1, -1).Input:The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print two integers i and j (0-based indices) separated by a space, or -1 -1 if no pair exists.Constraints:- Each input has exactly one solution or none.- i < j\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    target = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # value -> queue of its indices (ascending order)\n    pos = defaultdict(deque)\n    for idx, val in enumerate(nums):\n        pos[val].append(idx)\n\n    for i, val in enumerate(nums):\n        # Remove the current index so that we only look at j > i\n        dq = pos[val]\n        if dq and dq[0] == i:\n            dq.popleft()\n            if not dq:\n                del pos[val]       # keep dict small (optional)\n\n        complement = target - val\n        if complement in pos and pos[complement]:\n            j = pos[complement][0]    # smallest index > i holding complement\n            print(i, j)\n            return\n\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any element by 1. Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer, the minimum number of moves required.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    nums.sort()\n    median = nums[n // 2]          # lower median for even n works as well\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the number of distinct pairs (i, j) with i < j and nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for x in nums:\n        if x & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Print the result.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer, the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Each input will have exactly one solution, and you may not use the same element twice. Return the answer as a list of two indices in any order.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^4, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print two space-separated integers representing the indices (0-based) of the elements that sum to target.Constraints:- 1 ≤ n ≤ 10^4- -10^9 ≤ nums[i], target ≤ 10^9- Exactly one solution exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            print(seen[complement], i)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting only of lowercase English letters, return the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input Format:- A single line containing the string S.Output Format:- A single integer: the length of the longest substring without repeating characters.Constraints:- 1 ≤ length of S ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}\n    start = 0  # left end of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # Character repeated inside current window; move start right after its previous occurrence\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the index of the first occurrence of the maximum value in the array. If there are multiple indices with the same maximum value, return the smallest index. The array is 0-indexed.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the index of the first occurrence of the maximum value in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Initialize with the first element's value and index\n    max_val = nums[0]\n    max_idx = 0\n    \n    # Traverse the array once to find the first index of the maximum value\n    for i in range(1, n):\n        if nums[i] > max_val:\n            max_val = nums[i]\n            max_idx = i\n    \n    print(max_idx)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).  The second line contains n integers nums[i] (|nums[i]| ≤ 10^5).Output Format:Print a single integer representing the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5  |nums[i]| ≤ 10^5  |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index where it occurs\n    prefix_sum = 0\n    max_len = 0\n\n    for i in range(n):\n        prefix_sum += nums[i]\n\n        # If there is a previous prefix with value prefix_sum - k,\n        # the subarray between that index+1 and current i sums to k.\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > max_len:\n                max_len = length\n\n        # Store the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers, where N is a positive integer. Your task is to determine whether it is possible to rearrange the integers so that no two adjacent numbers in the rearranged list are equal. If it is possible, output \"YES\", otherwise output \"NO\".Input:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^5).Output:Output \"YES\" if such a rearrangement is possible, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    # Frequency count\n    freq = Counter(nums)\n    max_count = max(freq.values())\n    \n    # A rearrangement without equal adjacent elements is possible\n    # iff the most frequent element does not occupy more than half\n    # (rounded up) of the positions.\n    if max_count <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only even numbers. If there are no even numbers, output 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest contiguous subarray of even numbers.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    max_len = cur_len = 0\n    for num in nums:\n        if num % 2 == 0:          # even number\n            cur_len += 1\n            if cur_len > max_len:\n                max_len = cur_len\n        else:                     # odd number breaks the current streak\n            cur_len = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray whose sum is exactly equal to K. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N space-separated integers a_1, a_2, ..., a_N (|a_i| ≤ 10^4).Output Format:Output a single integer representing the length of the longest contiguous subarray with sum K.Constraints:1 ≤ N ≤ 10^5|a_i| ≤ 10^4|K| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    N = int(data[0])\n    K = int(data[1])\n    nums = list(map(int, data[2:2 + N]))\n    \n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index\n    cur_sum = 0\n    best_len = 0\n    \n    for i, val in enumerate(nums):\n        cur_sum += val\n        \n        needed = cur_sum - K\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > best_len:\n                best_len = length\n        \n        # store earliest occurrence of this prefix sum\n        if cur_sum not in prefix_to_first_index:\n            prefix_to_first_index[cur_sum] = i\n    \n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums with n elements and an integer k. Your task is to find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is divisible by k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^3).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^5) separated by spaces.Output:Print a single integer representing the number of valid pairs.Constraints:1 ≤ n ≤ 10^5  1 ≤ k ≤ 10^3  1 ≤ nums[i] ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Frequency of each remainder\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    # Pairs where both numbers give remainder 0\n    pairs = freq[0] * (freq[0] - 1) // 2\n\n    # If k is even, handle the special remainder k/2\n    if k % 2 == 0:\n        mid = k // 2\n        pairs += freq[mid] * (freq[mid] - 1) // 2\n\n    # Handle the rest of the remainders\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is less than or equal to k. Return the length of this subarray.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray in `nums`\n    such that max(subarray) - min(subarray) <= k.\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    max_dq = deque()   # decreasing: front is index of current maximum\n    min_dq = deque()   # increasing: front is index of current minimum\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # Maintain monotone decreasing deque for maximums\n        while max_dq and nums[max_dq[-1]] < value:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain monotone increasing deque for minimums\n        while min_dq and nums[min_dq[-1]] > value:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window from the left until it becomes valid\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    result = longest_subarray(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).The second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^5), representing the elements of the array.Output:Output a single integer — the length of the longest contiguous subarray with sum equal to K. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            best_len = max(best_len, i - prefix_to_first_index[needed])\n\n        # keep the earliest occurrence only\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all unique elements. If there are multiple such subarrays, return the length of any one of them.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = longest_unique_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, return the smallest integer greater than n that has the same number of 1-bits in its binary representation. If no such integer exists within the range of 32-bit signed integers, return -1.Input:A single integer n (1 ≤ n ≤ 2,000,000,000).Output:A single integer representing the smallest integer greater than n with the same number of 1-bits in its binary representation, or -1 if it does not exist.Constraints:1 ≤ n ≤ 2,000,000,000\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMAX_INT_32 = 0x7FFFFFFF   #  2 147 483 647\n\ndef next_with_same_ones(n: int) -> int:\n    # right-most set bit\n    smallest = n & -n\n    # add it -> carries the 1-bit to the left\n    ripple   = n + smallest\n    # if carry already steps outside signed-32-bit range we are done\n    if ripple > MAX_INT_32:\n        return -1\n\n    # determine the 1-bits that need to be placed at the far right\n    ones = n ^ ripple            # 1s that changed place\n    ones = (ones // smallest) >> 2\n    result = ripple | ones\n\n    return result if result <= MAX_INT_32 else -1\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    print(next_with_same_ones(n))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S.  The second line contains the string S of length n.Output:Output a single integer — the length of the longest substring of S without repeating characters.Constraints:1 ≤ n ≤ 10^5  S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    Sliding-window + last-seen index dictionary, O(n) time / O(Σ) space.\n    \"\"\"\n    last_seen = {}            # char -> last index\n    left = 0                  # left end of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # Repetition inside the window – move left end just after that index\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    # Safety: trim/ensure length n, though specs guarantee it\n    s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer target. Your task is to determine if there exist two distinct indices i and j such that nums[i] + nums[j] == target. If such a pair exists, print \"YES\". Otherwise, print \"NO\".Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray that contains only even numbers. If there are multiple such subarrays, return the length of any one of them. If there is no even number in the array, return 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the array.Output Format:Print a single integer representing the length of the longest contiguous subarray of even numbers.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])           # number of elements (not strictly needed afterwards)\n    current_streak = 0         # length of the current contiguous even segment\n    best_streak = 0            # best (maximum) length found so far\n\n    for num in map(int, data[1:]):\n        if num & 1:            # odd number (faster than `num % 2`)\n            current_streak = 0\n        else:                  # even number\n            current_streak += 1\n            if current_streak > best_streak:\n                best_streak = current_streak\n\n    print(best_streak)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, return the number of distinct pairs of positive integers (a, b) such that 1 ≤ a < b ≤ n and a divides b (i.e., b % a == 0). Output the total count of such pairs.Input:A single integer n (1 ≤ n ≤ 10^5)Output:A single integer representing the number of valid (a, b) pairs.Constraints:1 ≤ n ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    \"\"\"\n    Counts the number of pairs (a, b) with 1 ≤ a < b ≤ n and a divides b.\n    \"\"\"\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    total_pairs = 0\n    # For each possible a, count multiples of a greater than a\n    for a in range(1, n):           # a must be strictly less than b\n        total_pairs += n // a - 1    # subtract 1 to exclude the multiple k = 1 (i.e., b = a)\n\n    print(total_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements having the same value. If there are multiple such subarrays, output the length of the longest one.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the length of the longest contiguous subarray with all elements equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n\n    max_len = 1        # at least one element is present\n    current_len = 1\n\n    for i in range(1, n):\n        if nums[i] == nums[i - 1]:\n            current_len += 1\n            if current_len > max_len:\n                max_len = current_len\n        else:\n            current_len = 1\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the absolute difference between any two elements in the subarray is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the maximum length of a contiguous subarray where the absolute difference between any two elements is at most 1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Deques to keep indices of potential minima and maxima in the window\n    min_dq = deque()    # increasing values -> front holds current minimum index\n    max_dq = deque()    # decreasing values -> front holds current maximum index\n    \n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        # Maintain monotonicity for min deque (increasing)\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n        \n        # Maintain monotonicity for max deque (decreasing)\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n        \n        # Shrink window until it satisfies max - min <= 1\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            if left == min_dq[0]:\n                min_dq.popleft()\n            if left == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n        \n        # Update answer\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs (i, j) where i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n    \n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # combinations C(k,2) = k*(k-1)//2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine whether there exists a pair of distinct elements in the list whose sum is exactly equal to a given integer K. If such a pair exists, print \"YES\"; otherwise, print \"NO\".Input Format:- The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).- The second line contains N space-separated integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9).Output Format:- Print \"YES\" if there exists a pair of distinct elements whose sum is K; otherwise, print \"NO\".Constraints:- 1 ≤ N ≤ 10^5- 1 ≤ K ≤ 10^9- 1 ≤ Ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Assume that each input has exactly one solution, and you may not use the same element twice. Return the answer as a pair of indices (i, j) with i < j.Input:The first line contains two integers n (the number of elements in the array) and target.The second line contains n integers representing the array nums.Output:Print two space-separated integers, the indices of the two elements that sum up to target.Constraints:2 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    index_map = {}        # value -> index\n    for j, num in enumerate(nums):\n        need = target - num\n        if need in index_map:\n            i = index_map[need]\n            # i is guaranteed to be < j because we only store first occurrence\n            print(i, j)\n            return\n        # store only the first occurrence of each value\n        if num not in index_map:\n            index_map[num] = j\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the length of the longest contiguous subarray with all distinct elements. If there are multiple such subarrays, return the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:Output a single integer: the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}            # value -> most recent index\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found so far\n\n    for right, val in enumerate(nums):\n        # If val already seen in current window, move left boundary\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum number of moves required to make all the elements equal. In one move, you can increment or decrement a single element by 1. Output the minimum number of moves required.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer: the minimum number of moves required to make all elements equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n\n    nums.sort()\n    median = nums[n // 2]          # works for both odd and even n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer: the smallest positive integer that does not appear in nums.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_missing_positive(nums):\n    \"\"\"\n    Returns the smallest positive integer that is not present in nums.\n    \"\"\"\n    n = len(nums)\n    # Only numbers in the range [1, n + 1] can influence the answer.\n    present = [False] * (n + 2)          # indices 0..n+1\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    for i in range(1, n + 2):\n        if not present[i]:\n            return i\n    return n + 1                         # Fallback (theoretically unreachable)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(smallest_missing_positive(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Output a single integer representing the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n\n    deque_min = deque()      # indices of current window, values non-decreasing\n    deque_max = deque()      # indices of current window, values non-increasing\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # update deques for the new right end\n        while deque_max and nums[deque_max[-1]] < val:\n            deque_max.pop()\n        deque_max.append(right)\n\n        while deque_min and nums[deque_min[-1]] > val:\n            deque_min.pop()\n        deque_min.append(right)\n\n        # shrink window from the left until the constraint is satisfied\n        while nums[deque_max[0]] - nums[deque_min[0]] > 1:\n            if deque_max[0] == left:\n                deque_max.popleft()\n            if deque_min[0] == left:\n                deque_min.popleft()\n            left += 1\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and target (|target| ≤ 10^9), where n is the number of elements in the array.- The second line contains n integers nums[i] (|nums[i]| ≤ 10^9), representing the elements of the array.Output Format:- Print a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^9- |target| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = defaultdict(int)      # frequency of numbers seen so far\n    pairs = 0\n\n    for x in nums:\n        comp = target - x\n        pairs += freq[comp]      # all earlier numbers that complete the pair\n        freq[x] += 1             # mark current number as seen\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, output the length of the longest one. If no such subarray exists, output 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5).- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer: the length of the longest contiguous subarray with an even sum.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Map to store the first index where each parity (0 for even, 1 for odd) appears.\n    # Initialize with parity 0 at index -1 to account for subarrays starting at index 0.\n    first_idx = {0: -1}\n    prefix_parity = 0  # 0 = even, 1 = odd\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_parity ^= (val & 1)  # Toggle parity if val is odd.\n        if prefix_parity in first_idx:\n            # We have seen this parity before -> subarray [first_idx+1 .. i] has even sum.\n            best_len = max(best_len, i - first_idx[prefix_parity])\n        else:\n            # First time this parity occurs; record its position.\n            first_idx[prefix_parity] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of pairs (i, j) with i < j such that nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to pick 2 items from k items: k * (k - 1) // 2\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the length of the longest subarray with sum less than or equal to k. The subarray must consist of consecutive elements from nums. If no such subarray exists, output 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9), where n is the number of elements in the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output:Output a single integer: the length of the longest subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ k ≤ 10^9−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n\nclass SegTreeMin:\n    \"\"\"segment-tree that supports\n       1) point update  (keep minimal value)\n       2) range-minimum query\n    \"\"\"\n\n    def __init__(self, size: int, inf: int):\n        n = 1\n        while n < size:      # power of two\n            n <<= 1\n        self.N = n\n        self.INF = inf\n        self.data = [inf] * (2 * n)\n\n    # keep the minimal index stored at position pos\n    def update(self, pos: int, val: int) -> None:\n        pos += self.N\n        if val >= self.data[pos]:        # we only store the smallest index\n            return\n        self.data[pos] = val\n        pos //= 2\n        while pos:\n            self.data[pos] = min(self.data[2 * pos], self.data[2 * pos + 1])\n            pos //= 2\n\n    # minimum on inclusive range [l, r]\n    def query(self, l: int, r: int) -> int:\n        if l > r:\n            return self.INF\n        res = self.INF\n        l += self.N\n        r += self.N\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\n\ndef main() -> None:\n    raw = sys.stdin.buffer.read().split()\n    if not raw:\n        return\n    it = iter(raw)\n    n = int(next(it))\n    k = int(next(it))\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums\n    pref = [0]\n    acc = 0\n    for v in nums:\n        acc += v\n        pref.append(acc)\n\n    # coordinate compression for prefix sums\n    vals = sorted(set(pref))\n    m = len(vals)\n\n    def idx(x):\n        return bisect.bisect_left(vals, x)\n\n    INF = n + 5\n    st = SegTreeMin(m, INF)\n\n    # insert prefix sum 0 at index 0\n    st.update(idx(0), 0)\n\n    ans = 0\n    for i in range(1, n + 1):\n        cur = pref[i]\n        need = cur - k                    # we need prefix[j] >= need\n        pos = bisect.bisect_left(vals, need)\n        if pos < m:                       # there exists some prefix >= need\n            j = st.query(pos, m - 1)      # earliest such index (minimal)\n            if j != INF:\n                ans = max(ans, i - j)\n\n        st.update(idx(cur), i)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum that can be obtained by selecting non-adjacent elements from the array. You cannot select two elements that are next to each other. If the array is empty, return 0.Input:The first line contains an integer n (0 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output:Print a single integer: the maximum sum of non-adjacent elements.Constraints:0 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_non_adjacent_sum(nums):\n    \"\"\"\n    Returns the maximum sum obtainable by selecting non-adjacent elements.\n    \"\"\"\n    include, exclude = 0, 0          # include → best sum ending at current index (taking it)\n                                      # exclude → best sum ending at current index (skipping it)\n    for x in nums:\n        new_include = exclude + x     # if we take current element, we must have skipped previous\n        new_exclude = max(include, exclude)  # best sum so far if we skip current\n        include, exclude = new_include, new_exclude\n\n    return max(0, include, exclude)   # empty set allowed, so never less than 0\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                      # no input at all\n        print(0)\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n])) if n else []\n\n    result = max_non_adjacent_sum(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray that contains only even numbers.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer, the length of the longest contiguous subarray consisting only of even numbers.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    max_len = 0\n    cur_len = 0\n\n    for num in nums:\n        if num % 2 == 0:          # Even number\n            cur_len += 1\n            if cur_len > max_len:\n                max_len = cur_len\n        else:                     # Odd number breaks the streak\n            cur_len = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered distinct if their indices are different.  Input:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).  Output:  - Print a single integer: the number of distinct pairs (i, j) where i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    evens = odds = 0\n    for x in nums:\n        if x & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # pairs among evens + pairs among odds\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest contiguous subarray that contains at most two distinct numbers. A subarray is a sequence of elements from nums with consecutive indices.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with at most two distinct numbers.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    \"\"\"Return length of longest contiguous subarray with ≤2 distinct numbers.\"\"\"\n    count = defaultdict(int)   # frequency of each number in current window\n    left = 0                   # left index of sliding window\n    best = 0                   # best length found so far\n\n    for right, value in enumerate(nums):\n        count[value] += 1\n\n        # Shrink window until it has at most two distinct numbers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_two(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If the array is empty, return 0.Input:The first line contains a single integer n (0 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the length of the longest subarray with all elements distinct.Constraints:0 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_index = {}          # Stores last index at which each value was seen\n    left = 0                 # Left end of current window\n    best = 0                 # Best (maximum) length found so far\n\n    for right, value in enumerate(nums):\n        # If value already in window, move `left` just after its previous position\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        last_index[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:                       # No input at all\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n])) if n else []\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, return any one of the maximum length. If no such subarray exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array.The second line contains n space-separated integers nums[i] (|nums[i]| ≤ 10^9).Output:Print a single integer — the length of the longest contiguous subarray with an even sum.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    total = sum(nums)\n\n    # If the whole array already has an even sum, it is the longest one.\n    if total % 2 == 0:\n        print(n)\n        return\n\n    # Locate first and last positions of an odd element\n    first_odd = -1\n    last_odd = -1\n    for i, v in enumerate(nums):\n        if v & 1:            # faster parity check than v % 2 != 0\n            if first_odd == -1:\n                first_odd = i\n            last_odd = i\n\n    # If no odd numbers exist (theoretically impossible here because total is odd),\n    # no even-sum subarray can be formed.\n    if first_odd == -1:\n        print(0)\n        return\n\n    # Option 1: remove the smallest prefix that makes the remaining sum even\n    length_without_prefix = n - (first_odd + 1)\n    # Option 2: remove the smallest suffix that makes the remaining sum even\n    length_without_suffix = last_odd\n\n    answer = max(length_without_prefix, length_without_suffix)\n    # If both candidates are 0, no valid subarray exists (e.g., n = 1, nums[0] odd)\n    print(max(answer, 0))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find two distinct indices i and j such that nums[i] + nums[j] == target. If such a pair exists, output the indices i and j (0-indexed). If there are multiple solutions, output the pair with the smallest i; if there are still multiple, output the one with the smallest j. If no such pair exists, output -1 -1.Input:The first line contains two integers n and target (2 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output two integers, i and j, separated by a space, representing the indices. If no such pair exists, output -1 -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # store every value's indices in increasing order\n    pos = defaultdict(list)\n    for idx, val in enumerate(nums):\n        pos[val].append(idx)\n\n    for i, val in enumerate(nums):\n        need = target - val\n        if need not in pos:\n            continue\n        lst = pos[need]\n\n        # find the first index larger than i (to guarantee j != i and i < j)\n        j_pos = bisect.bisect_right(lst, i)\n        if j_pos < len(lst):\n            print(i, lst[j_pos])\n            return\n\n    # no pair found\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of valid pairs (i, j) where the sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    even = 0\n    odd = 0\n    \n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Assume exactly one solution exists, and the same element cannot be used twice. Output the indices as space-separated integers in increasing order.Input:The first line contains two integers n (the length of nums) and target.The second line contains n integers, representing the array nums.Output:Print two space-separated integers: the indices of the two numbers that add up to target (0-based, in increasing order).Constraints:2 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n    \n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            idx1, idx2 = seen[complement], i\n            if idx1 > idx2:\n                idx1, idx2 = idx2, idx1\n            print(idx1, idx2)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums and an integer target. Your task is to determine if there exist two distinct indices i and j in the array such that nums[i] + nums[j] == target. If such a pair exists, output \"YES\", otherwise output \"NO\".Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output \"YES\" if there exist two distinct indices i and j such that nums[i] + nums[j] == target, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = set()\n    for x in nums:\n        if target - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] == target. Return \"YES\" if such a pair exists, otherwise return \"NO\".Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single line: \"YES\" if a valid pair exists, or \"NO\" otherwise.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))  # ensure we only take n numbers even if extra whitespace\n    seen = set()\n    for num in nums:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Output the length of this subarray.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer, the length of the longest such contiguous subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    # Edge case: n may be 0 but constraints say n>=1\n    left = 0\n    best = 0\n    min_deque = deque()   # increasing: min at front\n    max_deque = deque()   # decreasing: max at front\n    \n    for right, val in enumerate(nums):\n        # Insert into deques\n        while min_deque and val < min_deque[-1]:\n            min_deque.pop()\n        min_deque.append(val)\n        \n        while max_deque and val > max_deque[-1]:\n            max_deque.pop()\n        max_deque.append(val)\n        \n        # Shrink window until condition satisfied\n        while max_deque[0] - min_deque[0] > 1:\n            # Move left pointer\n            if nums[left] == min_deque[0]:\n                min_deque.popleft()\n            if nums[left] == max_deque[0]:\n                max_deque.popleft()\n            left += 1\n        \n        # Update best length\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, find the total number of contiguous subarrays whose sum is exactly equal to k.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).  The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer: the number of contiguous subarrays whose sum is k.Constraints:1 ≤ n ≤ 10^5  |k| ≤ 10^9  |nums[i]| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))  # ensure only first n numbers\n    \n    prefix_count = defaultdict(int)\n    prefix_count[0] = 1  # empty prefix\n    current_sum = 0\n    answer = 0\n    \n    for num in nums:\n        current_sum += num\n        # number of previous prefixes with sum = current_sum - k\n        answer += prefix_count[current_sum - k]\n        prefix_count[current_sum] += 1\n    \n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices. Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of distinct pairs whose sum is even.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])                 # number of elements\n    nums = map(int, data[1:1 + n])   # read exactly n numbers\n\n    even_cnt = 0\n    for num in nums:\n        if num & 1 == 0:             # fast even‐check\n            even_cnt += 1\n\n    odd_cnt = n - even_cnt\n\n    # number of pairs with both even + number of pairs with both odd\n    result = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray with sum exactly k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    # Dictionary to store the earliest index of each prefix sum\n    first_occurrence = {0: -1}          # prefix-sum 0 occurs before the array starts\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, a subarray summing to k ends at i\n        target = prefix_sum - k\n        if target in first_occurrence:\n            best_len = max(best_len, i - first_occurrence[target])\n\n        # Record earliest occurrence of current prefix sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest subsequence of nums such that the difference between any two consecutive elements is exactly 1. A subsequence is a sequence that can be derived from the array by deleting some (or no) elements without changing the order of the remaining elements.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the length of the longest valid subsequence.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n\n    dp = {}                 # dp[value] = best length of a valid subsequence ending with `value`\n    best = 0\n\n    for x in nums:\n        # longest subsequence we can extend (difference exactly 1, either +1 or -1)\n        prev_len = max(dp.get(x - 1, 0), dp.get(x + 1, 0))\n        cur_len = prev_len + 1\n\n        # keep only the longest subsequence ending with value `x`\n        if cur_len > dp.get(x, 0):\n            dp[x] = cur_len\n\n        best = max(best, cur_len)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the minimum number of operations required to make all elements in the array equal. In one operation, you can increment or decrement any single element by 1. Return the minimum number of operations needed.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer, the minimum number of operations required to make all elements equal.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # No operations needed for a single element\n    if n == 1:\n        print(0)\n        return\n\n    nums.sort()\n    median = nums[n // 2]  # works for both even/odd sizes\n    operations = sum(abs(x - median) for x in nums)\n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] = target. If such a pair exists, output \"YES\". Otherwise, output \"NO\".Input Format:- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output \"YES\" if there exists such a pair, otherwise output \"NO\".Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements distinct. A subarray is a contiguous part of the array. Return the length of the longest such subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums_i (1 ≤ nums_i ≤ 10^9).Output:Print a single integer: the length of the longest subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}               # value -> most recent index\n    left = 0                    # left boundary of the current window\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # value already inside current window, move left pointer\n            left = last_pos[value] + 1\n        last_pos[value] = right  # update most recent position\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, you are allowed to perform at most one swap of two distinct elements in the array. Determine the maximum possible sum of the array after performing the swap. If no swap increases the sum, return the original sum. Note that swapping two elements does not change their values, so in most cases, the sum will not change. However, if the array contains negative numbers, swapping a negative number with a positive number at specific positions may increase the sum due to certain conditions. Your task is to find the maximum sum possible after at most one swap.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n space-separated integers nums_i (−10^9 ≤ nums_i ≤ 10^9).Output Format:Output a single integer representing the maximum possible sum after at most one swap.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])                       # number of elements (not really needed)\n    nums = list(map(int, data[1:1 + n]))   # read the n integers\n    print(sum(nums))                       # swapping cannot change the sum\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:Output a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}      # prefix sum -> first index where it appears\n    prefix_sum = 0\n    longest = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we've seen prefix_sum - k before, the subarray between that index+1 and i sums to k\n        if (prefix_sum - k) in prefix_to_index:\n            length = i - prefix_to_index[prefix_sum - k]\n            if length > longest:\n                longest = length\n\n        # Store the earliest occurrence of each prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of contiguous subarrays whose sum is exactly equal to a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Output a single integer: the number of contiguous subarrays whose sum is exactly k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_freq = defaultdict(int)\n    prefix_freq[0] = 1          # empty prefix sum\n    current_sum = 0\n    count = 0\n\n    for num in nums:\n        current_sum += num\n        count += prefix_freq[current_sum - k]   # subarrays ending here with sum k\n        prefix_freq[current_sum] += 1\n\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of every two consecutive elements is even. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the length of the longest contiguous subarray meeting the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    # If the array is empty (should not happen with the given constraints),\n    # no valid sub-array exists.\n    if n == 0:\n        print(0)\n        return\n\n    # longest run of equal parity seen so far\n    max_len = 1\n    cur_len = 1\n\n    for i in range(1, n):\n        # two numbers have the same parity if their lowest bit is equal\n        if (nums[i] & 1) == (nums[i - 1] & 1):\n            cur_len += 1\n        else:\n            cur_len = 1\n        if cur_len > max_len:\n            max_len = cur_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of all unique elements in the array (elements that appear exactly once). If no such element exists, return 0.Input Format:- The first line contains one integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Print a single integer, the sum of all unique elements in the array.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # safely slice in case extra whitespace\n    freq = Counter(nums)\n    unique_sum = sum(num for num, cnt in freq.items() if cnt == 1)\n    print(unique_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine the length of the longest substring that contains no repeating characters.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string S.The second line contains the string S of length N.Output:Print a single integer representing the length of the longest substring with all distinct characters.Constraints:1 ≤ N ≤ 10^5S consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains all distinct characters.\n    \"\"\"\n    # There are only 26 lowercase letters.\n    last_pos = [-1] * 26          # last_pos[i] -> last index of chr(i + 'a')\n    start = 0                     # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97        # map 'a'..'z' to 0..25\n        # If this character was seen inside the current window, move `start`\n        if last_pos[idx] >= start:\n            start = last_pos[idx] + 1\n        last_pos[idx] = i\n        # Update answer with current window length\n        curr_len = i - start + 1\n        if curr_len > max_len:\n            max_len = curr_len\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])             # length of string (not actually needed)\n    s = data[1] if len(data) > 1 else \"\"\n    # Defensive: ensure we only consider the first n characters\n    s = s[:n]\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum sum of any contiguous subarray of nums. A contiguous subarray is a subarray made up of consecutive elements of the original array. Print the maximum possible sum.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:Print a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm: O(n) time, O(1) space\n    Returns the maximum sum of any contiguous sub-array.\n    \"\"\"\n    best = cur = nums[0]\n    for x in nums[1:]:\n        # Either extend the current subarray or start a new one at x\n        cur = max(x, cur + x)\n        best = max(best, cur)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # Safety in case fewer numbers provided\n    if len(nums) != n:\n        nums += [0] * (n - len(nums))\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Output the count of such pairs.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the smallest positive integer x that does not appear in nums. If all positive integers up to n appear in nums, return n + 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer — the smallest missing positive integer from the array.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Boolean array to mark presence of numbers 1 … n\n    present = [False] * (n + 1)      # index 0 unused\n\n    for num in nums:\n        if 1 <= num <= n:\n            present[num] = True\n\n    # first missing positive in 1 … n\n    for i in range(1, n + 1):\n        if not present[i]:\n            print(i)\n            return\n\n    # all 1 … n are present\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous segment) whose sum is exactly equal to a given integer k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers, nums[1], nums[2], ..., nums[n] (|nums[i]| ≤ 10^4).Output Format:Output a single integer: the length of the longest subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If there was a previous prefix with value prefix_sum - k,\n        # the subarray between that index+1 and current index sums to k.\n        needed = prefix_sum - k\n        if needed in prefix_to_first_index:\n            length = i - prefix_to_first_index[needed]\n            if length > longest:\n                longest = length\n\n        # Store the earliest occurrence of this prefix sum.\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Sliding-window with two monotone deques that keep current window’s\n    minimum and maximum.\n    \"\"\"\n    min_q = deque()       # increasing\n    max_q = deque()       # decreasing\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # insert into deques\n        while min_q and value < min_q[-1]:\n            min_q.pop()\n        min_q.append(value)\n\n        while max_q and value > max_q[-1]:\n            max_q.pop()\n        max_q.append(value)\n\n        # shrink window until valid\n        while max_q[0] - min_q[0] > 1:\n            if nums[left] == min_q[0]:\n                min_q.popleft()\n            if nums[left] == max_q[0]:\n                max_q.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all elements distinct. If the array is empty, return 0.Input:The first line contains an integer n (0 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Print a single integer representing the length of the longest subarray with all unique elements.Constraints:0 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    with all elements distinct in the given list `nums`.\n    \"\"\"\n    last_index = {}            # maps value -> its last index seen\n    left = 0                   # left boundary of the current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If value seen inside current window, move `left`\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        last_index[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:                       # no input at all\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n])) if n else []\n\n    if n == 0:\n        print(0)\n        return\n\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find two distinct indices i and j such that nums[i] + nums[j] == target. Return the indices as a list [i, j] with i < j. If there are multiple valid pairs, return the pair with the smallest i; if there are multiple such pairs, return the one with the smallest j. If no such pair exists, return [-1, -1].Input:- The first line contains two integers n (1 ≤ n ≤ 10^4) and target (−10^9 ≤ target ≤ 10^9).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:- Print two space-separated integers: the indices i and j (0-based) or \"-1 -1\" if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Build value -> list of indices (sorted ascending)\n    val_to_indices = {}\n    for idx, val in enumerate(nums):\n        val_to_indices.setdefault(val, []).append(idx)\n\n    # Scan indices in increasing order to guarantee the smallest i.\n    for i, val in enumerate(nums):\n        complement = target - val\n        if complement in val_to_indices:\n            indices_list = val_to_indices[complement]\n            # First index strictly greater than i gives the smallest valid j for this i.\n            pos = bisect.bisect_right(indices_list, i)\n            if pos < len(indices_list):\n                j = indices_list[pos]\n                print(f\"{i} {j}\")\n                return\n\n    # No valid pair found\n    print(\"-1 -1\")\n\n# Call main as required\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target. Output the total count of such pairs.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer representing the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().strip().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:]\n\n    freq = defaultdict(int)\n    pairs = 0\n\n    for num in nums:\n        complement = target - num\n        pairs += freq[complement]          # pairs formed with earlier occurrences\n        freq[num] += 1                     # record current number\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n and an integer k, find the length of the longest contiguous subarray whose sum is divisible by k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer -- the length of the longest contiguous subarray whose sum is divisible by k.Constraints:1 ≤ n ≤ 10^5  1 ≤ k ≤ 10^9  −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_first_idx = {0: -1}        # remainder -> earliest index\n    max_len = 0\n    prefix_sum = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n        rem = prefix_sum % k          # Python gives non-negative remainder\n\n        if rem in prefix_first_idx:\n            max_len = max(max_len, i - prefix_first_idx[rem])\n        else:\n            prefix_first_idx[rem] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray in which the difference between the maximum and minimum elements is at most k.  Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray where\n    max(nums[l:r]) - min(nums[l:r]) <= k.\n    \"\"\"\n    n = len(nums)\n    max_dq = deque()   # stores indices of elements in decreasing order of values\n    min_dq = deque()   # stores indices of elements in increasing order of values\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Maintain decreasing deque for maximums\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain increasing deque for minimums\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window if constraint violated\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            # Move left boundary\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n    print(longest_subarray(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target. Output the total count of such pairs.Input Format:- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- A single integer representing the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = {}\n    pairs = 0\n\n    for num in nums:\n        complement = target - num\n        pairs += freq.get(complement, 0)\n        freq[num] = freq.get(num, 0) + 1\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. You can perform the following operation any number of times: select any two adjacent characters in S that are the same and remove both of them from the string. Return the resulting string after all possible operations have been performed. If the final string is empty, return \"Empty\".Input:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output:A single line containing the resulting string after performing all possible operations, or \"Empty\" if the string is empty.Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef reduce_string(s: str) -> str:\n    \"\"\"\n    Repeatedly removes adjacent equal characters from the string.\n    Uses a stack to perform the operation in O(n) time.\n    \"\"\"\n    stack = []\n    for ch in s:\n        if stack and stack[-1] == ch:\n            stack.pop()          # remove the matching pair\n        else:\n            stack.append(ch)     # keep the character\n    return ''.join(stack)\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    result = reduce_string(s)\n    print(result if result else \"Empty\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs (i, j) and (j, i) are considered the same and should be counted only once.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the number of unique pairs whose sum is even.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    for x in nums:\n        if x & 1 == 0:   # faster than x % 2 == 0\n            even += 1\n\n    odd = n - even\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, determine the length of the longest subarray that contains at most k distinct integers. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the length of the longest subarray with at most k distinct integers.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ n1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_k_distinct(nums, k):\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        freq[value] += 1\n\n        # shrink window until we have at most k distinct values\n        while len(freq) > k:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        # window [left, right] now has ≤ k distinct numbers\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0]); k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Guard, though by constraints k ≥ 1 and ≤ n\n    if k == 0 or n == 0:\n        print(0)\n        return\n\n    result = longest_subarray_at_most_k_distinct(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer — the number of pairs with even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subsequence such that all elements in the subsequence are consecutive integers, regardless of their order in the original array. The subsequence does not need to be contiguous in the array. Return the length of this longest consecutive subsequence.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest consecutive subsequence.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_consecutive(nums):\n    \"\"\"Return length of the longest run of consecutive integers in nums.\"\"\"\n    num_set = set(nums)          # remove duplicates and allow O(1) lookup\n    best = 0\n\n    for x in num_set:\n        if x - 1 not in num_set:  # x can be the start of a streak\n            current = 1\n            y = x + 1\n            while y in num_set:\n                current += 1\n                y += 1\n            best = max(best, current)\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_consecutive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements. If all elements in nums are unique, return n.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    seen = set()\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # Shrink window until `value` is not duplicated\n        while value in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(value)\n        # Update maximum length\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer, the number of valid pairs.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of size exactly k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n space-separated integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:A single integer representing the maximum sum of any contiguous subarray of size k.Constraints:1 ≤ k ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # If k is larger than n, no valid subarray exists\n    if k > n or k == 0:\n        print(0)\n        return\n    \n    # Initial window sum (first k elements)\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    \n    # Slide the window across the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 <= i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 <= n <= 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 <= nums[i] <= 10^9).Output:Output a single integer: the number of pairs (i, j) where nums[i] + nums[j] is even.Constraints:1 <= n <= 10^5-10^9 <= nums[i] <= 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any subarray with at least one element. A subarray is a contiguous, non-empty sequence of elements within the array.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Print a single integer: the maximum sum of any subarray of nums.Constraints:1 ≤ n ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    current_max = global_max = nums[0]\n    for num in nums[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n\n    print(global_max)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that i < j and nums[i] + nums[j] is an even number. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer, the number of valid pairs (i, j) as described above.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    # Count evens and odds while reading\n    evens = odds = 0\n    for i in range(1, n + 1):\n        num = int(data[i])\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of pairs with even sum:\n    # choose any 2 evens  +  choose any 2 odds\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. You are allowed to perform at most one operation: select two different indices i and j (1 ≤ i, j ≤ n, i ≠ j) and swap nums[i] and nums[j]. Determine whether it is possible to make the array strictly increasing (nums[1] < nums[2] < ... < nums[n]) by performing at most one such swap. Output \"YES\" if it is possible, otherwise output \"NO\".Input Format:The first line contains a single integer n (2 ≤ n ≤ 10^5).The second line contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^9).Output Format:Output \"YES\" or \"NO\" on a single line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # If there are duplicate values, a strictly increasing array is impossible\n    if len(set(nums)) != n:\n        print(\"NO\")\n        return\n\n    sorted_nums = sorted(nums)\n\n    # Find positions where current array differs from the sorted array\n    diff_indices = [i for i in range(n) if nums[i] != sorted_nums[i]]\n\n    # 0 mismatches  -> already strictly increasing\n    # 2 mismatches  -> one swap between those two positions fixes the array\n    if len(diff_indices) in (0, 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6), representing the elements of the array.Output Format:Print a single integer, the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_missing_positive(nums):\n    \"\"\"\n    Returns the smallest positive integer that does not appear in nums.\n    \"\"\"\n    n = len(nums)\n    # We only care about numbers in the range [1, n+1]\n    present = [False] * (n + 2)  # indices 0..n+1\n    \n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n    \n    for i in range(1, n + 2):\n        if not present[i]:\n            return i\n    # Control should never reach here\n    return n + 2\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    result = smallest_missing_positive(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If multiple such subarrays exist, return the length of any one of them.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer — the length of the longest subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}           # value -> last index seen\n    left = 0                # left border of current window\n    best = 0                # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1      # shrink window to exclude duplicate\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) where 0 ≤ i < j < n and nums[i] + nums[j] is even. Two elements form a pair if their indices are different and i < j.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the number of valid pairs with an even sum.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Remaining tokens are the array elements\n    evens = odds = 0\n    for token in data[1:1 + n]:\n        if int(token) & 1:   # odd\n            odds += 1\n        else:                # even\n            evens += 1\n\n    # Number of pairs of evens + number of pairs of odds\n    result = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine whether it is possible to rearrange the numbers to form a palindrome. A palindrome is a sequence that reads the same backward as forward. Print \"YES\" if possible, otherwise print \"NO\".Input:The first line contains an integer N (1 ≤ N ≤ 10^5), the number of integers.The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^6).Output:Output \"YES\" if the numbers can be rearranged to form a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n    \n    freq = Counter(nums)\n    \n    odd_count = sum(1 for v in freq.values() if v % 2)\n    \n    # For a sequence to be rearranged into a palindrome:\n    # at most one value may have an odd frequency.\n    print(\"YES\" if odd_count <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements equal. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer representing the length of the longest contiguous subarray with all equal elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    max_len = 1\n    curr_len = 1\n\n    for i in range(1, n):\n        if nums[i] == nums[i - 1]:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 1\n    # final check\n    if curr_len > max_len:\n        max_len = curr_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. If all elements are the same, the answer is 1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> latest index seen\n    left = 0               # left boundary of current window\n    best = 0               # best window length found\n\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # duplicate found inside current window, move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray such that the sum of its elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[0], nums[1], ..., nums[n-1] (|nums[i]| ≤ 10^5).Output:Output a single integer representing the length of the longest contiguous subarray whose sum is equal to k. If there is no such subarray, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # if we have seen prefix_sum - k before, a subarray [prev_idx+1 .. i] sums to k\n        need = prefix_sum - k\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > max_len:\n                max_len = length\n        \n        # store earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum difference between any two elements in the array such that the larger element comes after the smaller element. If no such pair exists, return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the maximum difference as described above, or 0 if no valid pair exists.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_difference_after(nums):\n    \"\"\"\n    Returns the maximum difference nums[j] - nums[i] with j > i.\n    If every later element is less than or equal to its previous minima, returns 0.\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    min_so_far = nums[0]\n    max_diff = float('-inf')\n\n    for value in nums[1:]:\n        # Potential difference if we sell at current value having bought at min_so_far\n        max_diff = max(max_diff, value - min_so_far)\n        # Update the minimum value seen so far\n        min_so_far = min(min_so_far, value)\n\n    return max(max_diff, 0)   # If all differences are negative, return 0\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # Guarantees we only read n numbers\n    result = max_difference_after(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is equal to a given integer k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:Output a single integer — the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5  −10^9 ≤ k ≤ 10^9  −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix_sum -> earliest index where it appears\n    earliest = {0: -1}\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current prefix - k) was seen before, subarray between them sums to k\n        target = prefix_sum - k\n        if target in earliest:\n            best_len = max(best_len, i - earliest[target])\n\n        # Store only the first occurrence to maximize length\n        if prefix_sum not in earliest:\n            earliest[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to choose 2 items from k items: k * (k - 1) // 2\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single integer: the length of the longest contiguous subarray whose sum is k.Constraints:1 ≤ n ≤ 10^5  -10^9 ≤ k ≤ 10^9  -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Dictionary to store the earliest index at which each prefix sum occurs.\n    # We start with prefix sum 0 at virtual index -1 to handle subarrays starting at index 0.\n    first_index = {0: -1}\n    \n    prefix_sum = 0\n    best_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # If we've seen prefix_sum - k before, a subarray summing to k ends at i.\n        needed = prefix_sum - k\n        if needed in first_index:\n            best_len = max(best_len, i - first_index[needed])\n        \n        # Record the earliest occurrence of the current prefix sum.\n        if prefix_sum not in first_index:\n            first_index[prefix_sum] = i\n    \n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, your task is to find the length of the longest contiguous subarray whose sum is less than or equal to k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9), the number of elements in the array and the target sum.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer, the length of the longest contiguous subarray with sum ≤ k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18   # large number for initialisation\n\n\nclass SegmentTree:\n    \"\"\"\n    Segment tree that supports:\n        • point update with the minimum of current value and new value\n        • range-minimum query\n    \"\"\"\n    def __init__(self, size: int, init_val: int):\n        self.N = 1\n        while self.N < size:\n            self.N <<= 1\n        self.data = [init_val] * (2 * self.N)\n        self.init_val = init_val\n\n    def update(self, pos: int, value: int) -> None:\n        \"\"\" minimise the value stored at position `pos` \"\"\"\n        pos += self.N\n        if value >= self.data[pos]:\n            return\n        self.data[pos] = value\n        pos //= 2\n        while pos:\n            self.data[pos] = min(self.data[2 * pos], self.data[2 * pos + 1])\n            pos //= 2\n\n    def query(self, l: int, r: int) -> int:\n        \"\"\" minimum over inclusive range [l , r] \"\"\"\n        if l > r:\n            return self.init_val\n        l += self.N\n        r += self.N\n        res = self.init_val\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\n\ndef main() -> None:\n    inp = sys.stdin.read().strip().split()\n    if not inp:\n        return\n    n, k = map(int, inp[:2])\n    arr = list(map(int, inp[2:2 + n]))\n\n    # Compute prefix sums (prefix[0] = 0)\n    pref = [0]\n    s = 0\n    for x in arr:\n        s += x\n        pref.append(s)\n\n    # Coordinate-compress prefix sums\n    uniq = sorted(set(pref))\n    idx_of = {v: i for i, v in enumerate(uniq)}\n    m = len(uniq)\n\n    seg = SegmentTree(m, INF)\n\n    # Insert the initial prefix sum (value 0 at index 0)\n    seg.update(idx_of[0], 0)\n\n    best = 0\n    for i in range(1, n + 1):\n        current = pref[i]\n        threshold = current - k          # we need prefix[j] >= threshold\n\n        pos = bisect.bisect_left(uniq, threshold)\n        if pos < m:                      # there exists some prefix value ≥ threshold\n            earliest = seg.query(pos, m - 1)\n            if earliest != INF:\n                best = max(best, i - earliest)\n\n        # store the current prefix sum with its (earliest) index\n        seg.update(idx_of[current], i)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Return the total count of such pairs.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    odd = 0\n    for x in nums:\n        if x & 1:     # odd\n            odd += 1\n        else:         # even\n            even += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1. Print the length of this subarray.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the length of the longest valid contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Deques to keep track of the current window's maximum and minimum\n    max_dq = deque()   # decreasing\n    min_dq = deque()   # increasing\n    \n    left = 0\n    best = 0\n    \n    for right, val in enumerate(nums):\n        # Maintain decreasing deque for maximums\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n        \n        # Maintain increasing deque for minimums\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n        \n        # Shrink window from the left until it satisfies max - min <= 1\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n        \n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray whose sum is k. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_sum = 0\n    first_pos = {0: -1}          # prefix_sum value -> earliest index\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # if there exists a previous prefix_sum such that current - previous = k\n        if prefix_sum - k in first_pos:\n            best_len = max(best_len, i - first_pos[prefix_sum - k])\n\n        # store the first occurrence of this prefix_sum\n        if prefix_sum not in first_pos:\n            first_pos[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements (no duplicates). Print the length of this subarray.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    last_pos = {}            # value -> its latest index\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found\n    \n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # Duplicate inside current window: move left pointer\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the number of unique pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the minimum number of moves required to make all elements equal. In one move, you can increment or decrement a single element by 1 (i.e., increase or decrease its value by 1). Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer, the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return                                       # no input provided\n    n = data[0]\n    nums = data[1:]\n    if n != len(nums):\n        nums = nums[:n]                              # safeguard if extra numbers\n    \n    nums.sort()\n    median = nums[n // 2]                            # works for both even/odd n\n    moves = sum(abs(x - median) for x in nums)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the length of the longest contiguous subarray where the sum of its elements is equal to k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k.The second line contains n space-separated integers representing the elements of nums.Output Format:Output a single integer: the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4-10^9 ≤ k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array\n    whose elements sum to k.\n    \"\"\"\n    prefix_to_first_index = {0: -1}        # prefix sum → earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If a prefix with sum (current - k) exists, sub-array (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            curr_len = i - prefix_to_first_index[target]\n            if curr_len > max_len:\n                max_len = curr_len\n\n        # Only store the first time we see a prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:Print a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, a subarray summing to k ends at i\n        needed = prefix_sum - k\n        if needed in prefix_to_index:\n            best_len = max(best_len, i - prefix_to_index[needed])\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Combination nC2 = n*(n-1)//2\n    def comb2(k: int) -> int:\n        return k * (k - 1) // 2\n\n    result = comb2(even_count) + comb2(odd_count)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to 1.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Print a single integer, the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Deque for indices of elements in increasing order (front is min)\n    min_dq = deque()\n    # Deque for indices of elements in decreasing order (front is max)\n    max_dq = deque()\n\n    best = 0\n    left = 0\n\n    for right, val in enumerate(nums):\n        # Maintain min deque (increasing)\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Maintain max deque (decreasing)\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Shrink window until it satisfies condition\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            left += 1\n            # Remove indices that are out of the window\n            if min_dq[0] < left:\n                min_dq.popleft()\n            if max_dq[0] < left:\n                max_dq.popleft()\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is an even number.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums_1, nums_2, ..., nums_n (−10^9 ≤ nums_i ≤ 10^9), denoting the array elements.Output:Output a single integer: the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even_count = 0\n    odd_count = 0\n\n    for x in nums:\n        if x & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Combination counts: C(k, 2) = k * (k - 1) // 2\n    pairs = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine whether S is a palindrome or can become a palindrome by removing at most one character. Output \"YES\" if possible, otherwise output \"NO\".Input:The first line contains a string S (1 ≤ |S| ≤ 10^5).Output:Output \"YES\" if S is already a palindrome or can become one by deleting at most one character, otherwise output \"NO\".Constraints:1 ≤ |S| ≤ 10^5S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome_range(s: str, left: int, right: int) -> bool:\n    \"\"\"\n    Check whether the substring s[left:right+1] is a palindrome.\n    \"\"\"\n    while left < right and s[left] == s[right]:\n        left += 1\n        right -= 1\n    return left >= right\n\ndef can_be_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if `s` is a palindrome already, or can become one by deleting\n    at most one character.\n    \"\"\"\n    i, j = 0, len(s) - 1\n    # Move pointers inward while characters match\n    while i < j and s[i] == s[j]:\n        i += 1\n        j -= 1\n\n    # If the pointers crossed, it's already a palindrome\n    if i >= j:\n        return True\n\n    # Try deleting either the left or the right mismatching character\n    return is_palindrome_range(s, i + 1, j) or is_palindrome_range(s, i, j - 1)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_be_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers in nums that add up to target. Each input will have exactly one solution, and you may not use the same element twice. Output the indices in ascending order separated by a space.Input:The first line contains two integers n (the size of nums) and target.The second line contains n integers representing nums.Output:Output two integers, the indices (0-based) of the two numbers that add up to target, in ascending order.Constraints:2 ≤ n ≤ 10^4-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if len(data) < 3:\n        return  # insufficient input\n    \n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    seen = {}  # value -> index\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            i1, i2 = seen[complement], i\n            if i1 > i2:   # ensure ascending order\n                i1, i2 = i2, i1\n            print(i1, i2)\n            return\n        seen[num] = i\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two numbers are considered a pair if their indices are different and i < j.  Input Format:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:  - Print a single integer, the number of valid pairs.Constraints:  - 1 ≤ n ≤ 10^5  - −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    def combinations(k):\n        return k * (k - 1) // 2\n\n    result = combinations(even) + combinations(odd)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number. Output the total number of such pairs.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the number of valid pairs.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, determine if there exists a pair of distinct indices i and j such that nums[i] + nums[j] == k, where k is a given integer. Return \"YES\" if such a pair exists, otherwise return \"NO\".Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if there exists a pair with the given sum, otherwise print \"NO\".Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k, nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = set()\n    for num in nums:\n        complement = k - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^9) separated by spaces.Output:Output a single integer, the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- |nums[i]| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    max_dq = deque()   # indices of elements in non-increasing order of value\n    min_dq = deque()   # indices of elements in non-decreasing order of value\n\n    best = 0\n    left = 0\n    for right, val in enumerate(nums):\n        # maintain decreasing deque for maximums\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain increasing deque for minimums\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until constraint satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > k:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        # update answer\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is equal to a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:- Print a single integer: the length of the longest contiguous subarray whose sum is k. If no such subarray exists, print 0.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix_sum -> first index where this sum is seen\n    first_occurrence = {0: -1}\n    prefix_sum = 0\n    longest = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (prefix_sum - k) has been seen before, a subarray ending at i sums to k\n        target = prefix_sum - k\n        if target in first_occurrence:\n            longest = max(longest, i - first_occurrence[target])\n\n        # Record the first occurrence of this prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is even. If there are multiple such subarrays, any one length is acceptable. If no such subarray exists, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer representing the length of the longest contiguous subarray with an even sum.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # first_index[parity] = earliest position where this parity occurred\n    first_index = {0: -1, 1: None}\n    max_len = 0\n    parity = 0  # running parity of prefix sum (0 = even, 1 = odd)\n    \n    for i, num in enumerate(nums):\n        # Update parity: adding an odd number flips parity, even leaves it unchanged\n        parity ^= (num & 1)\n        \n        if first_index[parity] is None:\n            # First time this parity is seen, record its position\n            first_index[parity] = i\n        else:\n            # We have seen this parity before; subarray between them has even sum\n            max_len = max(max_len, i - first_index[parity])\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray such that the sum of its elements is even. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer — the length of the longest subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # first[pos] will store the first index (prefix length) where\n    # the prefix sum parity `pos` (0 for even, 1 for odd) was seen\n    # Initialize with -1 for \"not seen\". We set first[0]=0 because\n    # an empty prefix has even sum at position 0.\n    first = [-1, -1]\n    first[0] = 0\n\n    prefix_parity = 0   # parity of prefix sum so far\n    best = 0            # longest length found\n\n    # We iterate over elements, keeping track of prefix length `i+1`\n    for i, val in enumerate(nums, 1):\n        prefix_parity ^= (val & 1)  # flip parity if val is odd\n        if first[prefix_parity] != -1:\n            # Length of subarray with even sum ending here\n            best = max(best, i - first[prefix_parity])\n        else:\n            # First time seeing this parity, record the position\n            first[prefix_parity] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. If the string is empty, return 0.Input Format:- The first line contains a single integer n (0 ≤ n ≤ 10^5), the length of the string S.- The second line contains the string S.Output Format:- Output a single integer: the length of the longest substring without repeating characters.Constraints:- 0 ≤ n ≤ 10^5- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    if not s:\n        return 0\n\n    # Last seen position of each lowercase letter; initialize to -1\n    last_seen = [-1] * 26\n    start = 0          # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        idx = ord(ch) - ord('a')\n\n        # If character was seen in current window, move start right past it\n        if last_seen[idx] >= start:\n            start = last_seen[idx] + 1\n\n        last_seen[idx] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n\n    # Ensure the string length matches the provided n if needed\n    # (If not, we still operate on the actual string read.)\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer representing the length of the longest contiguous subarray that sums to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_length(nums, k):\n    # Map to store the earliest index at which a particular prefix sum occurs\n    first_index = {0: -1}          # prefix sum 0 appears before the array starts\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # If we have seen prefix_sum - k before, a subarray summing to k ends at i\n        if (prefix_sum - k) in first_index:\n            max_len = max(max_len, i - first_index[prefix_sum - k])\n\n        # Record first occurrence of a prefix_sum\n        if prefix_sum not in first_index:\n            first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray_length(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array such that\n    max(nums[l:r+1]) - min(nums[l:r+1]) <= 1\n    \"\"\"\n    min_q = deque()   # increasing deque -> front is current minimum\n    max_q = deque()   # decreasing deque -> front is current maximum\n    start = 0\n    best = 0\n\n    for end, value in enumerate(nums):\n        # Maintain monotone max deque (decreasing)\n        while max_q and value > max_q[-1]:\n            max_q.pop()\n        max_q.append(value)\n\n        # Maintain monotone min deque (increasing)\n        while min_q and value < min_q[-1]:\n            min_q.pop()\n        min_q.append(value)\n\n        # Shrink window until it is valid\n        while max_q[0] - min_q[0] > 1:\n            # Element that leaves the window\n            left_val = nums[start]\n            if left_val == max_q[0]:\n                max_q.popleft()\n            if left_val == min_q[0]:\n                min_q.popleft()\n            start += 1\n\n        # Update best\n        best = max(best, end - start + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_at_most_one(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find and return the length of the longest contiguous subarray with all elements distinct. If the array is empty, return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:- Output a single integer, the length of the longest subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}            # value -> last index seen\n    start = 0                # start index of current window\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1  # shrink window to exclude the duplicate\n        last_pos[val] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:                    # no input at all\n        return\n    n = int(data[0])\n    if n == 0:\n        print(0)\n        return\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, return the length of the longest contiguous subarray that contains at most k distinct integers. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer representing the length of the longest contiguous subarray with at most k distinct integers.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ n1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_k_distinct(nums, k):\n    freq = defaultdict(int)     # frequency of each number in the current window\n    left = 0                    # left boundary of the window\n    max_len = 0                 # result\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        # shrink the window until we have at most k distinct numbers\n        while len(freq) > k:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        # update the answer with the current window length\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    res = longest_subarray_at_most_k_distinct(nums, k)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray that contains only unique elements (i.e., no repeated numbers within the subarray).Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = dict()        # value -> last index where it appeared\n    left = 0                 # left boundary of current window\n    best = 0                 # length of the longest unique window found\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            # 'val' is inside current window -> move left boundary\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with all elements distinct. A subarray is a contiguous segment of the array. If there are multiple such subarrays, output the length of any one of them.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^9).Output Format:Output a single integer: the length of the longest subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    seen = set()\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        while value in seen:\n            seen.remove(nums[left])\n            left += 1\n        seen.add(value)\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest subarray with all elements equal. A subarray is a contiguous part of the array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest subarray with all elements equal.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    max_len = 0\n    current_len = 0\n    prev = None\n\n    for num in nums:\n        if num == prev:\n            current_len += 1\n        else:\n            prev = num\n            current_len = 1\n        if current_len > max_len:\n            max_len = current_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements (no repeats). Return the length of this subarray.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}          # Stores last index where each number appeared\n    start = 0              # Left boundary of the current window\n    best = 0               # Best length found\n\n    for i, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= start:\n            # Current value repeated inside the window → shrink window\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is equal to k. If there is no such subarray, return 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^5).Output:Output a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^5|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    \"\"\"\n    Returns length of the longest contiguous subarray whose elements sum to k.\n    \"\"\"\n    first_occurrence = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        needed = prefix_sum - k\n        if needed in first_occurrence:\n            max_len = max(max_len, i - first_occurrence[needed])\n\n        # store earliest occurrence of this prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct numbers. Return this length.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer: the length of the longest contiguous subarray containing at most two distinct numbers.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_two_distinct(nums):\n    count = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        count[val] += 1\n\n        # shrink window until we have at most 2 distinct numbers\n        while len(count) > 2:\n            left_val = nums[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_two_distinct(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that i < j and nums[i] + nums[j] is an even number. Two pairs are considered different if their indices differ. Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer — the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n    \n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # Number of ways to pick 2 evens + 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k. If k > n, return -1.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer: the maximum sum of any contiguous subarray of length exactly k, or -1 if such subarray does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # If k is larger than n, such subarray cannot exist\n    if k > n:\n        print(-1)\n        return\n\n    # Compute sum of the first window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window across the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. If all elements are the same, the answer is 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output:Output a single integer, the length of the longest subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    seen = set()\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        while val in seen:\n            # shrink window from the left until val can be inserted\n            seen.remove(nums[left])\n            left += 1\n        seen.add(val)\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer x such that x does not appear in nums. For example, if nums = [3, 4, -1, 1], the answer is 2.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Output a single integer, the smallest positive integer not present in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    present = set()\n    for v in nums:\n        if v > 0:          # only positives matter\n            present.add(v)\n    \n    # the answer is in the range 1..n+1\n    for x in range(1, n + 2):\n        if x not in present:\n            print(x)\n            return\n\n# call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the sum of the elements is strictly less than a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray with sum strictly less than k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    left = 0\n    curr_sum = 0\n    max_len = 0\n\n    for right in range(n):\n        curr_sum += arr[right]\n\n        # Shrink window until its sum becomes strictly less than k\n        while left <= right and curr_sum >= k:\n            curr_sum -= arr[left]\n            left += 1\n\n        # Now the window [left, right] has sum < k\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine whether it is possible to rearrange the characters to form a palindrome. If possible, output \"YES\", otherwise output \"NO\".Input:A single line containing the string S (1 ≤ |S| ≤ 1000).Output:Output \"YES\" if the string's characters can be rearranged to form a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines whether the characters of the string 's' can be rearranged\n    to form a palindrome.\n\n    A string can be rearranged into a palindrome if at most one character\n    has an odd frequency count.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to find the length of the longest contiguous subarray where the sum of its elements is less than or equal to k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray such that its sum is ≤ k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    left = 0\n    current_sum = 0\n    best_len = 0\n\n    for right in range(n):\n        current_sum += nums[right]\n\n        # Shrink window from the left while the sum exceeds k\n        while current_sum > k and left <= right:\n            current_sum -= nums[left]\n            left += 1\n\n        # Update best length\n        best_len = max(best_len, right - left + 1)\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Output a single integer: the length of the longest contiguous subarray with sum exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_index = {0: -1}           # prefix_sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, num in enumerate(nums):\n        prefix_sum += num\n\n        # subarray starting from 0\n        if prefix_sum == k:\n            best = max(best, i + 1)\n\n        # subarray ending at i with sum k\n        need = prefix_sum - k\n        if need in prefix_index:\n            best = max(best, i - prefix_index[need])\n\n        # store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all elements distinct. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}            # value -> most recent index\n    left = 0                 # left boundary of current window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        # If value seen and inside current window, move left pointer\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        window_len = right - left + 1\n        if window_len > max_len:\n            max_len = window_len\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with sum equal to k. If there are multiple such subarrays, return the length of any one. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^5), separated by spaces.Output Format:Output a single integer representing the length of the longest contiguous subarray whose sum is exactly k. Output 0 if no such subarray exists.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^5|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_to_index = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n        need = prefix_sum - k\n        if need in prefix_to_index:\n            best_len = max(best_len, i - prefix_to_index[need])\n        # store earliest occurrence only\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. A subarray is a sequence of elements from the array that are contiguous (i.e., appear consecutively). Return the maximum length of such a subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}\n    left = 0\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If the value was seen and is inside the current window,\n        # move the left pointer just after its previous occurrence.\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = longest_distinct_subarray_length(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray of size k, where 1 ≤ k ≤ n. Return the maximum possible sum. If the array is empty, return 0.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer: the maximum sum of any contiguous subarray of size k.Constraints:- 1 ≤ k ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_of_size_k(nums, k):\n    \"\"\"\n    Returns the maximum possible sum of any contiguous subarray\n    of exactly size k. Assumes k >= 1 and k <= len(nums).\n    \"\"\"\n    if not nums:           # Empty array guard\n        return 0\n\n    # Compute sum of first `k` elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window from left to right\n    for i in range(k, len(nums)):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    return max_sum\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                      # No input at all\n        print(0)\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    # Edge-case: empty array\n    if n == 0:\n        print(0)\n        return\n    \n    result = max_subarray_sum_of_size_k(nums, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. Return the length as an integer.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer, the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(arr):\n    seen = {}\n    left = 0\n    best = 0\n    for right, value in enumerate(arr):\n        if value in seen and seen[value] >= left:\n            left = seen[value] + 1   # shrink window past the previous index of value\n        seen[value] = right\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer representing the number of valid pairs.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    count_even = 0\n    count_odd = 0\n    for num in nums:\n        if num & 1:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    # Number of ways to choose 2 items from k items: k * (k - 1) // 2\n    pairs = count_even * (count_even - 1) // 2 + count_odd * (count_odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Each input will have exactly one solution, and you may not use the same element twice. Return the answer as an array of two indices in any order.Input Format:- The first line contains two integers n (the length of the array) and target.- The second line contains n integers representing the elements of nums.Output Format:- Output two space-separated integers, the indices of the two numbers that add up to target.Constraints:- 2 ≤ n ≤ 10^4- -10^9 ≤ nums[i] ≤ 10^9- -10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef two_sum(nums, target):\n    \"\"\"\n    Returns indices of the two numbers in `nums` that add up to `target`.\n    Assumes exactly one valid pair exists.\n    \"\"\"\n    seen = {}  # value -> index\n    for i, value in enumerate(nums):\n        complement = target - value\n        if complement in seen:\n            return seen[complement], i\n        seen[value] = i\n    # According to the problem statement, a solution always exists.\n    return -1, -1  # Fallback, should never be reached.\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    idx1, idx2 = two_sum(nums, target)\n    print(idx1, idx2)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray of length exactly k. A subarray is a sequence of consecutive elements from the array. Return the maximum sum you can obtain for any such subarray.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer: the maximum sum of any contiguous subarray of length exactly k.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window of size k\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements does not exceed k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer — the length of the longest contiguous subarray satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n    # monotonic deques\n    min_q = deque()   # increasing\n    max_q = deque()   # decreasing\n    l = 0\n    best = 0\n\n    for r, val in enumerate(nums):\n        # maintain increasing deque for minimums\n        while min_q and val < min_q[-1]:\n            min_q.pop()\n        min_q.append(val)\n        # maintain decreasing deque for maximums\n        while max_q and val > max_q[-1]:\n            max_q.pop()\n        max_q.append(val)\n\n        # shrink window if condition violated\n        while max_q[0] - min_q[0] > k:\n            left_val = nums[l]\n            if left_val == min_q[0]:\n                min_q.popleft()\n            if left_val == max_q[0]:\n                max_q.popleft()\n            l += 1\n\n        best = max(best, r - l + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the difference between the maximum and minimum element in the subarray is at most k. Return the length of such a subarray.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^50 ≤ k ≤ 10^9−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    where max(subarray) - min(subarray) <= k.\n    \"\"\"\n    min_dq = deque()   # increasing deque (front is current minimum)\n    max_dq = deque()   # decreasing deque (front is current maximum)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # maintain monotone deques\n        while min_dq and value < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(value)\n\n        while max_dq and value > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(value)\n\n        # shrink window until it becomes valid again\n        while max_dq[0] - min_dq[0] > k:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(longest_subarray(nums, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all unique elements. Output the length of this subarray.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer representing the length of the longest contiguous subarray with all unique elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    last_pos = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Output a single integer — the number of valid pairs whose sum is even.Constraints:1 ≤ n ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    for num in nums:\n        if num & 1 == 0:      # check parity (even if last bit is 0)\n            even_count += 1\n\n    odd_count = n - even_count\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    result = even_count * (even_count - 1) // 2 + odd_count * (odd_count - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine whether it is possible to split the list into two non-empty subsets such that the sum of the elements in both subsets is equal. If possible, print \"YES\"; otherwise, print \"NO\".Input Format:The first line contains a single integer N (2 ≤ N ≤ 100).The second line contains N integers a1, a2, ..., aN (-1000 ≤ ai ≤ 1000).Output Format:Print \"YES\" if such a split is possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    total = sum(arr)\n\n    # If total sum is odd, equal split is impossible\n    if total % 2 != 0:\n        print(\"NO\")\n        return\n\n    target = total // 2\n\n    # dp maps a possible sum to a bit-mask whose k-th bit is 1\n    # iff that sum can be obtained with a subset of size k.\n    dp = {0: 1}          # empty subset -> sum 0, size 0\n\n    for a in arr:\n        new_dp = dp.copy()\n        for s, mask in dp.items():\n            ns = s + a\n            new_mask = mask << 1          # all sizes increase by 1\n            new_dp[ns] = new_dp.get(ns, 0) | new_mask\n        dp = new_dp\n\n    mask = dp.get(target, 0)\n\n    # we need a non-empty subset that is not the whole set\n    possible = any((mask >> k) & 1 for k in range(1, n))\n    print(\"YES\" if possible else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different.  Input:  The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).  Output:  Output a single integer: the number of unique pairs (i, j) where i < j and nums[i] + nums[j] is even.  Constraints:  1 ≤ n ≤ 10^5  1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    def choose2(k: int) -> int:\n        return k * (k - 1) // 2\n\n    result = choose2(even_cnt) + choose2(odd_cnt)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being distinct. If all elements are the same, return 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the length of the longest contiguous subarray with all elements distinct.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    in which all elements are distinct.\n    \"\"\"\n    last_pos = {}            # value -> latest index where it appeared\n    max_len = 0\n    left = 0                 # left end of the current window\n\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate inside current window; move left past its last occurrence\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n    # If input might contain fewer than n numbers, the slicing above guards against IndexError.\n    # Problem guarantees 1 ≤ n ≤ 1e5, so nums length should be n in valid cases.\n    result = longest_distinct_subarray(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains only even numbers. If there are no even numbers, return 0.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer, the length of the longest contiguous subarray with only even numbers.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # safeguard if extra tokens\n    max_len = 0\n    current = 0\n    for num in nums:\n        if num % 2 == 0:\n            current += 1\n            if current > max_len:\n                max_len = current\n        else:\n            current = 0\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer: the smallest positive integer not present in nums.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    present = set()\n    for val in nums:\n        if val > 0:      # only positives matter\n            present.add(val)\n    \n    # The smallest missing positive is in [1, n+1]\n    for candidate in range(1, n + 2):\n        if candidate not in present:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring without repeating characters.Input:The first line contains a single string S (1 ≤ |S| ≤ 10^5), consisting of lowercase English letters.Output:Print a single integer: the length of the longest substring of S that contains no repeating characters.Constraints:- 1 ≤ |S| ≤ 10^5- S consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the last index where each character was seen\n    last_index = {}\n    start = 0        # Left end of current window\n    max_len = 0      # Result\n\n    for i, ch in enumerate(s):\n        if ch in last_index and last_index[ch] >= start:\n            # Character repeated inside current window, move start\n            start = last_index[ch] + 1\n        # Update / set last seen index\n        last_index[ch] = i\n        # Update maximum length\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements being unique (i.e., no repeated elements). If all elements are unique, return n.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(nums):\n    \"\"\"\n    Returns the length of the longest contiguous sub-array \n    containing all unique elements.\n    \"\"\"\n    seen = {}             # value -> most recent index\n    best = 0\n    left = 0              # left bound of the current window\n\n    for right, val in enumerate(nums):\n        # If val has been seen and is inside the window, move left pointer\n        if val in seen and seen[val] >= left:\n            left = seen[val] + 1\n        seen[val] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. A subarray is called \"good\" if the sum of its elements is even. Your task is to count the total number of good subarrays in nums.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer: the number of good subarrays.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Counter for parity of prefix sums: 0 -> even, 1 -> odd.\n    cnt = Counter()\n    cnt[0] = 1          # empty prefix has even (zero) sum\n    prefix_parity = 0\n    for x in nums:\n        prefix_parity ^= (x & 1)   # update parity (only the last bit matters)\n        cnt[prefix_parity] += 1\n\n    # For each parity, choose any two equal parities to form an even-sum subarray\n    ans = 0\n    for c in cnt.values():\n        ans += c * (c - 1) // 2\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is exactly equal to a given integer k. If there is no such subarray, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_index = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, num in enumerate(nums):\n        prefix_sum += num\n        \n        # If (current prefix - k) seen before, a subarray summing to k ends here\n        target = prefix_sum - k\n        if target in prefix_index:\n            max_len = max(max_len, i - prefix_index[target])\n        \n        # Record earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums with length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is an even number.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers, nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer: the number of valid pairs.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = 0\n    odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, find the maximum sum of any contiguous subarray of length exactly k. If there are multiple such subarrays with the same maximum sum, return the leftmost one. Output the starting and ending indices (0-based) of this subarray.Input Format:- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output two integers representing the starting and ending indices of the subarray with the maximum sum.Constraints:- 1 ≤ k ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initial window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    best_start = 0\n\n    # Slide the window\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n            best_start = i - k + 1  # new window's start index\n\n    print(best_start, best_start + k - 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer x that does not appear in nums. If all positive integers up to n appear in nums, return n+1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer: the smallest positive integer missing from nums.Constraints:1 ≤ n ≤ 10^5−10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Boolean marker array where idx i represents the presence of integer i\n    present = [False] * (n + 1)          # indices 0..n   (ignore index 0)\n\n    for num in nums:\n        if 1 <= num <= n:                # only care about values that could be the answer\n            present[num] = True\n\n    # Find the first positive integer that is not present\n    for i in range(1, n + 1):\n        if not present[i]:\n            print(i)\n            return\n\n    # If all 1..n are present, then answer is n + 1\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of a contiguous subarray with length at least k. The array may contain both positive and negative numbers. If there are multiple subarrays with the same maximum sum, return the sum of any one of them.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer, the maximum sum of a contiguous subarray of length at least k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                         # empty input guard\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Prefix sums: pref[i] = sum of first i elements (pref[0] = 0)\n    pref = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1] + nums[i - 1]\n\n    best = -10**18                      # smaller than any possible sum\n    min_pref = 0                        # minimum prefix up to current window start\n\n    # Iterate over possible subarray ending positions (1-based in pref array)\n    for end in range(k, n + 1):\n        # Update minimum prefix that can start a subarray of length ≥ k\n        min_pref = min(min_pref, pref[end - k])\n        # Current best with subarray ending at `end`\n        best = max(best, pref[end] - min_pref)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring without repeating characters.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.- The second line contains the string S.Output Format:- Print a single integer: the length of the longest substring of S with all distinct characters.Constraints:- 1 ≤ n ≤ 10^5- S consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains\n    all distinct characters.\n    \"\"\"\n    last_pos = [-1] * 26           # since the string has only lowercase letters\n    left = 0                       # left end of the current window\n    best = 0                       # best length found so far\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97         # map 'a'..'z' to 0..25\n        # if character was seen inside current window, move `left`\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # first line is the length, second is the string\n    # `n` is not strictly needed but we read it for completeness\n    # Using `strip` to be safe against trailing spaces / newlines\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Safety check (optional)\n    if n != len(s):\n        s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray whose sum is equal to a given integer K.Input:The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).Output:Print a single integer: the length of the longest contiguous subarray that sums to K. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        k = int(next(it))\n    except StopIteration:\n        return\n\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_idx = {0: -1}   # prefix_sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for idx, value in enumerate(arr):\n        prefix_sum += value\n\n        # If we've seen (prefix_sum - k) before, subarray between the two sums is k.\n        target = prefix_sum - k\n        if target in prefix_to_first_idx:\n            best_len = max(best_len, idx - prefix_to_first_idx[target])\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_idx:\n            prefix_to_first_idx[prefix_sum] = idx\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct. If all elements are distinct, return n.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    last_pos = {}          # number -> most recent index\n    left = 0               # start of current window\n    max_len = 0\n\n    for right, value in enumerate(nums):\n        # If value seen in current window, move left pointer\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n\n        last_pos[value] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Print the length of this subarray.Input:The first line contains a single integer N (1 ≤ N ≤ 10^5).The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).Output:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ N ≤ 10^51 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(arr):\n    # Deques that will keep potential min and max values of the window\n    max_dq = deque()   # non-increasing\n    min_dq = deque()   # non-decreasing\n\n    best = 0\n    left = 0\n\n    for right, value in enumerate(arr):\n        # Maintain deque for maximums\n        while max_dq and value > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(value)\n\n        # Maintain deque for minimums\n        while min_dq and value < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(value)\n\n        # Shrink window while invalid\n        while max_dq[0] - min_dq[0] > 1:\n            if arr[left] == max_dq[0]:\n                max_dq.popleft()\n            if arr[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_one(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the maximum value of any contiguous subarray of length k. If there are multiple such subarrays, return the leftmost one. Print the elements of this subarray separated by spaces.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print k integers — the elements of the leftmost contiguous subarray of length k with the maximum sum.Constraints:1 ≤ k ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # Initial window\n    curr_sum = sum(nums[:k])\n    best_sum = curr_sum\n    best_start = 0\n\n    # Slide the window\n    for right in range(k, n):\n        curr_sum += nums[right] - nums[right - k]\n        if curr_sum > best_sum:\n            best_sum = curr_sum\n            best_start = right - k + 1  # new window starts here\n\n    # Output the best subarray\n    result = nums[best_start:best_start + k]\n    sys.stdout.write(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine whether any two distinct numbers in the list sum up to a given target value T. Output \"YES\" if such a pair exists, otherwise output \"NO\".Input:The first line contains two integers N and T (1 ≤ N ≤ 10^5, -10^9 ≤ T ≤ 10^9).The second line contains N integers a_1, a_2, ..., a_N (-10^9 ≤ a_i ≤ 10^9).Output:Output \"YES\" if there exist two distinct indices i and j such that a_i + a_j = T, otherwise output \"NO\".Constraints:- 1 ≤ N ≤ 10^5- -10^9 ≤ T, a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        target = int(next(it))\n    except StopIteration:\n        return\n    \n    # If fewer than 2 numbers, impossible to form a pair\n    if n < 2:\n        print(\"NO\")\n        return\n    \n    seen = set()\n    for _ in range(n):\n        try:\n            x = int(next(it))\n        except StopIteration:\n            break\n        if (target - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that does not appear in nums. You must solve this in O(n) time and use O(1) extra space (not counting the input array).  For example, if nums = [3, 4, -1, 1], the answer is 2.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^6 ≤ nums[i] ≤ 10^6).Output Format:Print a single integer — the smallest missing positive integer.Constraints:1 ≤ n ≤ 10^5-10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef first_missing_positive(nums):\n    n = len(nums)\n    # Place each number x (if 1 <= x <= n) to position x-1\n    for i in range(n):\n        while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n            target_idx = nums[i] - 1\n            nums[i], nums[target_idx] = nums[target_idx], nums[i]\n\n    # The first index i such that nums[i] != i + 1 is the answer\n    for i in range(n):\n        if nums[i] != i + 1:\n            return i + 1\n    # If all positions are correct, the missing number is n + 1\n    return n + 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(first_missing_positive(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of distinct elements in the list whose sum is equal to a given target value k. Return \"YES\" if such a pair exists, otherwise return \"NO\".Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9), the number of integers and the target sum.The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).Output:Print \"YES\" if there exists a pair of distinct elements whose sum is k, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray with all distinct elements. Return the length of this subarray.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    last_index = {}          # value -> last position seen\n    left = 0                 # left boundary of current window\n    best = 0                 # best window length found\n\n    for right, val in enumerate(nums):\n        # If val already inside current window, shrink window from the left\n        if val in last_index and last_index[val] >= left:\n            left = last_index[val] + 1\n        # Update last seen position of val\n        last_index[val] = right\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. A pair (i, j) is considered unique if there is no other pair with the same two numbers. Return the count of unique pairs.Input:The first line contains two integers n (1 ≤ n ≤ 10^4) and target (−10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of unique pairs whose sum is equal to target.Constraints:- 1 ≤ n ≤ 10^4- −10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = Counter(nums)\n    unique_pairs = 0\n\n    for x in list(freq.keys()):\n        y = target - x\n        if y not in freq:\n            continue\n        if x < y:                  # unordered pair, x appears before y lexicographically\n            unique_pairs += 1\n        elif x == y:               # need at least two occurrences of the same number\n            if freq[x] >= 2:\n                unique_pairs += 1\n        # if x > y -> pair was already counted when processing y\n\n    print(unique_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer representing the length of the longest contiguous subarray whose sum is exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}          # prefix sum -> earliest index\n    longest = 0\n    prefix = 0\n\n    for i, num in enumerate(nums):\n        prefix += num\n\n        # If we have seen prefix - k before, a subarray summing to k ends here\n        target = prefix - k\n        if target in prefix_to_first_index:\n            longest = max(longest, i - prefix_to_first_index[target])\n\n        # Store the first occurrence of this prefix sum\n        if prefix not in prefix_to_first_index:\n            prefix_to_first_index[prefix] = i\n\n    return longest\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous elements) where the sum of the elements is equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output:Output a single integer, the length of the longest subarray whose sum is exactly k. If no such subarray exists, output 0.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}     # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current prefix - k) has been seen, a subarray summing to k ends here\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > max_len:\n                max_len = length\n\n        # Record earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), separated by spaces.Output:Print a single integer: the length of the longest contiguous subarray whose sum is equal to k. If there is no such subarray, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}       # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            best_len = max(best_len, i - prefix_to_index[target])\n\n        # store earliest occurrence only\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray whose elements sum up to a given integer k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^5) separated by spaces.Output Format:- Print a single integer representing the length of the longest contiguous subarray with sum equal to k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^5- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_to_index = {0: -1}             # prefix sum -> earliest index\n    prefix_sum = 0\n    longest = 0\n    \n    for i, val in enumerate(nums):\n        prefix_sum += val\n        \n        # If we've seen prefix_sum - k before, subarray (prev_idx+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_index:\n            longest = max(longest, i - prefix_to_index[target])\n        \n        # Store the earliest occurrence of each prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n    \n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with all distinct elements. Return the length as an integer.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:Output a single integer, the maximum length of any contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}                # value -> last index seen\n    left = 0\n    best = 0\n    for right, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1   # shrink window past the duplicate\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_distinct_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different. Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.Output Format:- Output a single integer: the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for num in nums:\n        if num & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of pairs with both numbers even plus both numbers odd\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, determine if there exist two distinct indices i and j such that nums[i] + nums[j] == target. If such a pair exists, output the indices (1-based) in increasing order; otherwise, output -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print two integers: the indices of the two numbers (1-based) if such a pair exists, or -1 -1 otherwise.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> index (1-based)\n\n    for idx, val in enumerate(nums, 1):          # 1-based index\n        need = target - val\n        if need in seen:\n            i, j = seen[need], idx\n            if i > j:                            # output in increasing order\n                i, j = j, i\n            print(f\"{i} {j}\")\n            return\n        # store only the first occurrence to keep earliest index\n        if val not in seen:\n            seen[val] = idx\n\n    print(\"-1 -1\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the length of the longest contiguous subarray such that the sum of its elements is less than or equal to a given integer S.Input Format:The first line contains two integers N and S (1 ≤ N ≤ 10^5, 1 ≤ S ≤ 10^9).The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4).Output Format:Print a single integer, the length of the longest contiguous subarray with sum ≤ S.Constraints:1 ≤ N ≤ 10^51 ≤ S ≤ 10^91 ≤ A_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_leq_s(arr, s):\n    left = 0\n    curr_sum = 0\n    max_len = 0\n    \n    for right, val in enumerate(arr):\n        curr_sum += val\n        \n        # shrink window until the sum is <= s\n        while curr_sum > s and left <= right:\n            curr_sum -= arr[left]\n            left += 1\n        \n        # right - left + 1 is current window length\n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = int(data[1])\n    arr = list(map(int, data[2:2 + n]))  # make sure we only take n numbers\n    print(longest_subarray_leq_s(arr, s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting only of lowercase English letters, determine the minimum number of characters you must delete from S to make it a palindrome. A palindrome is a string that reads the same forwards and backwards.Input:The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases.For each test case, a single line follows with the string S (1 ≤ |S| ≤ 1000).Output:For each test case, output a single integer representing the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Minimum deletions = len(s) - length of the Longest Palindromic Subsequence (LPS).\n    LPS of s equals the Longest Common Subsequence (LCS) of s and its reverse.\n    \"\"\"\n    n = len(s)\n    rev = s[::-1]\n\n    # 1-D DP for LCS length between s and rev\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prev = 0          # dp[j-1] from previous iteration (diagonal element)\n        for j in range(1, n + 1):\n            temp = dp[j]  # store current dp[j] before overwriting\n            if s[i - 1] == rev[j - 1]:\n                dp[j] = prev + 1\n            else:\n                dp[j] = max(dp[j], dp[j - 1])\n            prev = temp\n\n    lps_len = dp[n]\n    return n - lps_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    idx = 1\n    for _ in range(t):\n        s = data[idx]\n        idx += 1\n        print(min_deletions_to_palindrome(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is exactly k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Print a single integer: the length of the longest contiguous subarray with sum equal to k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    prefix_to_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        needed = prefix_sum - k\n        if needed in prefix_to_index:\n            max_len = max(max_len, i - prefix_to_index[needed])\n\n        # store earliest occurrence of current prefix sum\n        if prefix_sum not in prefix_to_index:\n            prefix_to_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to return the length of the longest contiguous subarray in which the absolute difference between any two elements is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray_at_most_one(nums):\n    inc = deque()     # indices, values increasing -> front is current minimum\n    dec = deque()     # indices, values decreasing -> front is current maximum\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain monotone increasing deque for minimum\n        while inc and nums[inc[-1]] > val:\n            inc.pop()\n        inc.append(right)\n\n        # maintain monotone decreasing deque for maximum\n        while dec and nums[dec[-1]] < val:\n            dec.pop()\n        dec.append(right)\n\n        # shrink window until condition satisfied\n        while nums[dec[0]] - nums[inc[0]] > 1:\n            if inc[0] == left:\n                inc.popleft()\n            if dec[0] == left:\n                dec.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_subarray_at_most_one(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer k.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) representing the array.Output Format:Print a single integer — the length of the longest contiguous subarray with sum equal to k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Map to store the first index where each prefix sum appears.\n    first_idx = {0: -1}      # Prefix sum 0 occurs before the array starts.\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If (current prefix - k) has appeared before, a subarray summing to k ends at i.\n        target = prefix_sum - k\n        if target in first_idx:\n            best_len = max(best_len, i - first_idx[target])\n\n        # Record the earliest occurrence of this prefix sum.\n        if prefix_sum not in first_idx:\n            first_idx[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum equal to a given integer k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Output a single integer representing the length of the longest contiguous subarray whose sum is exactly k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_with_sum_k(nums, k):\n    prefix_to_first_index = {0: -1}     # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If there is a prefix with sum (prefix_sum - k), then the subarray\n        # between that prefix's next position and current i sums to k.\n        if (prefix_sum - k) in prefix_to_first_index:\n            candidate_len = i - prefix_to_first_index[prefix_sum - k]\n            if candidate_len > max_len:\n                max_len = candidate_len\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    result = longest_subarray_with_sum_k(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum sum of any contiguous subarray with a length of at least k. A subarray is a sequence of consecutive elements from the array. Output the maximum sum you can obtain from such a subarray.Input:The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).Output:Print a single integer — the maximum sum of any contiguous subarray of length at least k.Constraints:1 ≤ k ≤ n ≤ 10^5−10^4 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n    \n    prefix_sums = [0] * (n + 1)      # prefix_sums[i] = sum of first i elements\n    min_prefix = 0                   # minimum prefix value seen so far (up to index i-k)\n    best = -10**18                   # very small initial value\n    \n    current_prefix = 0\n    for i in range(1, n + 1):\n        current_prefix += arr[i - 1]\n        prefix_sums[i] = current_prefix\n        \n        if i >= k:\n            # include prefix up to index i-k into the \"allowed\" set\n            if prefix_sums[i - k] < min_prefix:\n                min_prefix = prefix_sums[i - k]\n            \n            # candidate subarray ends at i (inclusive)\n            candidate = current_prefix - min_prefix\n            if candidate > best:\n                best = candidate\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the smallest positive integer that does not appear in nums. For example, if nums = [3, 4, -1, 1], the answer is 2 because 1 is present but 2 is not. You must solve this in O(n) time and use constant extra space.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of nums.  The second line contains n integers separated by spaces, representing nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output Format:Print a single integer, the smallest positive integer not present in nums.Constraints:- 1 ≤ n ≤ 10^5- −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # In-place placement: put value v at index v-1 whenever possible\n    i = 0\n    while i < n:\n        v = nums[i]\n        if 1 <= v <= n and nums[v - 1] != v:\n            nums[i], nums[v - 1] = nums[v - 1], nums[i]  # swap\n        else:\n            i += 1\n\n    # First index where value is wrong gives the answer\n    for i in range(n):\n        if nums[i] != i + 1:\n            print(i + 1)\n            return\n\n    # If all 1..n are present, answer is n+1\n    print(n + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is strictly greater than zero. If there is no such subarray, return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n space-separated integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer: the length of the longest contiguous subarray with a sum strictly greater than zero.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_positive_sum_subarray_length(nums):\n    n = len(nums)\n    # prefix sums: pref[i] = sum(nums[:i])\n    pref = [0]*(n+1)\n    for i in range(n):\n        pref[i+1] = pref[i] + nums[i]\n\n    # build a stack of indices whose prefix sums form a strictly decreasing sequence\n    stack = []\n    for i, val in enumerate(pref):\n        if not stack or val < pref[stack[-1]]:\n            stack.append(i)\n\n    # scan from the right to find the farthest j with pref[j] > pref[i]\n    ans = 0\n    for j in range(n, -1, -1):\n        while stack and stack[-1] < j and pref[j] > pref[stack[-1]]:\n            ans = max(ans, j - stack[-1])\n            stack.pop()          # that i can no longer give a larger width for smaller j's\n    return ans\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_positive_sum_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, return the first non-repeating character in S. If every character repeats, return '_'. For example, if S = \"leetcode\", the first non-repeating character is 'l'. If S = \"aabbcc\", return '_'.Input:A single line containing the string S (1 ≤ |S| ≤ 10^5).Output:A single character: the first non-repeating character, or '_' if none exists.Constraints:- S consists only of lowercase English letters.- 1 ≤ |S| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()          # read the string\n    freq = Counter(s)                         # count frequency of each character\n    \n    for ch in s:                              # find first char with frequency 1\n        if freq[ch] == 1:\n            print(ch)\n            return\n    \n    print('_')                                # no non-repeating character found\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums with length n, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices. Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the number of unique pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Number of ways to pick 2 items from k items: k * (k - 1) // 2\n    pairs = even_count * (even_count - 1) // 2\n    pairs += odd_count * (odd_count - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest subarray with all distinct elements. A subarray is a contiguous sequence of elements within the array.  Input:  The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), representing the elements of the array.  Output:  Print a single integer: the length of the longest subarray where all elements are distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    last_pos = {}                # value -> last index it appeared at\n    left = 0                     # left end of the current window\n    best = 0\n    for right, value in enumerate(nums):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate found inside current window; shrink window from left\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:1 + n]\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the difference between the maximum and minimum elements is at most k. Return this length.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output Format:- Print a single integer representing the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    max_d = deque()  # stores indices, elements in decreasing order\n    min_d = deque()  # stores indices, elements in increasing order\n    l = 0\n    best = 0\n\n    for r, val in enumerate(nums):\n        # Maintain max deque (decreasing)\n        while max_d and nums[max_d[-1]] < val:\n            max_d.pop()\n        max_d.append(r)\n\n        # Maintain min deque (increasing)\n        while min_d and nums[min_d[-1]] > val:\n            min_d.pop()\n        min_d.append(r)\n\n        # Shrink window until it becomes valid\n        while nums[max_d[0]] - nums[min_d[0]] > k:\n            l += 1\n            if max_d[0] < l:\n                max_d.popleft()\n            if min_d[0] < l:\n                min_d.popleft()\n\n        # Update answer\n        best = max(best, r - l + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, find the length of the longest contiguous subarray with all distinct elements. If there are multiple such subarrays, return the length of any one of them.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Print a single integer representing the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(nums):\n    \"\"\"\n    Sliding window to keep track of the longest subarray with all distinct elements.\n    \"\"\"\n    last_pos = {}           # value -> its latest index in the current window\n    left = 0                # left pointer of the window\n    max_len = 0\n\n    for right, val in enumerate(nums):\n        # If val is already inside the window and its last occurrence is >= left,\n        # move left pointer just after that occurrence.\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        # Update / add current value's position\n        last_pos[val] = right\n        # Update max length found so far\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_distinct_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of a non-empty subarray (contiguous elements) such that the subarray contains at most one negative number. If there are multiple subarrays with the same maximum sum, return the sum of any one of them.Input:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of nums.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:- Output a single integer: the maximum sum as described above.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nINF_NEG = -10**18        # a value smaller than any possible answer (since min sum >= -10^9)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    no_neg   = INF_NEG    # best sum ending at current index with 0 negatives\n    one_neg  = INF_NEG    # best sum ending at current index with exactly 1 negative\n    answer   = INF_NEG\n\n    for x in nums:\n        if x >= 0:\n            # new_no_neg : either start at x or extend previous no_neg\n            new_no_neg = x if no_neg == INF_NEG else max(no_neg + x, x)\n\n            # new_one_neg : only possible by extending previous one_neg\n            new_one_neg = INF_NEG if one_neg == INF_NEG else one_neg + x\n        else:  # x is negative\n            new_no_neg = INF_NEG  # cannot end with 0 negatives if last number is negative\n\n            # new_one_neg : either take x alone, or append x to a previous all-non-negative segment\n            if no_neg != INF_NEG:\n                new_one_neg = max(x, no_neg + x)\n            else:\n                new_one_neg = x\n\n        no_neg, one_neg = new_no_neg, new_one_neg\n        # update global answer with any attainable subarray ending here\n        if no_neg > answer:\n            answer = no_neg\n        if one_neg > answer:\n            answer = one_neg\n\n    print(answer)\n\n\n# -----  boilerplate -----\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of the elements is exactly k. If there is no such subarray, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer—the length of the longest contiguous subarray with sum exactly k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    prefix_index = {0: -1}        # prefix_sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(nums):\n        prefix_sum += val\n\n        # If there exists a previous prefix with value (current_sum - k),\n        # the subarray (prev_index+1 .. i) sums to k.\n        need = prefix_sum - k\n        if need in prefix_index:\n            best = max(best, i - prefix_index[need])\n\n        # Store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_index:\n            prefix_index[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to make the array strictly increasing by removing at most one element. An array is strictly increasing if nums[i] < nums[i+1] for every valid i (0 ≤ i < n-1).Input Format:The first line contains a single integer n (2 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[0], nums[1], ..., nums[n-1] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print \"YES\" if it is possible to make the array strictly increasing by removing at most one element. Otherwise, print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_be_strictly_increasing(nums):\n    \"\"\"\n    Returns True if we can remove at most one element from nums\n    to obtain a strictly increasing sequence, otherwise False.\n    \"\"\"\n    removed = False        # have we already removed an element?\n    prev = nums[0]         # last element in the (potentially modified) sequence\n    \n    for i in range(1, len(nums)):\n        if nums[i] <= prev:                # a violation of strict increase\n            if removed:                    # already removed one -> can't fix\n                return False\n            removed = True                 # we'll try removing one element\n            \n            # Decide whether to “remove” nums[i] or prev (nums[i-1])\n            # 1. If i == 1 we can always drop nums[i-1].\n            # 2. Otherwise, if nums[i] is greater than nums[i-2],\n            #    we can drop nums[i-1] (set prev = nums[i]).\n            if i == 1 or nums[i] > nums[i - 2]:\n                prev = nums[i]             # remove nums[i-1]\n            # else: keep prev unchanged, effectively removing nums[i]\n        else:\n            prev = nums[i]                 # no violation, advance normally\n    return True\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # For n <= 2 we can always remove at most one element to make it increasing\n    if n <= 2 or can_be_strictly_increasing(nums):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray such that the sum of its elements is even. If no such subarray exists, return 0.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- A single integer representing the length of the longest contiguous subarray with an even sum.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    # first_occurrence[parity] stores the first index where this parity appeared\n    # Indexing prefix positions from 0 to n\n    first_occurrence = [-1, -1]\n    first_occurrence[0] = 0          # empty prefix has even (0) parity\n\n    current_parity = 0               # parity of prefix sum up to current element\n    longest = 0\n\n    for i, num in enumerate(nums, 1):    # i is 1-based length of prefix considered\n        current_parity ^= (num & 1)      # flip parity if num is odd\n\n        if first_occurrence[current_parity] == -1:\n            # first time we see this parity – record its position\n            first_occurrence[current_parity] = i\n        else:\n            # subarray (first_occurrence .. i-1) has even sum\n            longest = max(longest, i - first_occurrence[current_parity])\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find two distinct indices i and j such that nums[i] + nums[j] == target. Return the pair of indices as a space-separated pair in increasing order (i < j). If there are multiple pairs, return the one with the smallest i; if there are multiple with the same i, return the one with the smallest j. If no such pair exists, output -1.Input:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:A single line with two integers i and j (0-based), or -1 if no such pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Build value -> list of indices\n    pos_map = {}\n    for idx, val in enumerate(nums):\n        pos_map.setdefault(val, []).append(idx)\n\n    for i, val in enumerate(nums):\n        complement = target - val\n        if complement in pos_map:\n            idx_list = pos_map[complement]\n            # find the first position strictly greater than i\n            j_pos = bisect.bisect_right(idx_list, i)\n            if j_pos < len(idx_list):\n                j = idx_list[j_pos]\n                print(f\"{i} {j}\")\n                return\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum you can obtain by selecting a non-empty subsequence such that no two selected elements are adjacent in the original list.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the list.- The second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).Output Format:- Output a single integer, the maximum sum possible under the given constraint.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n\n    # Handle the single element case directly\n    if n == 1:\n        print(a[0])\n        return\n\n    # Standard \"house-robber\" DP but allow empty set during the run.\n    incl = a[0]          # best sum where a[0] is taken\n    excl = 0             # best sum where a[0] is NOT taken (could be empty)\n\n    for x in a[1:]:\n        new_incl = excl + x\n        new_excl = max(incl, excl)\n        incl, excl = new_incl, new_excl\n\n    result = max(incl, excl)\n\n    # Guarantee the subsequence is non-empty.\n    if result == 0:\n        # If there exists a real 0 in the list we can pick it, else pick\n        # the largest (i.e., least negative) element.\n        if 0 in a:\n            result = 0\n        else:\n            result = max(a)\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N non-negative integers, find the minimum number of operations required to make all elements equal. In one operation, you may increment or decrement any single element by 1. Output the minimum number of operations needed.Input Format:The first line contains an integer N (1 ≤ N ≤ 10^5).The second line contains N space-separated integers A1, A2, ..., AN (0 ≤ Ai ≤ 10^9).Output Format:Output a single integer representing the minimum number of operations.Constraints:1 ≤ N ≤ 10^50 ≤ Ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    if n == 1:\n        print(0)\n        return\n\n    nums.sort()\n    median = nums[n // 2]          # works for both even and odd n\n    total_moves = sum(abs(x - median) for x in nums)\n    print(total_moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, return the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == k. Two pairs are considered different if they use different indices.  Input Format:  - The first line contains two integers n (the length of the array) and k.  - The second line contains n integers representing the array nums.Output Format:  - Print a single integer: the number of unique pairs whose sum equals k.Constraints:  - 1 ≤ n ≤ 10^4  - -10^6 ≤ nums[i], k ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:          # no input\n        return\n\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = Counter(nums)        # frequency of each number\n    pairs = 0\n    processed = set()           # keep track of numbers already paired to avoid double-counting\n\n    for num in freq:\n        compl = k - num\n        if compl not in freq:           # no complement present\n            continue\n\n        if compl == num:                # pair formed by identical numbers\n            pairs += freq[num] * (freq[num] - 1) // 2\n        elif compl not in processed:    # count each unordered pair only once\n            pairs += freq[num] * freq[compl]\n\n        processed.add(num)\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer: the length of the longest contiguous subarray satisfying the condition.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Deques to keep track of current window's max and min in O(1) time\n    max_dq = deque()        # decreasing: front is current max\n    min_dq = deque()        # increasing: front is current min\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Insert current element in deques\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        # Shrink window from the left until it satisfies max - min <= 1\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n and an integer k, your task is to determine the length of the longest contiguous subarray where the absolute difference between any two elements in the subarray is less than or equal to k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output:Print a single integer: the length of the longest valid contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef longest_subarray(nums, k):\n    min_dq = deque()  # increasing deque for minima\n    max_dq = deque()  # decreasing deque for maxima\n    left = 0\n    best = 0\n\n    for right, val in enumerate(nums):\n        # maintain monotone deques\n        while min_dq and val < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(val)\n\n        while max_dq and val > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(val)\n\n        # shrink window until condition satisfied\n        while max_dq[0] - min_dq[0] > k:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    print(longest_subarray(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with at most two distinct numbers.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^6).Output Format:- Output a single integer, the length of the longest contiguous subarray with at most two distinct numbers.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_two(nums):\n    freq = defaultdict(int)\n    left = 0\n    max_len = 0\n\n    for right, num in enumerate(nums):\n        freq[num] += 1\n\n        # Shrink window until we have at most two distinct numbers\n        while len(freq) > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        # Update maximum length found so far\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_subarray_at_most_two(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all elements distinct (i.e., no repeated elements within the subarray).Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the length of the longest contiguous subarray with all unique elements.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    \"\"\"\n    Reads an array of integers and prints the length of the longest\n    contiguous subarray containing only distinct elements.\n    \"\"\"\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    left = 0\n    current_set = set()\n    best = 0\n\n    for right, val in enumerate(nums):\n        # Shrink the window from the left until `val` is unique inside it.\n        while val in current_set:\n            current_set.remove(nums[left])\n            left += 1\n        current_set.add(val)\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the absolute difference between any two elements in the subarray is at most 1. If there are multiple such subarrays, output the length of the longest one.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5).The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).Output:Output a single integer: the length of the longest valid subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1+n]))\n\n    # Deques to keep indices of current window's max and min in monotone order\n    max_dq = deque()   # decreasing values -> front is current max\n    min_dq = deque()   # increasing values -> front is current min\n\n    left = 0\n    best = 0\n\n    for right, val in enumerate(a):\n        # Maintain decreasing max deque\n        while max_dq and a[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # Maintain increasing min deque\n        while min_dq and a[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # Shrink window while condition violated\n        while a[max_dq[0]] - a[min_dq[0]] > 1:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between any two elements is at most 1. Return this length.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10^9), separated by spaces.Output Format:Print a single integer, the length of the longest such contiguous subarray.Constraints:1 ≤ n ≤ 10^50 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    min_dq, max_dq = deque(), deque()   # monotone queues for current window\n    left = 0\n    best = 0\n\n    for right, value in enumerate(nums):\n        # insert current value, keeping deques monotone\n        while min_dq and value < min_dq[-1]:\n            min_dq.pop()\n        min_dq.append(value)\n\n        while max_dq and value > max_dq[-1]:\n            max_dq.pop()\n        max_dq.append(value)\n\n        # shrink window until it is valid (max - min <= 1)\n        while max_dq[0] - min_dq[0] > 1:\n            if nums[left] == min_dq[0]:\n                min_dq.popleft()\n            if nums[left] == max_dq[0]:\n                max_dq.popleft()\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, find the number of contiguous subarrays whose sum is exactly equal to k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer — the number of contiguous subarrays whose sum equals k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                       # handle empty input just in case\n        return\n\n    it = iter(data)\n    n = int(next(it))                  # length of the array\n    k = int(next(it))                  # target sum\n    nums = [int(next(it)) for _ in range(n)]\n\n    prefix_counts = defaultdict(int)   # maps prefix_sum -> frequency\n    prefix_counts[0] = 1               # empty prefix has sum 0\n\n    prefix_sum = 0\n    result = 0\n\n    for num in nums:\n        prefix_sum += num\n        result += prefix_counts[prefix_sum - k]  # #subarrays ending here with sum k\n        prefix_counts[prefix_sum] += 1           # record current prefix_sum\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is even. If there are multiple such subarrays, output the maximum length among them. If no such subarray exists, output 0.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- A single integer, the length of the longest contiguous subarray with an even sum.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # earliest[parity] keeps the first index where this prefix-sum parity appeared\n    # parity: 0 -> even, 1 -> odd\n    earliest = [0, None]          # prefix of length 0 has even sum\n    max_len = 0\n    parity = 0                    # current prefix parity\n\n    for i, val in enumerate(nums, 1):   # i = current prefix length\n        parity ^= (val & 1)             # update parity (0/1)\n\n        if earliest[parity] is None:    # first time we see this parity\n            earliest[parity] = i\n        else:\n            # subarray between earliest[parity] and current index has even sum\n            length = i - earliest[parity]\n            if length > max_len:\n                max_len = length\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to determine whether it is possible to partition nums into two non-empty subsets such that both subsets have the same average value. Return \"YES\" if such a partition exists, and \"NO\" otherwise.Input Format:The first line contains an integer n (2 ≤ n ≤ 30), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Output \"YES\" if the array can be partitioned as described, otherwise output \"NO\".Constraints:- 2 ≤ n ≤ 30- 1 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_split_with_same_average(nums):\n    n = len(nums)\n    total = sum(nums)\n\n    # dp[k] = set of all possible sums using exactly k numbers\n    dp = [set() for _ in range(n + 1)]\n    dp[0].add(0)\n\n    for num in nums:\n        # traverse sizes backwards to avoid re-using the same element\n        for k in range(n - 1, 0, -1):\n            for prev_sum in dp[k - 1]:\n                dp[k].add(prev_sum + num)\n\n    # check every possible non-empty subset size\n    for k in range(1, n):\n        if (total * k) % n:           # required sum must be integer\n            continue\n        target = (total * k) // n\n        if target in dp[k]:\n            return True\n    return False\n\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n\n    print(\"YES\" if can_split_with_same_average(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, your task is to determine if it is possible to split the list into two non-empty subsets such that the sum of the elements in each subset is equal. If it is possible, print \"YES\", otherwise print \"NO\".Input Format:The first line contains an integer N (2 ≤ N ≤ 100).The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1000).Output Format:Print \"YES\" if it is possible to split the list into two subsets with equal sum, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition_equal_sum(nums):\n    \"\"\"\n    Returns True if `nums` can be divided into two non-empty subsets\n    with equal sum, otherwise False.\n    \"\"\"\n    total = sum(nums)\n    # If total sum is odd, we can’t split it into two equal integers\n    if total & 1:\n        return False\n\n    target = total // 2\n\n    # Bitset DP: `bits` has a 1 at position s if a subset with sum s is possible\n    bits = 1  # only sum 0 is possible at start\n    for x in nums:\n        bits |= bits << x\n        # Early exit if target already reachable\n        if bits >> target & 1:\n            return True\n\n    return False  # target never reached\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    # Sanity: we require two non-empty subsets. With all ai > 0 this is\n    # automatically satisfied if a subset with target sum exists.\n    print(\"YES\" if can_partition_equal_sum(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of choosing any two adjacent elements and swapping them if the left element is greater than the right one. Return the minimum number of operations required to sort the array in non-decreasing order.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:- Output a single integer, the minimum number of operations required to sort the array.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\nclass FenwickTree:\n    \"\"\"Binary Indexed Tree to store frequencies and compute prefix sums.\"\"\"\n    def __init__(self, size: int):\n        self.n = size\n        self.bit = [0] * (size + 1)\n\n    def update(self, idx: int, delta: int = 1) -> None:\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        res = 0\n        while idx:\n            res += self.bit[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Coordinate compression\n    sorted_unique = sorted(set(nums))\n    # Map each value to its rank (1-based for BIT)\n    ranks = [bisect_left(sorted_unique, x) + 1 for x in nums]\n\n    bit = FenwickTree(len(sorted_unique))\n    inversions = 0\n\n    for i, r in enumerate(ranks):\n        # Number of previous elements already processed\n        seen = i\n        # Elements with value ≤ current\n        not_greater = bit.query(r)\n        # Elements strictly greater than current -> contribute to inversions\n        inversions += seen - not_greater\n        bit.update(r)\n\n    print(inversions)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum not exceeding a given integer k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer representing the length of the longest contiguous subarray whose sum is less than or equal to k.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ k ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = map(int, data)\n    n = next(it)\n    k = next(it)\n    nums = [next(it) for _ in range(n)]\n\n    # Build prefix sums\n    pref = [0]\n    for x in nums:\n        pref.append(pref[-1] + x)\n\n    # Coordinate–compression of prefix sums\n    vals = sorted(set(pref))\n    m = len(vals)\n    idx_of = {v: i for i, v in enumerate(vals)}\n\n    # --------- segment-tree storing minimal index ----------\n    INF = n + 5\n    size = 1\n    while size < m:\n        size <<= 1\n    seg = [INF] * (2 * size)\n\n    def update(pos: int, value: int) -> None:\n        pos += size\n        if value < seg[pos]:\n            seg[pos] = value\n            pos >>= 1\n            while pos:\n                seg[pos] = min(seg[pos << 1], seg[(pos << 1) | 1])\n                pos >>= 1\n\n    def query(l: int, r: int) -> int:\n        if l > r:\n            return INF\n        l += size\n        r += size\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, seg[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, seg[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n    # -------------------------------------------------------\n\n    # insert prefix sum at position 0\n    update(idx_of[0], 0)\n\n    best = 0\n    for j in range(1, n + 1):\n        cur = pref[j]\n        threshold = cur - k                # we need prefix[i] >= threshold\n        pos = bisect.bisect_left(vals, threshold)\n        if pos < m:\n            i_min = query(pos, m - 1)\n            if i_min != INF:\n                best = max(best, j - i_min)\n\n        update(idx_of[cur], j)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subsequence such that the absolute difference between any two consecutive elements in the subsequence is exactly 1. The subsequence does not need to be contiguous in the original array.Input Format:- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[1], nums[2], ..., nums[n] (1 ≤ nums[i] ≤ 10^5).Output Format:- Print a single integer: the length of the longest valid subsequence.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ nums[i] ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:     # no input\n        return\n\n    n = data[0]\n    nums = data[1:]\n\n    if n == 0:\n        print(0)\n        return\n\n    max_val = max(nums)\n    # dp[v] = length of the longest valid subsequence that ends with value v\n    dp = [0] * (max_val + 2)      # +2 so we can safely access v+1\n    answer = 1                    # at least one element can always form a subsequence\n\n    for v in nums:\n        # the best sequence we can extend comes from a value exactly 1 away\n        best_neighbor = max(dp[v - 1], dp[v + 1])\n        new_len = best_neighbor + 1\n        if new_len > dp[v]:\n            dp[v] = new_len\n            if new_len > answer:\n                answer = new_len\n\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer k, find the length of the longest contiguous subarray whose sum is less than or equal to k. If no such subarray exists, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the maximum length of a contiguous subarray with sum ≤ k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 9  # large number only used for initialisation\n\n\nclass SegTree:\n    \"\"\"\n    Segment tree that supports:\n        * point update with the minimum of current value and new value\n        * range minimum query\n    \"\"\"\n\n    def __init__(self, size: int):\n        self.N = 1\n        while self.N < size:\n            self.N <<= 1\n        self.data = [INF] * (self.N << 1)\n\n    def update_min(self, pos: int, val: int) -> None:\n        \"\"\"tree[pos] = min(tree[pos], val)\"\"\"\n        i = pos + self.N\n        if val >= self.data[i]:\n            return\n        self.data[i] = val\n        i >>= 1\n        while i:\n            self.data[i] = min(self.data[i << 1], self.data[(i << 1) | 1])\n            i >>= 1\n\n    def range_min(self, l: int, r: int) -> int:\n        \"\"\"minimum value on interval [l, r] (both inclusive)\"\"\"\n        if l > r:\n            return INF\n        l += self.N\n        r += self.N\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums\n    pref = [0]\n    acc = 0\n    for num in nums:\n        acc += num\n        pref.append(acc)\n\n    # coordinate compression of prefix sums\n    vals = sorted(set(pref))\n    m = len(vals)\n    index_of = {v: i for i, v in enumerate(vals)}\n\n    seg = SegTree(m)\n\n    # insert prefix sum at index 0\n    seg.update_min(index_of[0], 0)\n\n    best = 0\n    for i in range(1, n + 1):\n        cur = pref[i]\n        threshold = cur - k\n        # first position with value >= threshold\n        pos = bisect.bisect_left(vals, threshold)\n        if pos < m:\n            j = seg.range_min(pos, m - 1)\n            if j != INF:\n                best = max(best, i - j)\n\n        seg.update_min(index_of[cur], i)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output:Print a single integer — the length of the longest contiguous subarray whose sum is less than or equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_length(nums, k):\n    n = len(nums)\n    # build prefix sums\n    pref = [0]*(n+1)\n    for i in range(n):\n        pref[i+1] = pref[i] + nums[i]\n\n    # helper that checks if there is a subarray of length L whose sum <= k\n    def exists(L: int) -> bool:\n        if L == 0:\n            return True\n        # slide a window of length L over prefix sums\n        for r in range(L, n+1):\n            if pref[r] - pref[r-L] <= k:\n                return True\n        return False\n\n    # binary search on the answer\n    lo, hi = 0, n\n    while lo < hi:\n        mid = (lo + hi + 1) // 2     # upper mid\n        if exists(mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    return lo\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    ans = longest_subarray_length(nums, k)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, your task is to find the length of the longest contiguous subarray whose sum is less than or equal to k. If there are multiple such subarrays, return the length of the longest one. If no such subarray exists, return 0.Input Format:The first line contains two integers n (the length of the array) and k.The second line contains n integers representing the elements of nums.Output Format:Print a single integer representing the maximum length of a contiguous subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4-10^9 ≤ k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\nimport math\n\nINF = 10 ** 18\n\n\nclass BIT:\n    \"\"\"Fenwick tree that keeps the minimum value in the prefix 1..idx\"\"\"\n    def __init__(self, n):\n        self.n = n\n        # tree[0] unused\n        self.tree = [INF] * (n + 2)\n\n    def update(self, idx, val):\n        while idx <= self.n:\n            if val < self.tree[idx]:\n                self.tree[idx] = val\n            idx += idx & -idx\n\n    def query(self, idx):\n        res = INF\n        while idx:\n            if self.tree[idx] < res:\n                res = self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Prefix sums\n    pref = [0]\n    for num in nums:\n        pref.append(pref[-1] + num)\n\n    # Coordinate compression of prefix sums\n    all_vals = sorted(set(pref))\n    m = len(all_vals)\n    rank = {v: i + 1 for i, v in enumerate(all_vals)}        # 1-based rank\n    # reversed coordinate (for suffix min query)\n    rev_coord = {v: m - rank[v] + 1 for v in all_vals}\n\n    bit = BIT(m)\n    # insert prefix sum at index 0\n    bit.update(rev_coord[pref[0]], 0)\n\n    best = 0\n\n    for j in range(1, n + 1):\n        need = pref[j] - k                       # we need prefix[i] >= need\n        # first index in all_vals where value >= need\n        pos = bisect.bisect_left(all_vals, need)\n        if pos < m:                              # there exists some prefix >= need\n            rc_limit = m - pos                   # rc = m - rank + 1, so rc_limit = m - (pos+1)+1 = m-pos\n            min_idx = bit.query(rc_limit)\n            if min_idx != INF:\n                best = max(best, j - min_idx)\n\n        # insert current prefix sum with its index\n        bit.update(rev_coord[pref[j]], j)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), representing the array.Output:Output a single integer: the length of the longest contiguous subarray whose sum is less than or equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\ndef main() -> None:\n    # read all ints\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    a = data[2:]\n    # prefix sums\n    pref = [0]*(n+1)\n    for i in range(1, n+1):\n        pref[i] = pref[i-1] + a[i-1]\n\n    # build list of indices whose prefix values are strictly decreasing\n    dec_idx = []\n    for i in range(n+1):\n        if not dec_idx or pref[i] < pref[dec_idx[-1]]:\n            dec_idx.append(i)\n    dec_vals = [pref[i] for i in dec_idx]          # same size, keeps decreasing values\n\n    ans = 0\n    # traverse j from right to left\n    for j in range(n, -1, -1):\n        # ensure every index kept in dec_idx is < j\n        while dec_idx and dec_idx[-1] >= j:\n            dec_idx.pop()\n            dec_vals.pop()\n\n        if not dec_idx:          # nothing to pair with\n            continue\n\n        threshold = pref[j] - k  # need prefix[i] >= threshold\n        # binary search first position in dec_vals (decreasing) with value >= threshold\n        lo, hi = 0, len(dec_vals) - 1\n        best_pos = None\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if dec_vals[mid] >= threshold:\n                best_pos = mid\n                hi = mid - 1\n            else:\n                lo = mid + 1\n\n        if best_pos is not None:\n            i = dec_idx[best_pos]\n            if j - i > ans:\n                ans = j - i\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is strictly less than a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum is strictly less than k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Prefix sums\n    pref = 0\n\n    # inc_sums keeps the strictly increasing prefix sums (max so far)\n    # inc_idx  keeps the corresponding earliest indices\n    inc_sums = [0]        # prefix sum at index 0 (empty prefix)\n    inc_idx  = [0]        # their indices\n    best = 0\n\n    for j in range(1, n + 1):\n        pref += nums[j - 1]\n\n        # For sum of subarray (i .. j-1) to be < k:\n        # pref - pref_i < k  ->  pref_i > pref - k\n        threshold = pref - k\n        pos = bisect.bisect_right(inc_sums, threshold)\n\n        if pos < len(inc_sums):          # Found some prefix_i > threshold\n            i = inc_idx[pos]\n            best = max(best, j - i)\n\n        # Maintain list of running maxima of prefix sums\n        if pref > inc_sums[-1]:\n            inc_sums.append(pref)\n            inc_idx.append(j)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, your task is to find two distinct numbers in the list whose sum is closest to zero. If there are multiple pairs with the same sum closest to zero, output the pair with the smallest first number. Print the two numbers in ascending order.Input:The first line contains an integer N (2 ≤ N ≤ 10^5).The second line contains N integers a_1, a_2, ..., a_N, where -10^9 ≤ a_i ≤ 10^9.Output:Print two integers (the pair) whose sum is closest to zero, in ascending order.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    input = sys.stdin.readline\n\n    n_line = input().strip()\n    while n_line == '':\n        n_line = input().strip()\n    n = int(n_line)\n\n    nums_line = input().strip()\n    # In case the whole second line was split across several reads\n    while len(nums_line.split()) < n:\n        nums_line += \" \" + input().strip()\n    nums = list(map(int, nums_line.split()))\n    nums.sort()\n\n    left, right = 0, n - 1\n    # Maximum possible absolute sum is 2 * 10**9, so start with something larger\n    best_abs   = 2_000_000_001\n    best_first = nums[0]\n    best_second = nums[-1]\n\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        abs_sum = current_sum if current_sum >= 0 else -current_sum\n\n        # Update the best pair if:\n        #   1. We found a smaller absolute sum, OR\n        #   2. The absolute sums are equal, but the first element is smaller, OR\n        #   3. The absolute sums and first elements are equal, but the second element is smaller\n        if (abs_sum < best_abs or\n            (abs_sum == best_abs and (nums[left] < best_first or\n             (nums[left] == best_first and nums[right] < best_second)))):\n            best_abs = abs_sum\n            best_first, best_second = nums[left], nums[right]\n            if best_abs == 0:      # Can't get better than zero\n                break\n\n        # Move pointers: if sum is positive, decrease right to make it smaller;\n        # otherwise, increase left to make it larger (towards zero).\n        if current_sum > 0:\n            right -= 1\n        else:\n            left += 1\n\n    # Ensure ascending order (they already are because the array is sorted)\n    print(best_first, best_second)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, you are allowed to choose any single element and increase it by 1. After this operation, determine if the array can become strictly increasing (i.e., nums[i] < nums[i+1] for all 0 ≤ i < n-1). Return \"YES\" if it is possible, otherwise return \"NO\".Input Format:The first line contains a single integer n (2 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Print \"YES\" if it is possible to make the array strictly increasing by incrementing exactly one element by 1; otherwise, print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    # If the array length is 2, handle quickly (still O(1) with the general code,\n    # but we keep the general solution anyway).\n\n    # Build prefixGood: prefixGood[i] == True  ⇔  nums[0..i] is strictly increasing\n    prefixGood = [False] * n\n    prefixGood[0] = True\n    for i in range(1, n):\n        prefixGood[i] = prefixGood[i-1] and nums[i-1] < nums[i]\n\n    # Build suffixGood: suffixGood[i] == True  ⇔  nums[i..n-1] is strictly increasing\n    suffixGood = [False] * n\n    suffixGood[-1] = True\n    for i in range(n-2, -1, -1):\n        suffixGood[i] = suffixGood[i+1] and nums[i] < nums[i+1]\n\n    for k in range(n):\n        # Parts left of k and right of k must already be strictly increasing.\n        left_ok  = True if k == 0     else prefixGood[k-1]\n        right_ok = True if k == n-1   else suffixGood[k+1]\n        if not (left_ok and right_ok):\n            continue\n\n        # Check inequalities that involve the modified element nums[k]+1\n        if k > 0 and not (nums[k-1] < nums[k] + 1):\n            continue\n        if k < n-1 and not (nums[k] + 1 < nums[k+1]):\n            continue\n\n        # All conditions satisfied for this k ⇒ possible\n        print(\"YES\")\n        return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous elements) with a sum less than or equal to a given integer k. If no such subarray exists, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:Print a single integer representing the length of the longest subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5-10^4 ≤ nums[i] ≤ 10^4-10^9 ≤ k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_len(nums, k):\n    n = len(nums)\n    # build prefix sums\n    pref = [0]*(n+1)\n    for i, val in enumerate(nums, 1):\n        pref[i] = pref[i-1] + val\n\n    def ok(length):\n        \"\"\"return True if some subarray of 'length' has sum <= k\"\"\"\n        if length == 0:\n            return True\n        for i in range(length, n+1):\n            if pref[i] - pref[i-length] <= k:\n                return True\n        return False\n\n    lo, hi = 0, n\n    while lo < hi:\n        mid = (lo + hi + 1) // 2   # upper mid to avoid infinite loop\n        if ok(mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    return lo\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    print(longest_len(nums, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Your task is to find the maximum sum of any contiguous subarray of nums such that the subarray contains at most k distinct elements.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer, the maximum sum of a contiguous subarray with at most k distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque, defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Prefix sums : pref[i] = sum(nums[0 .. i-1]), pref[0] = 0\n    pref = [0] * (n + 1)\n    for i in range(n):\n        pref[i + 1] = pref[i] + nums[i]\n\n    # Deque that stores indices of prefix sums in\n    # non-decreasing order of their values\n    dq = deque([0])\n\n    cnt = defaultdict(int)     # frequency of each value in current window\n    distinct = 0               # number of distinct values in current window\n    left = 0                   # left boundary of the window\n    best = -10**18             # answer (small enough initial value)\n\n    for right in range(n):\n        val = nums[right]\n        cnt[val] += 1\n        if cnt[val] == 1:\n            distinct += 1\n\n        # Shrink window until we have at most k distinct numbers\n        while distinct > k:\n            rem = nums[left]\n            cnt[rem] -= 1\n            if cnt[rem] == 0:\n                distinct -= 1\n                del cnt[rem]\n\n            # remove prefix index that just left the window\n            if dq and dq[0] == left:\n                dq.popleft()\n            left += 1\n\n        # Remove indices that are no longer inside the window\n        while dq and dq[0] < left:\n            dq.popleft()\n\n        # Current best subarray ending at 'right'\n        min_pref_index = dq[0]\n        current_sum = pref[right + 1] - pref[min_pref_index]\n        if current_sum > best:\n            best = current_sum\n\n        # Insert prefix index (right + 1) keeping deque monotone\n        while dq and pref[dq[-1]] >= pref[right + 1]:\n            dq.pop()\n        dq.append(right + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of two distinct elements in nums whose sum is equal to target. If there are multiple such pairs, return the pair with the smallest first index. If no such pair exists, return [-1, -1].Input Format:- The first line contains two integers n (the size of the array) and target.- The second line contains n integers representing the elements of nums.Output Format:- Output two integers separated by a space: the indices (0-based) of the two elements whose sum is target, or \"-1 -1\" if no such pair exists.Constraints:- 2 ≤ n ≤ 10^5- -10^9 ≤ nums[i] ≤ 10^9- -10^9 ≤ target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # earliest index for each value\n    first_occurrence = {}\n\n    best_first = n  # sentinel larger than any valid index\n    best_second = n\n\n    for i, val in enumerate(nums):\n        complement = target - val\n        if complement in first_occurrence:\n            j = first_occurrence[complement]\n            # Choose the pair with the smallest first index,\n            # break ties with the smallest second index.\n            if j < best_first or (j == best_first and i < best_second):\n                best_first, best_second = j, i\n\n        # store only the earliest index of each value\n        if val not in first_occurrence:\n            first_occurrence[val] = i\n\n    if best_first == n:\n        print(\"-1 -1\")\n    else:\n        print(f\"{best_first} {best_second}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k. If no such subarray exists, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Output a single integer representing the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18\n\n\nclass SegmentTree:\n    \"\"\"Segment tree that supports point update with `min`\n       and range-minimum query.\"\"\"\n    def __init__(self, n: int):\n        self.N = 1\n        while self.N < n:\n            self.N <<= 1\n        self.data = [INF] * (2 * self.N)\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\"Min-assign at position `idx` (0-based).\"\"\"\n        idx += self.N\n        if value >= self.data[idx]:\n            return\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = min(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def query(self, l: int, r: int) -> int:\n        \"\"\"Return min on interval [l, r] (0-based, inclusive).\"\"\"\n        if l > r:\n            return INF\n        l += self.N\n        r += self.N\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not r & 1:\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Prefix sums\n    pref = [0]\n    for x in nums:\n        pref.append(pref[-1] + x)\n\n    # Coordinate compression of prefix sums\n    sorted_vals = sorted(set(pref))\n    idx_of = {v: i for i, v in enumerate(sorted_vals)}\n    m = len(sorted_vals)\n\n    seg = SegmentTree(m)\n\n    # Insert prefix sum 0 at position/index 0\n    seg.update(idx_of[0], 0)\n\n    ans = 0\n    for j in range(1, n + 1):\n        cur_sum = pref[j]\n        threshold = cur_sum - k          # need prefix >= threshold\n        pos = bisect.bisect_left(sorted_vals, threshold)\n\n        if pos < m:\n            i_min = seg.query(pos, m - 1)  # earliest index with prefix >= threshold\n            if i_min != INF:\n                ans = max(ans, j - i_min)\n\n        seg.update(idx_of[cur_sum], j)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n and an integer target, find the indices of two distinct elements in nums that add up to target. Return the indices as a pair (i, j) with i < j. If there are multiple valid answers, return the pair with the smallest i; if there are still ties, return the one with the smallest j. If no such pair exists, output -1 -1.Input Format:The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:Print two integers i and j (0-based indices) separated by a space, or -1 -1 if no valid pair exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Build value -> deque of indices (ascending)\n    val_to_indices = defaultdict(list)\n    for idx, val in enumerate(nums):\n        val_to_indices[val].append(idx)\n    for val in val_to_indices:\n        val_to_indices[val] = deque(val_to_indices[val])\n\n    for i in range(n):\n        val = nums[i]\n        # Remove current index i from its deque\n        val_to_indices[val].popleft()\n\n        complement = target - val\n        # Check if there is any index > i with the complement value\n        if complement in val_to_indices and val_to_indices[complement]:\n            j = val_to_indices[complement][0]  # smallest j > i\n            print(i, j)\n            return\n\n    # No valid pair found\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers A[1..N]. You can perform the following operation any number of times: choose any two different indices i and j (1 ≤ i, j ≤ N, i ≠ j) and set A[i] = A[i] + A[j]. Your task is to determine whether it is possible to make all elements of the array equal by performing any number of such operations (possibly zero).Input Format:The first line contains a single integer N (1 ≤ N ≤ 1000).The second line contains N integers A[1], A[2], ..., A[N] (|A[i]| ≤ 10^6).Output Format:Output \"YES\" if it is possible to make all elements equal, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    # Collect distinct non-zero values\n    non_zero_vals = {x for x in arr if x != 0}\n    \n    # It is possible to equalise iff\n    #  – there are no non-zero values   (all zeros)  OR\n    #  – all non-zero values are the same.\n    print(\"YES\" if len(non_zero_vals) <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two strings, S and T, consisting only of lowercase English letters. Find the minimum number of characters you need to delete from S so that T becomes a subsequence of S. If it is impossible for T to become a subsequence of S, output -1.Input:The first line contains the string S (1 ≤ |S| ≤ 10^5).The second line contains the string T (1 ≤ |T| ≤ 10^5).Output:Output a single integer: the minimum number of deletions required, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_subsequence(s: str, t: str) -> bool:\n    \"\"\"\n    Returns True if `t` is a subsequence of `s`, otherwise False.\n    \"\"\"\n    j = 0                      # pointer for t\n    for ch in s:\n        if j < len(t) and ch == t[j]:\n            j += 1\n            if j == len(t):    # all characters of t have been matched\n                return True\n    return j == len(t)\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    if is_subsequence(s, t):\n        print(0)               # no deletions needed\n    else:\n        print(-1)              # impossible\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray such that the sum of its elements is strictly less than a given integer k. If there are no such subarrays, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:- Output a single integer: the length of the longest contiguous subarray with sum strictly less than k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n# ---------- Fenwick tree that supports prefix minimum ----------\nclass FenwickMin:\n    def __init__(self, size: int, inf: int):\n        self.N = size\n        self.inf = inf\n        self.bit = [inf] * (size + 1)      # 1-indexed\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\"set bit[idx..] = min(bit[idx..] , value)\"\"\"\n        while idx <= self.N:\n            if value < self.bit[idx]:\n                self.bit[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\"minimum on prefix 1 .. idx (idx may be 0)\"\"\"\n        res = self.inf\n        while idx:\n            if self.bit[idx] < res:\n                res = self.bit[idx]\n            idx -= idx & -idx\n        return res\n\n\n# ---------- main solver ----------\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    # prefix sums ps[0] = 0 , ps[i] = sum(nums[0:i])\n    ps = [0]\n    for x in nums:\n        ps.append(ps[-1] + x)\n\n    # coordinate-compress all prefix sums\n    uniq = sorted(set(ps))\n    m = len(uniq)\n\n    # mapping prefix sum -> ascending index (0-based)\n    asc_index = {v: i for i, v in enumerate(uniq)}\n\n    # helper to convert ascending position to descending (1-based for BIT)\n    # larger prefix sum  -> smaller descending index\n    def desc_idx(asc: int) -> int:\n        return m - asc\n\n    INF = n + 5\n    bit = FenwickMin(m, INF)\n\n    # insert prefix sum for index 0\n    bit.update(desc_idx(asc_index[ps[0]]), 0)\n\n    best = 0\n    for j in range(1, n + 1):\n        threshold = ps[j] - k               # we need S[i] > threshold\n        # position after the last value <= threshold\n        pos_asc = bisect.bisect_right(uniq, threshold)   # 0 .. m\n        # in descending order, values greater than threshold are\n        # indices 1 .. m - pos_asc\n        length = m - pos_asc\n        if length > 0:\n            i = bit.query(length)           # earliest index with S[i] > threshold\n            if i != INF:\n                cand = j - i\n                if cand > best:\n                    best = cand\n\n        # insert current prefix sum with its index j\n        bit.update(desc_idx(asc_index[ps[j]]), j)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with a sum less than or equal to a given integer k. A subarray is a contiguous part of the array. If no such subarray exists, output 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer: the length of the longest subarray with sum ≤ k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n# Segment-tree that supports range-minimum queries\nclass SegTreeMin:\n    def __init__(self, length, inf):\n        self.N = 1\n        while self.N < length:\n            self.N <<= 1\n        self.inf = inf\n        self.data = [inf] * (self.N << 1)\n\n    # point update : keep the smallest value stored at position pos\n    def update(self, pos, value):\n        pos += self.N\n        if value < self.data[pos]:\n            self.data[pos] = value\n            pos >>= 1\n            while pos:\n                self.data[pos] = min(self.data[pos << 1], self.data[(pos << 1) | 1])\n                pos >>= 1\n\n    # range minimum query on inclusive interval [l , r]\n    def query(self, l, r):\n        if l > r:\n            return self.inf\n        l += self.N\n        r += self.N\n        res = self.inf\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    inp = sys.stdin.readline\n    n_k = inp().strip()\n    while n_k == '':\n        n_k = inp().strip()\n    n, k = map(int, n_k.split())\n    nums_line = inp().strip()\n    while len(nums_line.split()) < n:\n        nums_line += ' ' + inp().strip()\n    nums = list(map(int, nums_line.split()))\n\n    # prefix sums\n    pref = [0] * (n + 1)\n    for i in range(n):\n        pref[i + 1] = pref[i] + nums[i]\n\n    # coordinate compression of prefix sums\n    vals = sorted(set(pref))\n    coord = {v: i for i, v in enumerate(vals)}\n    m = len(vals)\n\n    INF = n + 5\n    seg = SegTreeMin(m, INF)\n    ans = 0\n\n    for j in range(n + 1):\n        need = pref[j] - k                      # we need prefix[i] >= need\n        lo = bisect.bisect_left(vals, need)     # first position with value >= need\n        if lo < m:\n            idx = seg.query(lo, m - 1)          # earliest index with prefix >= need\n            if idx != INF and idx < j:\n                ans = max(ans, j - idx)\n\n        # insert current prefix sum with its index\n        seg.update(coord[pref[j]], j)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the sum of its elements is strictly less than a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer representing the length of the longest contiguous subarray whose sum is strictly less than k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18\n\n\nclass BIT:\n    \"\"\"Fenwick tree that keeps the minimum value in a prefix.\"\"\"\n    def __init__(self, size: int):\n        self.n = size\n        self.tree = [INF] * (self.n + 1)\n\n    def update(self, idx: int, value: int) -> None:\n        # idx is 1-based\n        while idx <= self.n:\n            if value < self.tree[idx]:\n                self.tree[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\"minimum in prefix [1 .. idx] (idx == 0 -> +INF).\"\"\"\n        res = INF\n        while idx:\n            if self.tree[idx] < res:\n                res = self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Build prefix sums\n    pref = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1] + nums[i - 1]\n\n    # Coordinate compression of all prefix sums\n    all_vals = sorted(set(pref))\n    m = len(all_vals)                     # number of distinct prefix sums\n\n    # Fenwick tree on reversed indices (to get suffix minima as prefix minima)\n    bit = BIT(m)\n\n    # Insert prefix sum for index 0\n    idx0 = bisect.bisect_left(all_vals, 0)          # 0-based\n    ridx0 = m - idx0                                 # 1-based reversed index\n    bit.update(ridx0, 0)\n\n    best = 0\n\n    for j in range(1, n + 1):\n        cur_sum = pref[j]\n        threshold = cur_sum - k                     # need prefix sums > threshold\n        pos = bisect.bisect_right(all_vals, threshold)   # first index with value > threshold (0-based)\n        # Convert to reversed index range [1 .. m - pos]\n        if pos < m:\n            min_idx = bit.query(m - pos)\n            if min_idx != INF:\n                best = max(best, j - min_idx)\n\n        # insert current prefix sum with its index j\n        idx = bisect.bisect_left(all_vals, cur_sum)\n        ridx = m - idx\n        bit.update(ridx, j)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of the elements is strictly less than a given integer k.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray with sum strictly less than k.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18\n\n\nclass SegTreeMin:\n    \"\"\"\n    Segment tree that supports point update (keep minimal value)\n    and range–minimum query on a static index set 0 … size-1\n    \"\"\"\n    __slots__ = ('size', 'tree')\n\n    def __init__(self, n):\n        size = 1\n        while size < n:\n            size <<= 1\n        self.size = size\n        self.tree = [INF] * (2 * size)\n\n    def update(self, pos, val):\n        \"\"\"set tree[pos] = min(tree[pos], val)\"\"\"\n        i = pos + self.size\n        if self.tree[i] <= val:          # already smaller\n            return\n        self.tree[i] = val\n        i >>= 1\n        while i:\n            self.tree[i] = min(self.tree[i << 1], self.tree[(i << 1) | 1])\n            i >>= 1\n\n    def query(self, l, r):\n        \"\"\"minimum on interval [l, r] (inclusive). returns INF if l>r.\"\"\"\n        if l > r:\n            return INF\n        l += self.size\n        r += self.size\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.tree[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.tree[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums: P[0] = 0, P[i] = sum of first i numbers\n    pref = [0]\n    s = 0\n    for num in nums:\n        s += num\n        pref.append(s)\n\n    # coordinate compression of prefix sums\n    vals = sorted(set(pref))\n    m = len(vals)\n    tree = SegTreeMin(m)\n\n    # insert prefix index 0\n    tree.update(bisect.bisect_left(vals, pref[0]), 0)\n\n    best = 0\n    for j in range(1, n + 1):\n        current_pref = pref[j]\n        # We need earliest i with  prefix[i] > current_pref - k\n        threshold = current_pref - k + 1      # smallest integer > current_pref - k\n        idx = bisect.bisect_left(vals, threshold)\n        if idx < m:  # there exists some prefix sum >= threshold\n            i_min = tree.query(idx, m - 1)\n            if i_min != INF:\n                best = max(best, j - i_min)\n\n        # add current prefix index into structure\n        tree.update(bisect.bisect_left(vals, current_pref), j)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray with a sum less than or equal to a given integer k. The subarray must be contiguous. If no such subarray exists, return 0.Input Format:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Print a single integer: the length of the longest subarray with sum ≤ k.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ k ≤ 10^9- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\nINF = 10 ** 18  # large enough\n\n\nclass BIT:\n    \"\"\"\n    Fenwick tree that keeps the minimum value on a prefix [1..idx]\n    \"\"\"\n    def __init__(self, size, init_val):\n        self.size = size\n        self.tree = [init_val] * (size + 1)\n        self.INIT = init_val\n\n    def update(self, idx, value):\n        \"\"\"\n        sets tree positions to min(current, value) while moving up the tree\n        \"\"\"\n        while idx <= self.size:\n            if value < self.tree[idx]:\n                self.tree[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx):\n        \"\"\"\n        returns min on prefix [1..idx]\n        \"\"\"\n        res = self.INIT\n        while idx:\n            if self.tree[idx] < res:\n                res = self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main():\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:2 + n]\n\n    # prefix sums\n    prefix = [0]\n    for x in nums:\n        prefix.append(prefix[-1] + x)\n\n    # coordinate compression of all prefix sums\n    vals = sorted(set(prefix))\n    m = len(vals)\n\n    # Fenwick tree prepared for reversed indices to allow suffix queries as prefix ones\n    bit = BIT(m, n + 5)\n\n    # helper lambda to get coordinate\n    coord = {v: idx for idx, v in enumerate(vals)}  # 0-based\n\n    # insert prefix[0] (index 0)\n    c0 = coord[prefix[0]]\n    r0 = m - c0        # reversed 1-based index\n    bit.update(r0, 0)\n\n    answer = 0\n\n    for j in range(1, n + 1):\n        target = prefix[j] - k\n        pos = bisect_left(vals, target)  # first index with value >= target\n        if pos < m:\n            r_query = m - pos            # reversed index up to which we query\n            i_min = bit.query(r_query)\n            if i_min <= n:               # valid index found\n                answer = max(answer, j - i_min)\n\n        # insert current prefix sum for future subarrays\n        cj = coord[prefix[j]]\n        rj = m - cj\n        bit.update(rj, j)\n\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the length of the longest contiguous subarray whose sum is at most k. Return 0 if there is no such subarray. Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Output a single integer — the length of the longest valid subarray.Constraints:- 1 ≤ n ≤ 10^5- 0 ≤ k ≤ 10^9- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\nINF = 10 ** 18\n\n\nclass SegmentTree:\n    \"\"\"Iterative segment-tree that keeps the minimum value on a range.\"\"\"\n    def __init__(self, size: int):\n        self.N = 1\n        while self.N < size:\n            self.N <<= 1\n        self.data = [INF] * (2 * self.N)\n\n    def update(self, pos: int, value: int) -> None:\n        \"\"\"set data[pos] = min(data[pos], value)\"\"\"\n        i = pos + self.N\n        if value >= self.data[i]:\n            return\n        self.data[i] = value\n        i >>= 1\n        while i:\n            self.data[i] = min(self.data[i << 1], self.data[(i << 1) | 1])\n            i >>= 1\n\n    def range_min(self, l: int, r: int) -> int:\n        \"\"\"minimum on inclusive range [l, r]\"\"\"\n        if l > r:\n            return INF\n        l += self.N\n        r += self.N\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    raw = sys.stdin.buffer.read().split()\n    if not raw:\n        return\n    n, k = map(int, raw[:2])\n    nums = list(map(int, raw[2:2 + n]))\n\n    # prefix sums\n    pref = [0]\n    for num in nums:\n        pref.append(pref[-1] + num)\n\n    # coordinate compression of prefix sums\n    all_vals = sorted(set(pref))\n    idx = {v: i for i, v in enumerate(all_vals)}\n    m = len(all_vals)\n\n    seg = SegmentTree(m)\n    # insert prefix sum 0 with index 0\n    seg.update(idx[0], 0)\n\n    best = 0\n    for j in range(1, n + 1):\n        s = pref[j]\n        threshold = s - k\n        left = bisect_left(all_vals, threshold)       # first prefix ≥ threshold\n        if left < m:\n            earliest = seg.range_min(left, m - 1)\n            if earliest != INF:\n                best = max(best, j - earliest)\n\n        seg.update(idx[s], j)   # store current prefix with its earliest index\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k. If there is no such subarray, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output Format:- Print a single integer: the length of the longest contiguous subarray with sum ≤ k.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18   # a large number for initial comparisons\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    # 1. prefix sums  (pref[0] = 0, pref[i]  = sum of first i elements)\n    pref = [0] * (n + 1)\n    s = 0\n    for i, v in enumerate(nums, 1):\n        s += v\n        pref[i] = s\n\n    # 2. build a list of indices whose prefix values are strictly decreasing.\n    #    For these indices pref[idx] forms a decreasing sequence,\n    #    and the indices themselves are increasing.\n    dec_indices = []\n    for i in range(n + 1):\n        if not dec_indices or pref[i] < pref[dec_indices[-1]]:\n            dec_indices.append(i)\n\n    best = 0\n\n    # 3. iterate j from right to left (j is the right border, exclusive)\n    for j in range(n, 0, -1):\n        threshold = pref[j] - k          # need pref[i] >= threshold\n        # consider only indices i < j\n        hi_pos = bisect.bisect_left(dec_indices, j) - 1\n        if hi_pos < 0:                   # no candidate i < j\n            continue\n\n        # binary-search earliest i (smallest index) with pref[i] >= threshold\n        lo, hi = 0, hi_pos\n        candidate_i = None\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if pref[dec_indices[mid]] >= threshold:\n                candidate_i = dec_indices[mid]\n                hi = mid - 1             # look for an even earlier index\n            else:\n                lo = mid + 1\n\n        if candidate_i is not None:\n            best = max(best, j - candidate_i)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of choosing any two distinct elements and swapping them. Your task is to determine the minimum number of operations required to sort the array in non-decreasing order. If the array is already sorted, print 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer: the minimum number of swap operations needed to sort the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_swaps_to_sort(nums):\n    \"\"\"\n    Assumes all elements in `nums` are pair-wise distinct and returns the\n    minimum number of swaps needed to sort the array in non-decreasing order.\n    \"\"\"\n    n = len(nums)\n    # pair each element with its initial index\n    arr_pos = sorted([(value, idx) for idx, value in enumerate(nums)])\n    \n    visited = [False] * n\n    swaps = 0\n    \n    for i in range(n):\n        # already in the correct place or already processed\n        if visited[i] or arr_pos[i][1] == i:\n            continue\n        \n        # compute size of current cycle\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = arr_pos[j][1]      # next index in the cycle\n            cycle_size += 1\n        \n        if cycle_size:             # add (cycle_size-1) swaps for this cycle\n            swaps += cycle_size - 1\n    return swaps\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(min_swaps_to_sort(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n and an integer k. Your task is to determine the length of the longest contiguous subarray whose sum is less than or equal to k. If no such subarray exists, output 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Output a single integer representing the length of the longest contiguous subarray with sum ≤ k.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n\nclass FenwickMin:\n    \"\"\"\n    Fenwick tree that keeps the minimum value on a prefix.\n    \"\"\"\n    def __init__(self, size: int, inf: int):\n        self.N = size\n        self.INF = inf\n        self.bit = [inf] * (self.N + 1)\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\" point-update : tree[idx] = min(tree[idx] , value) \"\"\"\n        while idx <= self.N:\n            if value < self.bit[idx]:\n                self.bit[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\" returns min(bit[1 .. idx]) \"\"\"\n        res = self.INF\n        while idx:\n            if self.bit[idx] < res:\n                res = self.bit[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix sums P[0]=0 , P[i] = sum nums[0 .. i-1]\n    pref = [0]\n    total = 0\n    for num in nums:\n        total += num\n        pref.append(total)\n\n    # coordinate-compression of all prefix sums\n    sorted_vals = sorted(set(pref))\n    m = len(sorted_vals)\n    to_pos = {v: i for i, v in enumerate(sorted_vals)}        # 0-based\n\n    INF = n + 5\n    bit = FenwickMin(m, INF)                                  # keeps earliest index for each value (suffix-min with reversed index)\n    ans = 0\n\n    for j, p_val in enumerate(pref):\n        target = p_val - k                                    # need Pi  >= target\n        pos_t = bisect.bisect_left(sorted_vals, target)       # first value >= target\n        if pos_t < m:                                         # such prefix values exist\n            pos_idx = pos_t + 1                               # 1-based normal order\n            rev_max = m - pos_idx + 1                         # corresponding prefix in reversed order\n            earliest_i = bit.query(rev_max)                   # minimal index with Pi >= target\n            if earliest_i != INF:\n                ans = max(ans, j - earliest_i)\n\n        # insert current prefix into structure (after query, so i < j always)\n        pos = to_pos[p_val] + 1                               # 1-based normal order\n        rev_pos = m - pos + 1                                 # reversed coordinate\n        bit.update(rev_pos, j)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to k. If there are multiple such subarrays, output the length of the longest one. If no such subarray exists, output 0.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).Output:Output a single integer representing the length of the longest contiguous subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5|k| ≤ 10^9-10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\n\nclass FenwickMin:\n    \"\"\"\n    Fenwick tree that keeps the minimum value on a prefix.\n    \"\"\"\n    __slots__ = ('size', 'tree')\n\n    def __init__(self, size: int, inf: int):\n        self.size = size\n        self.tree = [inf] * (size + 2)   # 1-based\n        self.inf = inf\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\"\n        point-update: tree[idx] = min(tree[idx], value)\n        \"\"\"\n        while idx <= self.size:\n            if value < self.tree[idx]:\n                self.tree[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\"\n        returns min on range [1, idx]\n        \"\"\"\n        res = self.inf\n        while idx:\n            if self.tree[idx] < res:\n                res = self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2: 2 + n]\n\n    # prefix sums  ps[i] = sum of first i numbers, ps[0] = 0\n    ps = [0]\n    s = 0\n    for num in nums:\n        s += num\n        ps.append(s)\n\n    # coordinate-compress all prefix sums\n    vals = sorted(set(ps))\n    m = len(vals)\n\n    # Fenwick tree will work on the reversed coordinate so that\n    # \"prefix sums ≥ x\"  becomes  \"prefix index ≤ something\" (prefix query).\n    INF = n + 5\n    bit = FenwickMin(m, INF)\n\n    longest = 0\n\n    for i, pref in enumerate(ps):\n        # need earliest j < i with  pref - ps[j] ≤ k  ⇒  ps[j] ≥ pref - k\n        thresh = pref - k\n        idx = bisect_left(vals, thresh)           # first position with value ≥ thresh   (0-based)\n        rev_idx = m - idx                         # corresponding reversed index (1-based)\n\n        if rev_idx > 0:\n            j = bit.query(rev_idx)                # earliest index satisfying the condition\n            if j < INF:                           # found such j\n                longest = max(longest, i - j)\n\n        # add current prefix sum to the Fenwick structure\n        idx_cur = bisect_left(vals, pref)\n        rev_cur = m - idx_cur\n        bit.update(rev_cur, i)                    # keep earliest index for this prefix value\n\n    print(longest)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum value of the absolute difference between the sum of any two different elements in the array. If there are less than two elements, output -1.Input Format:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:Output a single integer — the minimum absolute difference between the sum of any two different elements, or -1 if not possible.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimum_abs_sum_pair(nums):\n    \"\"\"\n    Returns the minimum absolute value of the sum obtained from any unordered\n    pair drawn from `nums`.\n    \"\"\"\n    n = len(nums)\n    if n < 2:\n        return -1\n\n    nums.sort()                       # O(n log n)\n    left, right = 0, n - 1\n    best = abs(nums[left] + nums[right])\n\n    while left < right:\n        pair_sum = nums[left] + nums[right]\n        best = min(best, abs(pair_sum))\n        if best == 0:                 # You cannot do better than 0\n            break\n\n        # Classic two-pointer strategy\n        if pair_sum < 0:\n            left += 1\n        else:\n            right -= 1\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    result = minimum_abs_sum_pair(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum possible sum of a non-empty subarray (contiguous elements) such that the subarray contains at most one negative number. If there are multiple such subarrays, return the largest sum among them.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output Format:- Output a single integer, the maximum subarray sum that includes at most one negative number.Constraints:- 1 ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    NEG_INF = -10**18          # a value smaller than any possible answer\n    dp0 = NEG_INF              # best sum of a sub-array ending here with 0 negatives\n    dp1 = NEG_INF              # best sum of a sub-array ending here with exactly 1 negative\n    best = NEG_INF             # overall best answer\n\n    for x in nums:\n        if x >= 0:                             # current element is non-negative\n            new_dp0 = x if dp0 == NEG_INF else max(x, dp0 + x)\n            new_dp1 = dp1 + x if dp1 != NEG_INF else NEG_INF\n        else:                                  # current element is negative\n            new_dp0 = NEG_INF                  # cannot end a 0-negative sub-array with a negative\n            candidate = dp0 + x if dp0 != NEG_INF else NEG_INF\n            new_dp1 = max(x, candidate)        # start new or extend a 1-negative sub-array\n\n        dp0, dp1 = new_dp0, new_dp1\n        best = max(best, dp0, dp1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum less than or equal to a given integer k. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4) separated by spaces.Output Format:Print a single integer representing the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^5  -10^9 ≤ k ≤ 10^9  -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\nclass FenwickMin:\n    \"\"\"\n    Fenwick tree (Binary Indexed Tree) that keeps the minimum\n    value on a prefix.\n    \"\"\"\n    __slots__ = (\"n\", \"bit\", \"INF\")\n\n    def __init__(self, size: int, inf_value: int):\n        self.n = size\n        self.bit = [inf_value] * (size + 1)   # 1-based\n        self.INF = inf_value\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\"\n        Set bit[idx] = min(bit[idx], value)\n        \"\"\"\n        while idx <= self.n:\n            if value < self.bit[idx]:\n                self.bit[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\"\n        Return min(bit[1 .. idx])\n        \"\"\"\n        res = self.INF\n        while idx:\n            if self.bit[idx] < res:\n                res = self.bit[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix[i] = sum of first i numbers, prefix[0] = 0\n    prefix = [0]\n    for num in nums:\n        prefix.append(prefix[-1] + num)\n\n    # Coordinate-compress all prefix sums, in DESCENDING order.\n    # (Biggest value gets index 1, smallest gets index m.)\n    desc_vals = sorted(set(prefix), reverse=True)\n    pos_of = {v: i + 1 for i, v in enumerate(desc_vals)}  # 1-based index\n\n    m = len(desc_vals)\n    INF = n + 5  # anything > n is enough\n\n    bit = FenwickMin(m, INF)\n\n    # Helper: last position (1-based) in desc_vals whose value >= threshold.\n    # Returns 0 if no such value exists.\n    def last_pos_ge(threshold: int) -> int:\n        lo, hi, res = 0, m - 1, -1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if desc_vals[mid] >= threshold:\n                res = mid\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return res + 1  # shift to 1-based; becomes 0 if res == -1\n\n    longest = 0\n\n    for j, cur_sum in enumerate(prefix):\n        need = cur_sum - k                      # We want P[i] >= need\n        pos = last_pos_ge(need)                 # range with values >= need\n        if pos:                                 # if any such prefix sum exists\n            i = bit.query(pos)                  # earliest index i with P[i] in that range\n            if i != INF:\n                longest = max(longest, j - i)\n\n        # Insert current prefix sum into the BIT\n        bit.update(pos_of[cur_sum], j)\n\n    print(longest)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, you are allowed to choose exactly one pair of indices (i, j) such that 0 ≤ i < j < n and swap the elements at these indices. After performing the swap, return the maximum possible sum of any contiguous subarray in the resulting array.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Output a single integer representing the maximum subarray sum after one swap.Constraints:- 1 ≤ n ≤ 10^5- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    if n == 1:           # only one element – we must swap, therefore the\n                         # array stays identical and the answer is that element\n        print(nums[0])\n        return\n\n    # ------------------------------------------------------------------\n    # 1.  Standard Kadane to obtain the ordinary maximum–sub-array sum\n    # ------------------------------------------------------------------\n    max_no_swap = cur = nums[0]\n    for v in nums[1:]:\n        cur = v if cur + v < v else cur + v\n        max_no_swap = max(max_no_swap, cur)\n\n    # ------------------------------------------------------------------\n    # 2.  For every position k we need:\n    #       • best sub-array sum that ends exactly at k   (left_sum[k])\n    #       • its left boundary                          (left_start[k])\n    #   and analogously from the right side\n    # ------------------------------------------------------------------\n    n = len(nums)\n    left_sum   = [0]*n\n    left_start = [0]*n\n\n    left_sum[0]   = nums[0]\n    left_start[0] = 0\n    for i in range(1, n):\n        if left_sum[i-1] + nums[i] >= nums[i]:\n            left_sum[i]   = left_sum[i-1] + nums[i]\n            left_start[i] = left_start[i-1]\n        else:\n            left_sum[i]   = nums[i]\n            left_start[i] = i\n\n    right_sum = [0]*n\n    right_end = [0]*n\n\n    right_sum[-1] = nums[-1]\n    right_end[-1] = n-1\n    for i in range(n-2, -1, -1):\n        if right_sum[i+1] + nums[i] >= nums[i]:\n            right_sum[i] = right_sum[i+1] + nums[i]\n            right_end[i] = right_end[i+1]\n        else:\n            right_sum[i] = nums[i]\n            right_end[i] = i\n\n    #  best sub-array that contains position k ─ its sum and borders\n    contain_sum   = [0]*n\n    contain_left  = [0]*n\n    contain_right = [0]*n\n    for k in range(n):\n        contain_sum[k]   = left_sum[k] + right_sum[k] - nums[k]\n        contain_left[k]  = left_start[k]\n        contain_right[k] = right_end[k]\n\n    # ------------------------------------------------------------------\n    # 3.  Prepare prefix / suffix maximum element values.\n    #     They are the best numbers that can be brought INTO a sub-array.\n    # ------------------------------------------------------------------\n    prefix_max = [None]*n\n    m = -10**15\n    for i in range(n):\n        m = max(m, nums[i])\n        prefix_max[i] = m\n\n    suffix_max = [None]*n\n    m = -10**15\n    for i in range(n-1, -1, -1):\n        m = max(m, nums[i])\n        suffix_max[i] = m\n\n    # ------------------------------------------------------------------\n    # 4.  Try each index as the element that will be moved OUT\n    #     of its containing sub-array (thus swapped away).\n    # ------------------------------------------------------------------\n    res = max_no_swap     # we can always keep the old value by swapping\n                          # two irrelevant elements\n    NEG_INF = -10**15\n\n    for k in range(n):\n        l = contain_left[k]\n        r = contain_right[k]\n\n        best_outside = NEG_INF\n        if l > 0:\n            best_outside = max(best_outside, prefix_max[l-1])\n        if r < n-1:\n            best_outside = max(best_outside, suffix_max[r+1])\n\n        if best_outside == NEG_INF:\n            continue                       # whole array, no outside element\n        # new sub-array value after swapping nums[k] with that outside element\n        cand = contain_sum[k] - nums[k] + best_outside\n        res = max(res, cand)\n\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. You may perform the following operation any number of times: choose any two adjacent elements and swap them if their sum is even. Return the minimum number of swaps required to sort the array in non-decreasing order. If it is not possible to sort the array using these operations, return -1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the minimum number of swaps needed to sort the array, or -1 if impossible.Constraints:1 ≤ n ≤ 10^5-10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\n# ---------- Fenwick Tree ----------\nclass Fenwick:\n    def __init__(self, n: int):\n        self.n = n\n        self.bit = [0] * (n + 1)\n\n    def update(self, idx: int, delta: int) -> None:\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        s = 0\n        while idx:\n            s += self.bit[idx]\n            idx -= idx & -idx\n        return s\n\n\ndef count_inversions(arr):\n    \"\"\"\n    Returns the number of inversions in `arr`\n    (pairs i < j with arr[i] > arr[j]).\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    # coordinate compression\n    sorted_uniques = sorted(set(arr))\n    # ranks start from 1 (Fenwick is 1-based)\n    ranks = {v: i + 1 for i, v in enumerate(sorted_uniques)}\n    bit = Fenwick(len(sorted_uniques))\n\n    inversions = 0\n    seen = 0\n    for v in arr:\n        r = ranks[v]\n        # how many numbers <= v have appeared so far\n        le = bit.query(r)\n        # numbers already seen that are greater than v\n        inversions += seen - le\n        bit.update(r, 1)\n        seen += 1\n    return inversions\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))\n\n    total_swaps = 0\n    prev_max = None\n\n    current_segment = []\n    current_parity = nums[0] & 1  # 0 for even, 1 for odd\n\n    for val in nums:\n        if (val & 1) == current_parity:\n            current_segment.append(val)\n        else:\n            # process finished segment\n            seg_min = min(current_segment)\n            seg_max = max(current_segment)\n\n            if prev_max is not None and prev_max > seg_min:\n                print(-1)\n                return\n\n            total_swaps += count_inversions(current_segment)\n            prev_max = seg_max\n\n            # start new segment\n            current_segment = [val]\n            current_parity = val & 1\n\n    # process last segment\n    seg_min = min(current_segment)\n    seg_max = max(current_segment)\n    if prev_max is not None and prev_max > seg_min:\n        print(-1)\n        return\n    total_swaps += count_inversions(current_segment)\n\n    print(total_swaps)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with a sum that is less than or equal to a given integer k. If no such subarray exists, return 0.Input Format:- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).- The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray whose sum is ≤ k.Constraints:- 1 ≤ n ≤ 10^5- |nums[i]| ≤ 10^4- |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18\n\n\nclass SegMin:\n    \"\"\"Iterative segment tree that supports\n       point update : keep the minimum value\n       range query  : minimum on [l , r] (inclusive)\n    \"\"\"\n    def __init__(self, n):\n        self.N = 1\n        while self.N < n:\n            self.N <<= 1\n        self.data = [INF] * (2 * self.N)\n\n    def update(self, pos, value):\n        \"\"\"set data[pos] = min(old , value)\"\"\"\n        pos += self.N\n        if value >= self.data[pos]:\n            return\n        self.data[pos] = value\n        pos >>= 1\n        while pos:\n            self.data[pos] = min(self.data[pos << 1], self.data[(pos << 1) | 1])\n            pos >>= 1\n\n    def query(self, l, r):\n        \"\"\"minimum on interval [l , r]\"\"\"\n        if l > r:\n            return INF\n        l += self.N\n        r += self.N\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # 1) compute prefix sums\n    pref = [0]\n    s = 0\n    for num in nums:\n        s += num\n        pref.append(s)          # pref[i] = sum of first i elements   (i from 1..n)\n\n    # 2) coordinate compression of prefix sums\n    uniq_vals = sorted(set(pref))\n    pos_map = {v: i for i, v in enumerate(uniq_vals)}\n    m = len(uniq_vals)\n\n    seg = SegMin(m)\n\n    # Insert prefix sum for index 0\n    seg.update(pos_map[0], 0)\n\n    ans = 0\n    for i in range(1, n + 1):\n        cur = pref[i]\n        threshold = cur - k\n\n        # first coordinate whose value >= threshold\n        idx_left = bisect.bisect_left(uniq_vals, threshold)\n        if idx_left < m:\n            j = seg.query(idx_left, m - 1)\n            if j != INF:\n                ans = max(ans, i - j)\n\n        # update segment tree with current prefix sum\n        seg.update(pos_map[cur], i)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the length of the longest subarray with a sum less than or equal to a given integer k. The subarray must be contiguous.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Print a single integer — the length of the longest valid subarray.Constraints:1 ≤ n ≤ 10^5  |nums[i]| ≤ 10^4  |k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    # Prefix sums: pref[i] = sum of first i numbers (pref[0] = 0)\n    pref = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1] + nums[i - 1]\n\n    # min_pref[i] = minimum prefix value among indices i..n\n    min_pref = [0] * (n + 1)\n    min_pref[n] = pref[n]\n    for i in range(n - 1, -1, -1):\n        min_pref[i] = pref[i] if pref[i] < min_pref[i + 1] else min_pref[i + 1]\n\n    best_len = 0\n\n    # For every starting position i, binary search the farthest j\n    # such that pref[j] - pref[i] <= k.  Because min_pref is\n    # non-decreasing, we can binary search on it.\n    for i in range(n):\n        lo, hi = i + 1, n\n        best = i        # in case no valid j exists\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if min_pref[mid] - pref[i] <= k:\n                best = mid       # mid works, try to extend to the right\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        if best - i > best_len:\n            best_len = best - i\n\n    print(best_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray such that the sum of its elements is less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4).Output:Output a single integer: the length of the longest contiguous subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n\nclass FenwickMin:\n    \"\"\"Fenwick tree that supports point update (take minimum) and\n       prefix-range query (minimum).\"\"\"\n    __slots__ = ('n', 'tree')\n\n    def __init__(self, n: int):\n        self.n = n\n        # use a large sentinel (bigger than every possible index)\n        self.tree = [10 ** 18] * (n + 1)\n\n    def update(self, idx: int, value: int) -> None:\n        \"\"\"idx is 0-based, value is the index we want to minimise.\"\"\"\n        idx += 1                       # switch to 1-based\n        while idx <= self.n:\n            if value < self.tree[idx]:\n                self.tree[idx] = value\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        \"\"\"minimum on range [0, idx] (0-based, inclusive).\"\"\"\n        if idx < 0:\n            return 10 ** 18\n        res = 10 ** 18\n        idx += 1\n        while idx:\n            if self.tree[idx] < res:\n                res = self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums  (prefix[0] = 0)\n    prefix = [0]\n    s = 0\n    for num in nums:\n        s += num\n        prefix.append(s)\n\n    # coordinate compression of prefix sums\n    uniq = sorted(set(prefix))\n    m = len(uniq)\n    idx_of = {v: i for i, v in enumerate(uniq)}\n\n    # Fenwick tree will store, for every compressed value, the\n    # earliest index where that prefix sum appears.\n    # To turn “values ≥ threshold” into a prefix query, we store\n    # them in reversed order: rev = m-1-orig.\n    fenwick = FenwickMin(m)\n\n    ans = 0\n    INF = 10 ** 18\n\n    for pos, ps in enumerate(prefix):               # pos == current index (0..n)\n        # We need an earliest i < pos such that\n        #     ps - prefix[i] ≤ k   →   prefix[i] ≥ ps - k\n        threshold = ps - k\n        th_orig = bisect.bisect_left(uniq, threshold)   # first value ≥ threshold\n        if th_orig < m:                                 # such values exist\n            rev_limit = m - 1 - th_orig                 # 0-based, inclusive\n            earliest = fenwick.query(rev_limit)\n            if earliest != INF:\n                length = pos - earliest\n                if length > ans:\n                    ans = length\n\n        # insert current prefix sum into the structure\n        orig = idx_of[ps]\n        rev = m - 1 - orig\n        fenwick.update(rev, pos)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest subarray (contiguous segment) with a sum less than or equal to a given integer k. If there is no such subarray, output 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4) separated by spaces.Output Format:Print a single integer: the length of the longest subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5|nums[i]| ≤ 10^4|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # prefix[i] = sum of first i numbers (prefix[0] = 0)\n    prefix = [0] * (n + 1)\n    s = 0\n    for i, val in enumerate(nums, 1):\n        s += val\n        prefix[i] = s\n\n    # Build list of indices whose prefix sums are strictly decreasing\n    mins = []           # indices\n    for i in range(n + 1):\n        if not mins or prefix[i] < prefix[mins[-1]]:\n            mins.append(i)          # keep new minimum\n\n    best = 0\n\n    # Scan ends of subarrays from right to left\n    for j in range(n, 0, -1):       # j is end-index (exclusive), subarray length≥1\n        # remove candidate starts that are to the right of j\n        while mins and mins[-1] > j:\n            mins.pop()\n        if not mins:\n            break\n\n        target = prefix[j] - k      # need prefix[i] >= target\n\n        # binary search earliest index in mins with prefix >= target\n        lo, hi, pos = 0, len(mins) - 1, -1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if prefix[mins[mid]] >= target:\n                pos = mid\n                hi = mid - 1        # look further left (earlier index)\n            else:\n                lo = mid + 1\n\n        if pos != -1:\n            length = j - mins[pos]\n            if length > best:\n                best = length\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of selecting any two elements nums[i] and nums[j] (i ≠ j) and replacing nums[i] with nums[i] + nums[j]. Your task is to determine the minimum number of operations required to make all elements of the array equal.Input Format:The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^4).Output Format:Output a single integer — the minimum number of operations needed to make all elements equal.Constraints:2 ≤ n ≤ 10001 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Quick check: if the array is already constant → 0 operations\n    if all(x == nums[0] for x in nums):\n        print(0)\n        return\n\n    # Count zeros and collect positive distinct values\n    zeros = nums.count(0)\n    positives = {x for x in nums if x != 0}\n\n    # If there are no positive numbers (all zeros) → already equal\n    if not positives:                       # e.g. [0,0,0]\n        print(0)\n        return\n\n    # If there is exactly one positive value, we can copy it into each 0\n    if len(positives) == 1:                 # e.g. [0,5,0,5]\n        print(zeros)                        # one copy-operation per zero\n        return\n\n    # Otherwise it is impossible\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray where the sum of its elements is strictly less than k. If no such subarray exists, return 0.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9).- The second line contains n integers, representing the elements of nums, where each element is in the range [-10^4, 10^4].Output Format:- Output a single integer: the length of the longest qualifying subarray.Constraints:- 1 ≤ n ≤ 10^5- 1 ≤ k ≤ 10^9- -10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # Prefix sums: prefix[0] = 0, prefix[i] = sum(nums[:i])\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + nums[i - 1]\n\n    # max_pref[i] = max(prefix[0..i])  -> non-decreasing array\n    max_pref = [0] * (n + 1)\n    max_pref[0] = prefix[0]\n    for i in range(1, n + 1):\n        max_pref[i] = max(max_pref[i - 1], prefix[i])\n\n    longest = 0\n    # For every right end r (exclusive index in prefix array)\n    for r in range(1, n + 1):\n        threshold = prefix[r] - k          # need prefix[l]  > threshold\n        # Search earliest index < r whose max_pref value already exceeds threshold\n        idx = bisect.bisect_right(max_pref, threshold, 0, r)\n        if idx < r:                        # found such l\n            longest = max(longest, r - idx)\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums containing n elements, your task is to find the length of the longest subarray with a sum less than or equal to a given integer k.Input:The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).The second line contains n integers nums[i] (|nums[i]| ≤ 10^4), representing the elements of the array.Output:Print a single integer representing the length of the longest subarray with a sum less than or equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n# ----------  Segment tree that supports point-update / range-min  ----------\nclass SegTreeMin:\n    def __init__(self, size: int, inf: int):\n        self.N = 1\n        while self.N < size:\n            self.N <<= 1\n        self.INF = inf\n        self.data = [self.INF] * (2 * self.N)\n\n    # keep the smaller index\n    def update(self, pos: int, val: int) -> None:\n        p = pos + self.N\n        if val < self.data[p]:\n            self.data[p] = val\n            p >>= 1\n            while p:\n                self.data[p] = min(self.data[p << 1], self.data[(p << 1) | 1])\n                p >>= 1\n\n    # minimum value in [l, r] (inclusive)\n    def query(self, l: int, r: int) -> int:\n        if l > r:\n            return self.INF\n        l += self.N\n        r += self.N\n        res = self.INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums\n    pref = [0]\n    for num in nums:\n        pref.append(pref[-1] + num)\n\n    # coordinate-compress all prefix sums\n    sorted_vals = sorted(set(pref))\n    m = len(sorted_vals)\n\n    # helpers\n    def pos_of(x: int) -> int:\n        return bisect.bisect_left(sorted_vals, x)\n\n    INF = n + 5\n    seg = SegTreeMin(m, INF)\n\n    # insert prefix sum at index 0\n    seg.update(pos_of(pref[0]), 0)\n\n    best = 0\n    for idx in range(1, n + 1):\n        curr = pref[idx]\n        target = curr - k            # we need prefix >= target\n        left = bisect.bisect_left(sorted_vals, target)\n        if left < m:\n            smallest_index = seg.query(left, m - 1)\n            if smallest_index != INF:\n                best = max(best, idx - smallest_index)\n\n        # store current prefix with its earliest index (the current one)\n        seg.update(pos_of(curr), idx)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, your task is to find the largest sum that can be obtained by selecting a non-empty subarray (contiguous elements) and reversing it exactly once. You may choose not to reverse any subarray if that gives a better result. Output the maximum possible subarray sum after at most one reversal.Input Format:- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:- Print a single integer, the maximum sum achievable as described.Constraints:- 1 ≤ n ≤ 10^5- −10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:        # no input\n        return\n    n = data[0]\n    nums = data[1:]\n    if n == 0:\n        print(0)\n        return\n    # Forward pass: fw[i] = maximum sub-array sum that ends exactly at i\n    fw = [0] * n\n    cur = fw[0] = nums[0]\n    best_no_reverse = nums[0]\n    for i in range(1, n):\n        cur = nums[i] if nums[i] > cur + nums[i] else cur + nums[i]\n        fw[i] = cur\n        if cur > best_no_reverse:\n            best_no_reverse = cur\n\n    # Backward pass: bw[i] = maximum sub-array sum that starts exactly at i\n    bw = [0] * n\n    cur = bw[-1] = nums[-1]\n    for i in range(n - 2, -1, -1):\n        cur = nums[i] if nums[i] > nums[i] + cur else nums[i] + cur\n        bw[i] = cur\n\n    # suffix_best[i] = maximum bw value among positions i … n-1\n    suffix_best = [0] * n\n    suffix_best[-1] = bw[-1]\n    for i in range(n - 2, -1, -1):\n        suffix_best[i] = bw[i] if bw[i] > suffix_best[i + 1] else suffix_best[i + 1]\n\n    # Try to glue a prefix (ending at i) with a suffix (starting after i) via one reversal\n    answer = best_no_reverse\n    for i in range(n - 1):\n        cand = fw[i] + suffix_best[i + 1]\n        if cand > answer:\n            answer = cand\n\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of choosing any two distinct elements and swapping them. Determine the minimum number of operations required to sort the array in non-decreasing order. If the array is already sorted, the answer is 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of nums.The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer, the minimum number of swaps needed to sort the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Already sorted ?\n    sorted_nums = sorted(nums)\n    if nums == sorted_nums:\n        print(0)\n        return\n\n    # ------------------------------------------------------------------\n    # Step 1 : collect the indices that are NOT in the right position\n    #          together with, for every value, the places where it is\n    #          still needed (target indices).\n    # ------------------------------------------------------------------\n    need_pos = defaultdict(list)          # value -> list of indices that still need that value\n    mismatched = []                       # indices whose element is misplaced\n\n    for idx, (cur, des) in enumerate(zip(nums, sorted_nums)):\n        if cur != des:\n            mismatched.append(idx)\n            need_pos[des].append(idx)     # this index still needs the value `des`\n\n    # ------------------------------------------------------------------\n    # Step 2 : build a permutation `to_idx` on the set `mismatched`\n    #          For an index i (holding value v = nums[i]) we assign it to\n    #          one of the still–unfilled positions that require v.\n    #          Because every value appears the same amount of times in both\n    #          arrays, such an assignment is always possible.\n    # ------------------------------------------------------------------\n    to_idx = [i for i in range(n)]        # default: fixed point\n    for i in mismatched:\n        v = nums[i]\n        tgt = need_pos[v].pop()           # take any still–missing position for value v\n        to_idx[i] = tgt                   # i must go to tgt\n\n    # ------------------------------------------------------------------\n    # Step 3 : count cycles inside that permutation; a cycle of length L\n    #          needs (L-1) swaps.\n    # ------------------------------------------------------------------\n    visited = [False] * n\n    swaps = 0\n    for i in mismatched:\n        if not visited[i]:\n            length = 0\n            j = i\n            while not visited[j]:\n                visited[j] = True\n                j = to_idx[j]\n                length += 1\n            swaps += length - 1           # length==1 ⇒ 0 additional swaps\n\n    print(swaps)\n\n# ----------------------------------------------------------------------\n# mandatory call\n# ----------------------------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. An operation consists of selecting any two different indices i and j (1 ≤ i, j ≤ n, i ≠ j) and swapping nums[i] and nums[j]. Determine the minimum number of operations required to sort the array in non-decreasing order. If the array is already sorted, return 0.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[1], nums[2], ..., nums[n] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer — the minimum number of operations required to sort the array.Constraints:- 1 ≤ n ≤ 10^5- −10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimum_swaps(arr):\n    \"\"\"\n    Computes the minimum number of swaps needed to sort `arr`\n    in non-decreasing order (assuming all elements are distinct).\n    \"\"\"\n    n = len(arr)\n\n    # Pair each element with its original position\n    paired = [(value, idx) for idx, value in enumerate(arr)]\n    # Sort by value to know each element’s final position\n    paired.sort(key=lambda x: x[0])\n\n    # permutation[pos] = index where element currently at `pos` should go\n    permutation = [0] * n\n    for sorted_pos, (_, original_pos) in enumerate(paired):\n        permutation[original_pos] = sorted_pos\n\n    visited = [False] * n\n    swaps = 0\n\n    for i in range(n):\n        if visited[i] or permutation[i] == i:\n            continue  # already in the right place\n\n        # compute the size of the current cycle\n        cycle_size = 0\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            j = permutation[j]\n            cycle_size += 1\n\n        if cycle_size > 0:\n            swaps += cycle_size - 1\n\n    return swaps\n\n\ndef main() -> None:\n    input_data = sys.stdin.read().strip().split()\n    if not input_data:\n        return\n    n = int(input_data[0])\n    nums = list(map(int, input_data[1:n + 1]))\n    print(minimum_swaps(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. You can perform the following operation at most once: choose any subarray (a contiguous part) of nums and reverse it. After performing at most one such operation, return the maximum possible sum of any contiguous subarray in the resulting array.Input:The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.  The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).Output:Print a single integer — the maximum sum of any contiguous subarray after reversing at most one subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nINF = 10 ** 18\n\n\ndef kadane(arr):\n    \"\"\"classic maximum sub-array sum (no reversal)\"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x\n        if cur > best:\n            best = cur\n    return best\n\n\ndef best_with_pattern(arr):\n    \"\"\"\n    pattern:\n        (some subarray ending before the reversed part)  +\n        (a suffix of the reversed part)\n\n    The formula derived in the analysis gives an O(n) algorithm.\n    \"\"\"\n    n = len(arr)\n    # prefix sums\n    pref = [0] * (n + 1)\n    for i, v in enumerate(arr):\n        pref[i + 1] = pref[i] + v\n\n    # best sub-array sum that ENDS at i\n    end_here = [0] * n\n    end_here[0] = arr[0]\n    for i in range(1, n):\n        end_here[i] = arr[i] if end_here[i - 1] + arr[i] < arr[i] else end_here[i - 1] + arr[i]\n\n    # prefix_best_end[i] = max_{t ≤ i} end_here[t]\n    prefix_best_end = [0] * n\n    prefix_best_end[0] = end_here[0]\n    for i in range(1, n):\n        prefix_best_end[i] = prefix_best_end[i - 1] if prefix_best_end[i - 1] > end_here[i] else end_here[i]\n\n    # main scan over the right boundary r\n    best_diff = 0                                # corresponds to k = 0 (empty left part)\n    ans = -INF\n\n    for r in range(n):\n        # candidate subarray ends at r\n        candidate = pref[r + 1] + best_diff\n        if candidate > ans:\n            ans = candidate\n\n        # prepare k = r + 1 for the future\n        diff = prefix_best_end[r] - pref[r + 1]  # T[k] for k = r + 1\n        if diff > best_diff:\n            best_diff = diff\n\n    return ans\n\n\ndef solve(nums):\n    base = kadane(nums)\n    case1 = best_with_pattern(nums)\n    case2 = best_with_pattern(nums[::-1])\n    return max(base, case1, case2)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(solve(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]