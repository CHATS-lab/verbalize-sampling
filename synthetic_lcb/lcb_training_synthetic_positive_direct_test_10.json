[
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of distinct pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if they have different indices.  Input Format:  - The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output Format:  - Print a single integer, the number of distinct pairs whose sum is even.Constraints:- 1 ≤ n ≤ 10^5  - 1 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    even = 0\n    odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n    \n    # number of ways to pick 2 from k items: k * (k - 1) // 2\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this missing integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (−10^6 ≤ nums[i] ≤ 10^6), the elements of the array.Output:Print a single integer — the smallest positive integer not present in nums.Constraints:- 1 ≤ n ≤ 10^5- −10^6 ≤ nums[i] ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    present = set(nums)                      # store all existing numbers\n    missing = 1                              # smallest candidate\n\n    # the answer is guaranteed to be ≤ n+1\n    while missing in present:\n        missing += 1\n\n    print(missing)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length k. If there are multiple such subarrays, return the sum of the leftmost one. If k is greater than n, return 0.Input Format:The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5).The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), separated by spaces.Output Format:Print a single integer representing the maximum sum as described.Constraints:1 ≤ n ≤ 10^51 ≤ k ≤ 10^5−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum_k(nums, n, k):\n    if k > n:\n        return 0\n    # Compute sum of first window\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n    # Slide the window\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    print(max_subarray_sum_k(nums, n, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of two distinct elements in nums such that their sum equals target. If there are multiple solutions, return any one of them. If no such pair exists, return -1 -1.Input Format:- The first line contains two integers n (1 ≤ n ≤ 10^5) and target (-10^9 ≤ target ≤ 10^9).- The second line contains n space-separated integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).Output Format:- Output two integers, the 0-based indices of the two elements whose sum is equal to target. If no such pair exists, output -1 -1.Constraints:- Each input will have at most one solution.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}                       # value -> index\n    for idx, val in enumerate(nums):\n        complement = target - val\n        if complement in seen:\n            print(seen[complement], idx)\n            return\n        seen[val] = idx\n    print(-1, -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Your task is to determine the length of the longest contiguous subarray where the sum of its elements is equal to zero. If no such subarray exists, output 0.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.- The second line contains N integers A_1, A_2, ..., A_N (-10^9 ≤ A_i ≤ 10^9), the elements of the array.Output Format:- Output a single integer: the length of the longest contiguous subarray with sum zero.Constraints:- 1 ≤ N ≤ 10^5- -10^9 ≤ A_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    prefix_index = {0: -1}          # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(arr):\n        prefix_sum += val\n        if prefix_sum in prefix_index:\n            # Zero-sum subarray between prefix_index[prefix_sum]+1 … i\n            max_len = max(max_len, i - prefix_index[prefix_sum])\n        else:\n            prefix_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the smallest positive integer that does not appear in nums. Return this integer.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers, nums[i] (−10^6 ≤ nums[i] ≤ 10^6).Output:Print a single integer, the smallest positive integer not present in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    positives = set()\n    for x in nums:\n        if x > 0:\n            positives.add(x)\n\n    # The smallest missing positive is in the range [1, n + 1]\n    for candidate in range(1, n + 2):\n        if candidate not in positives:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, find the length of the longest substring that contains no repeating characters.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string S.The second line contains the string S.Output:Print a single integer — the length of the longest substring with all unique characters.Constraints:1 ≤ n ≤ 10^5S consists only of lowercase English letters ('a'-'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1].decode() if isinstance(data[1], bytes) else data[1]\n\n    # Array for last seen positions, -1 means not seen so far\n    last_pos = [-1] * 26                   # only lowercase letters\n    left = 0                               # left end of sliding window\n    best = 0\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97                 # map 'a'..'z' -> 0..25\n        if last_pos[idx] >= left:          # repeated inside current window\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the length of the longest contiguous subarray with all distinct elements.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), the elements of the array.Output:Output a single integer, the length of the longest contiguous subarray with all distinct elements.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(nums):\n    last_pos = {}            # value -> most recent index\n    start = 0                # start of current window\n    best = 0\n\n    for i, val in enumerate(nums):\n        if val in last_pos and last_pos[val] >= start:\n            # duplicate inside current window -> move start\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two numbers are considered a pair if their indices are different and the sum is even.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9), separated by spaces.Output:Output a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even_cnt = 0\n    odd_cnt = 0\n\n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n\n    # pairs from evens + pairs from odds\n    ans = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest contiguous subarray whose elements sum to zero. If there is no such subarray, output 0.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9), the elements of the array.Output:Output a single integer: the length of the longest contiguous subarray with sum zero.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    prefix_index = {0: -1}      # prefix_sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n        if prefix_sum in prefix_index:\n            # current zero-sum subarray length\n            max_len = max(max_len, i - prefix_index[prefix_sum])\n        else:\n            # store earliest occurrence\n            prefix_index[prefix_sum] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of unique pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Two pairs are considered different if their indices are different.  Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.  The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9), the elements of the array.  Output:Print a single integer: the number of unique pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Pairs with both even + pairs with both odd\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even. Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n space-separated integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output Format:Print a single integer, the number of pairs (i, j) where the sum nums[i] + nums[j] is even.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n    \n    even_cnt = 0\n    odd_cnt = 0\n    \n    for num in nums:\n        if num & 1:\n            odd_cnt += 1\n        else:\n            even_cnt += 1\n    \n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements in the subarray does not exceed 1.Input Format:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9) separated by spaces.Output Format:Print a single integer, the length of the longest such subarray.Constraints:1 ≤ n ≤ 10^51 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Deques to keep indices of candidates for current max and min\n    max_d = deque()   # elements in decreasing order\n    min_d = deque()   # elements in increasing order\n\n    best = 0\n    left = 0\n    for right, val in enumerate(nums):\n        # Update max deque: remove smaller elements from the back\n        while max_d and nums[max_d[-1]] < val:\n            max_d.pop()\n        max_d.append(right)\n\n        # Update min deque: remove larger elements from the back\n        while min_d and nums[min_d[-1]] > val:\n            min_d.pop()\n        min_d.append(right)\n\n        # Shrink the window from the left while condition violated\n        while nums[max_d[0]] - nums[min_d[0]] > 1:\n            left += 1\n            # Remove indices that fell out of the window\n            if max_d[0] < left:\n                max_d.popleft()\n            if min_d[0] < left:\n                min_d.popleft()\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any single element by 1. Output the minimum number of moves needed.Input:The first line contains an integer n (1 ≤ n ≤ 10^5).The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).Output:Print a single integer, the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    nums.sort()\n    median = nums[n // 2]           # for even n this is the upper median if 0-indexed, any median works\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of only lowercase English letters, determine the length of the longest substring that contains no repeating characters. A substring is a contiguous sequence of characters within the string.Input Format:- The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string S.- The second line contains the string S of length N.Output Format:- Output a single integer representing the length of the longest substring without repeating characters.Constraints:- 1 ≤ N ≤ 10^5- S consists only of lowercase English letters ('a' to 'z').\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding window approach to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_pos = [-1] * 26        # since only 'a'..'z'\n    max_len = 0\n    left = 0                    # left end of current window\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97\n        # if character has appeared in current window, move left pointer\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line is N, second line is the string\n    # We can safely ignore N because len(s) is self-evident\n    if len(data) == 1:\n        s = data[0]\n    else:\n        s = data[1].rstrip('\\n')\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray where the absolute difference between the maximum and minimum elements is at most 1.Input:The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest contiguous subarray satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    max_dq = deque()   # decreasing: front is current window maximum\n    min_dq = deque()   # increasing: front is current window minimum\n\n    best = 0\n    left = 0\n    for right, val in enumerate(nums):\n        # maintain max deque\n        while max_dq and nums[max_dq[-1]] < val:\n            max_dq.pop()\n        max_dq.append(right)\n\n        # maintain min deque\n        while min_dq and nums[min_dq[-1]] > val:\n            min_dq.pop()\n        min_dq.append(right)\n\n        # shrink window until condition satisfied\n        while nums[max_dq[0]] - nums[min_dq[0]] > 1:\n            left += 1\n            if max_dq[0] < left:\n                max_dq.popleft()\n            if min_dq[0] < left:\n                min_dq.popleft()\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest contiguous subarray where the sum of the elements is equal to K. If there is no such subarray, output 0.Input Format:- The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).- The second line contains N integers a_1, a_2, ..., a_N (|a_i| ≤ 10^4).Output Format:- Output a single integer: the length of the longest contiguous subarray with sum K.Constraints:- 1 ≤ N ≤ 10^5- |K| ≤ 10^9- |a_i| ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    # Dictionary to store the first index where each prefix sum appears.\n    # prefix_map[prefix_sum] = earliest_index\n    prefix_map = {0: -1}           # Sum 0 occurs before the array starts.\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen (prefix_sum - k) before, a subarray ending at i sums to k.\n        target = prefix_sum - k\n        if target in prefix_map:\n            best_len = max(best_len, i - prefix_map[target])\n\n        # Record the earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_map:\n            prefix_map[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray with equal number of even and odd elements. If there are multiple such subarrays, return the length of any one of them. If no such subarray exists, return 0.Input:The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.The second line contains n integers separated by spaces, representing the array nums (-10^9 ≤ nums[i] ≤ 10^9).Output:Output a single integer: the length of the longest contiguous subarray with an equal number of even and odd elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    # Map to store the first index where each prefix balance is seen.\n    first_index = {0: -1}        # balance 0 occurs before the array starts\n    balance = 0                  # +1 for even, -1 for odd\n    max_len = 0\n\n    for i, val in enumerate(nums):\n        balance += 1 if val % 2 == 0 else -1\n\n        if balance in first_index:\n            # We have seen this balance before; subarray between previous index+1 and i is balanced.\n            prev_idx = first_index[balance]\n            max_len = max(max_len, i - prev_idx)\n        else:\n            # First time this balance appears.\n            first_index[balance] = i\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of unique pairs (i, j) such that i < j and nums[i] + nums[j] == target. Each pair should be counted only once, regardless of how many times the numbers appear in the array.Input Format:- The first line contains two integers n (the length of the array) and target.- The second line contains n integers, the elements of nums.Output Format:- Output a single integer: the number of unique pairs with the given sum.Constraints:- 1 ≤ n ≤ 10^5- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, target = int(data[0]), int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()          # numbers we have passed so far\n    pairs = set()         # unique value-pairs that meet the condition\n\n    for num in nums:\n        comp = target - num\n        if comp in seen:\n            # store the ordered pair to avoid duplicates like (5,3) and (3,5)\n            pair = (min(num, comp), max(num, comp))\n            pairs.add(pair)\n        seen.add(num)\n\n    print(len(pairs))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer k, find the length of the longest subarray with sum less than or equal to k. The subarray must consist of consecutive elements from nums. If no such subarray exists, output 0.Input:The first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9), where n is the number of elements in the array.The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4), the elements of the array.Output:Output a single integer: the length of the longest subarray with sum ≤ k.Constraints:1 ≤ n ≤ 10^5−10^9 ≤ k ≤ 10^9−10^4 ≤ nums[i] ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\nINF = 10 ** 18\n\n\nclass SegmentTree:\n    \"\"\"segment tree that supports\n       - point update: tree[pos] = min(tree[pos], value)\n       - range query:  min on [l, r] (inclusive)\n    \"\"\"\n    def __init__(self, size):\n        self.N = 1\n        while self.N < size:\n            self.N <<= 1\n        self.data = [INF] * (2 * self.N)\n\n    def update(self, pos, value):\n        idx = pos + self.N\n        if value >= self.data[idx]:\n            return\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = min(self.data[idx << 1], self.data[(idx << 1) | 1])\n            idx >>= 1\n\n    def query(self, l, r):\n        if l > r:\n            return INF\n        l += self.N\n        r += self.N\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    nums = [int(next(it)) for _ in range(n)]\n\n    # prefix sums\n    pref = [0]\n    for x in nums:\n        pref.append(pref[-1] + x)\n\n    # coordinate compression of all prefix sums\n    vals = sorted(set(pref))\n    idx_map = {v: i for i, v in enumerate(vals)}\n    m = len(vals)\n\n    seg = SegmentTree(m)\n    # insert prefix[0] with index 0\n    seg.update(idx_map[pref[0]], 0)\n\n    ans = 0\n    for j in range(1, n + 1):\n        threshold = pref[j] - k\n        # first index with value >= threshold\n        idx = bisect.bisect_left(vals, threshold)\n        if idx < m:\n            best_i = seg.query(idx, m - 1)\n            if best_i != INF:\n                ans = max(ans, j - best_i)\n        # insert current prefix sum with earliest index\n        seg.update(idx_map[pref[j]], j)\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]