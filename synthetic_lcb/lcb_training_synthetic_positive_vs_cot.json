[
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine if there exists a pair of numbers whose sum is exactly K. If such a pair exists, print \"YES\", otherwise print \"NO\".\n\nInput Format:\n- The first line contains two integers N (1 ≤ N ≤ 10^5) and K (1 ≤ K ≤ 10^9).\n- The second line contains N space-separated integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print \"YES\" if there exists a pair with sum K, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Your task is to determine the length of the longest substring with all distinct characters.\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Print a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring with all distinct characters.\n\n    Uses the sliding-window technique with a hash map that stores the latest\n    index at which each character was seen.\n    Time complexity: O(n)\n    Space complexity: O(k)  (k ≤ alphabet size, here ≤ 26)\n    \"\"\"\n    last_pos = {}          # character -> latest index seen\n    start = 0              # left border of the current window\n    best = 0               # best length found so far\n\n    for i, ch in enumerate(s):\n        # If `ch` is inside current window, move `start`\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the minimum number of operations required to make all elements equal, where in one operation you can increment or decrement any element by 1.\n\nInput Format:\n- The first line contains a single integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Sorting to find the median\n    arr.sort()\n    median = arr[n // 2]        # 0-indexed median (works for both even/odd)\n\n    # Sum of absolute differences to the median is minimal\n    ops = sum(abs(x - median) for x in arr)\n\n    print(ops)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine if it is a palindrome (it reads the same forwards and backwards).\n\nInput Format:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" if s is a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000) — the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−1000 ≤ a_i ≤ 1000).\n\nOutput:\nOutput a single integer — the sum of all even numbers in the input array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])  # size of the array, though not strictly needed\n    nums = map(int, data[1:n+1])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Print the maximum sum.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, print the sum of all elements that are greater than or equal to 10.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000).\n- The second line contains n integers nums[i] (-1000 ≤ nums[i] ≤ 1000).\n\nOutput Format:\n- Output a single integer: the sum of all elements greater than or equal to 10.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    total = sum(x for x in nums if x >= 10)\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers A of length N, compute the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).\n\nOutput:\nPrint a single integer representing the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Ensure we only process exactly n numbers even if extra are present\n    numbers = map(int, data[1:1 + n])\n    even_sum = sum(x for x in numbers if x % 2 == 0)\n    print(even_sum)\n\nmain()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if the string is a palindrome (reads the same forwards and backwards).\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 1000).\n\nOutput:\nPrint \"YES\" if S is a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n    \n    # Read the string, stripping the trailing newline (if any)\n    s = sys.stdin.readline().strip()\n    \n    # Check if the string is a palindrome\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the minimum value in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), the elements of the array.\n\nOutput Format:\n- Output a single integer, the minimum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])           # number of elements (can be ignored for logic, but validates input)\n    # Convert the rest to integers and find the minimum\n    # We slice from 1 because the first token is n.\n    arr = map(int, data[1:n+1])\n    print(min(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, print \"Yes\" if n is a prime number, otherwise print \"No\".\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^6).\n\nOutput:\nOutput \"Yes\" if n is prime, otherwise output \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number, else False.\"\"\"\n    if n < 2:\n        return False\n    if n in (2, 3):\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Check potential factors of form 6k ± 1 up to sqrt(n)\n    limit = int(math.isqrt(n))\n    i = 5\n    while i <= limit:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef main() -> None:\n    data = sys.stdin.readline()\n    if not data:\n        return\n    n = int(data.strip())\n    print(\"Yes\" if is_prime(n) else \"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest such substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_idx = {}\n    start = 0\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_idx and last_idx[ch] >= start:\n            start = last_idx[ch] + 1\n        last_idx[ch] = i\n        current_len = i - start + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find the maximum sub-array sum in O(N)\n    \"\"\"\n    current = best = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = max_subarray_sum(nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers nums_i (−10^4 ≤ nums_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n\n    # Kadane's algorithm\n    max_so_far = -10**18  # sufficiently small\n    current_sum = 0\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_so_far = max(max_so_far, current_sum)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    # Initialize with the first element to correctly handle all-negative arrays\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    result = kadane(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if there exists a pair of distinct elements whose sum is exactly k.\n\nInput Format:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput \"YES\" if such a pair exists, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    seen = set()\n    for x in arr:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum of any contiguous subarray. Output the maximum sum that can be obtained.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).\n\nOutput:\nOutput a single integer representing the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm: O(N) time, O(1) extra space.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the index of the first occurrence of the integer k in the list. If k is not present, output -1. (Indexing is 0-based.)\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the index of the first occurrence of k, or -1 if k is not present.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    # the rest are the list elements\n    # ensure we only consider first n elements even if extra input\n    a = list(map(int, data[2:2+n]))\n    \n    index = -1\n    for i, val in enumerate(a):\n        if val == k:\n            index = i\n            break\n    print(index)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to compute the maximum sum of a contiguous sub-array.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at x\n        max_ending_here = max(x, max_ending_here + x)\n        # Update global maximum if needed\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])      # Number of elements (not strictly needed, but read for completeness)\n    arr = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum value in the array.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^6 ≤ a_i ≤ 10^6).\n\nOutput:\nOutput a single integer: the maximum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])  # Number of elements (1 ≤ N ≤ 1000)\n    # Extract next n integers and convert them to int\n    values = list(map(int, data[1:1 + n]))\n\n    # Output the maximum value\n    print(max(values))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of integers whose sum is equal to a given value k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any element by 1.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^9).\n\nOutput Format:\nPrint a single integer, the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:]\n\n    # Sort to find the median efficiently\n    arr.sort()\n    median = arr[n // 2]           # works for both even and odd n\n    moves = sum(abs(x - median) for x in arr)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the minimum number of elements you need to remove so that the remaining elements are all equal.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 2 × 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer — the minimum number of elements to remove.\n\nConstraints:\n1 ≤ n ≤ 2 × 10^5\n1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Count frequency of each element\n    freq = Counter(arr)\n    \n    # The largest group we can keep\n    keep = max(freq.values())\n    \n    # Minimum removals = total elements - size of largest equal group\n    print(n - keep)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, and an array of n positive integers, find the number of contiguous subarrays whose sum is exactly k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the number of contiguous subarrays with sum equal to k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    # Remaining n integers\n    nums = list(map(int, data[2:2 + n]))\n    \n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1  # Empty prefix has sum 0\n    curr_sum = 0\n    ans = 0\n    \n    for num in nums:\n        curr_sum += num\n        # We need number of previous prefixes with sum == curr_sum - k\n        ans += prefix_counts[curr_sum - k]\n        prefix_counts[curr_sum] += 1\n    \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of numbers whose sum is exactly equal to a given integer k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 2×10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine whether s can be rearranged to form a palindrome.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s.\n\nOutput Format:\n- Output 'YES' if s can be rearranged into a palindrome, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    odd = sum(1 for c in Counter(s).values() if c % 2)\n    return odd <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])          # length of the string (may be unused for logic)\n    s = data[1] if len(data) > 1 else \"\"\n    # Optional: trust n, or simply use len(s). Logic works either way.\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    s = sys.stdin.readline().rstrip('\\n')\n\n    last_pos = {}          # stores last seen index of each character\n    left = 0               # left boundary of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window -> move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        # update maximum window length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, find the number of pairs (i, j) such that i < j and a_i + a_j is divisible by a given integer k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef count_divisible_pairs(arr, k):\n    \"\"\"\n    Counts pairs (i, j) with i < j and arr[i] + arr[j] divisible by k.\n    \"\"\"\n    # Frequency of each remainder\n    freq = [0] * k\n    for num in arr:\n        freq[num % k] += 1\n\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    pairs += freq[0] * (freq[0] - 1) // 2\n\n    # Handle remainders 1..k//2\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, remainder k/2 pairs with itself\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    return pairs\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n    result = count_divisible_pairs(arr, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- A single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substr_len(s: str) -> int:\n    \"\"\"Return length of the longest substring without repeating characters.\"\"\"\n    last_pos = [-1] * 26                     # because only lowercase English letters\n    left = 0                                # left boundary of the current window\n    best = 0\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97                  # map 'a'..'z' to 0..25\n        # If character appeared inside the current window, move left pointer\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right               # update latest position of ch\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substr_len(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the sum.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find maximum sub-array sum.\n    Works in O(n) time and O(1) extra space.\n    \"\"\"\n    current_max = best = arr[0]  # start with first element\n    for x in arr[1:]:\n        current_max = max(x, current_max + x)\n        best = max(best, current_max)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Convert remaining tokens to integers\n    arr = list(map(int, data[1:1+n]))\n    # Safety: if the input might have fewer than n numbers\n    # (shouldn't happen per problem statement), but slice anyway.\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of size n, find the length of the longest contiguous subarray with all distinct elements.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the length of the longest contiguous subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    nums = data[1:n + 1]          # Ensure we only take n numbers\n\n    last_idx = {}                 # Stores last index of each value\n    left = 0                      # Left end of the sliding window\n    best = 0\n\n    for right, val in enumerate(nums):\n        # If val is inside current window, move left just past its last occurrence\n        if val in last_idx and last_idx[val] >= left:\n            left = last_idx[val] + 1\n\n        last_idx[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest contiguous subarray with a sum equal to a given number K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).\nThe second line contains N integers A1, A2, ..., AN (|Ai| ≤ 10^4).\n\nOutput:\nPrint a single integer, the length of the longest contiguous subarray whose sum is exactly K. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    prefix_first_idx = {0: -1}      # prefix_sum -> earliest index\n    prefix_sum = 0\n    best = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n        # If (prefix_sum - K) appeared before, subarray (prev_idx+1 ... i) sums to K\n        need = prefix_sum - K\n        if need in prefix_first_idx:\n            best = max(best, i - prefix_first_idx[need])\n        # store earliest occurrence of this prefix_sum\n        if prefix_sum not in prefix_first_idx:\n            prefix_first_idx[prefix_sum] = i\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of distinct indices i and j such that nums[i] + nums[j] equals a given target value T. Output 'YES' if such a pair exists, otherwise output 'NO'.\n\nInput Format:\n- The first line contains two integers n and T (1 ≤ n ≤ 10^5, -10^9 ≤ T ≤ 10^9).\n- The second line contains n integers nums[1], nums[2], ..., nums[n] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single line: 'YES' or 'NO'.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^9 ≤ nums[i], T ≤ 10^9\n- i ≠ j\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    T = int(data[1])\n    nums = map(int, data[2:2 + n])\n\n    seen = set()\n    for num in nums:\n        if T - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if S can be rearranged to form a palindrome.\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" if the string can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Check if the characters of string s can be rearranged to form a palindrome.\n\n    A palindrome permutation has:\n      - At most one character with an odd frequency (for odd-length strings)\n      - Zero characters with an odd frequency (for even-length strings)\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value. For each node, compute the sum of values in its subtree.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 2 × 10^5).\nThe second line contains N integers V_1, V_2, ..., V_N (1 ≤ V_i ≤ 10^9), values of nodes.\nEach of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge.\n\nOutput:\nOutput N space-separated integers, the i-th being the sum of values in the subtree rooted at node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1_000_000)\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    values = list(map(int, data[1:1 + n]))\n    adj = [[] for _ in range(n + 1)]\n    idx = 1 + n\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1])\n        adj[u].append(v)\n        adj[v].append(u)\n        idx += 2\n\n    res = [0] * (n + 1)\n\n    def dfs(u: int, parent: int) -> int:\n        subtotal = values[u - 1]\n        for v in adj[u]:\n            if v != parent:\n                subtotal += dfs(v, u)\n        res[u] = subtotal\n        return subtotal\n\n    dfs(1, 0)\n    sys.stdout.write(' '.join(map(str, res[1:])))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\nThe second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000).\n\nOutput:\nPrint a single integer: the sum of all even numbers in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring that contains at most k distinct characters.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26), where n is the length of the string.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Output a single integer, the length of the longest substring with at most k distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_k_distinct(s: str, k: int) -> int:\n    if k == 0:\n        return 0\n    left = 0\n    freq = defaultdict(int)\n    distinct = 0\n    best = 0\n    \n    for right, ch in enumerate(s):\n        if freq[ch] == 0:\n            distinct += 1\n        freq[ch] += 1\n        \n        while distinct > k:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                distinct -= 1\n            left += 1\n        \n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    \n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else ''\n    \n    # Ensure string is exactly n characters, but trust input normally.\n    s = s[:n]\n    print(longest_substring_at_most_k_distinct(s, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine the number of connected components in the graph.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\nThe next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer, the number of connected components.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]  # 1-based indexing\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * (n + 1)\n    components = 0\n\n    for node in range(1, n + 1):\n        if not visited[node]:\n            components += 1\n            # iterative DFS/BFS to mark the whole component\n            stack = [node]\n            visited[node] = True\n            while stack:\n                cur = stack.pop()\n                for nei in adj[cur]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        stack.append(nei)\n\n    print(components)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with n nodes and m edges. Determine whether the graph is bipartite.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating an edge between nodes u and v.\n\nOutput Format:\nOutput \"YES\" if the graph is bipartite, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, adj):\n    color = [0] * (n + 1)           # 0 = unvisited, 1 / -1 = two colors\n\n    for start in range(1, n + 1):\n        if color[start] != 0:\n            continue\n\n        color[start] = 1\n        q = deque([start])\n\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if v == u:          # self-loop → odd cycle of length 1\n                    return False\n                if color[v] == 0:\n                    color[v] = -color[u]\n                    q.append(v)\n                elif color[v] == color[u]:\n                    return False\n    return True\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    print(\"YES\" if is_bipartite(n, adj) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if it is possible to rearrange S to form a palindrome. If possible, output \"YES\", otherwise output \"NO\".\n\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput \"YES\" if S can be rearranged into a palindrome, and \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if the characters of s can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for freq in Counter(s).values() if freq % 2)\n    # A palindrome permits at most one character with an odd count\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Print the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm to find maximum subarray sum.\"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = x if max_ending_here + x < x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:n+1]  # Safeguard in case extra numbers are present\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring that contains at most two distinct characters.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string.\nThe second line contains the string s.\n\nOutput Format:\nOutput a single integer — the length of the longest substring with at most two distinct characters.\n\nConstraints:\n1 ≤ n ≤ 10^5\ns consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    \n    freq = defaultdict(int)   # character frequency in current window\n    left = 0                  # left boundary of the window\n    best = 0                  # best window length found\n    \n    for right, ch in enumerate(s):\n        freq[ch] += 1\n        \n        # shrink window if we have more than 2 distinct characters\n        while len(freq) > 2:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n            left += 1\n        \n        # update best length\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, determine whether it is possible to rearrange the array into a palindrome. If yes, print \"YES\"; otherwise, print \"NO\".\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Output \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(arr):\n    \"\"\"\n    Returns True if the array can be rearranged into a palindrome, else False.\n    \"\"\"\n    freq = Counter(arr)\n    odd_counts = sum(1 for v in freq.values() if v % 2)\n    # For a palindrome we can have at most one odd count\n    return odd_counts <= 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(\"YES\" if can_form_palindrome(arr) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x n grid of lowercase letters, determine if the grid can be rearranged so that each row and each column is in lexicographically non-decreasing order.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 100).\nEach of the next n lines contains a string of n lowercase English letters.\n\nOutput Format:\nOutput \"YES\" if possible, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_rearrange(grid):\n    \"\"\"\n    Sort every row of the grid in-place, then check whether\n    each column is already in non-decreasing (lexicographic) order.\n    \"\"\"\n    # Sort each row\n    sorted_rows = [''.join(sorted(row)) for row in grid]\n    \n    n = len(sorted_rows)\n    \n    # Check columns\n    for col in range(n):\n        for row in range(1, n):\n            if sorted_rows[row][col] < sorted_rows[row - 1][col]:\n                return False\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    grid = data[1:1 + n]\n    \n    print(\"YES\" if can_rearrange(grid) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string S.\n\nOutput:\nPrint a single integer, the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding–window algorithm to compute the length of the longest substring\n    that contains no repeated characters.\n    \"\"\"\n    last_pos = {}           # character -> most recent index\n    max_len = 0\n    left = 0                # left boundary of current window\n\n    for right, ch in enumerate(s):\n        # If the character was seen and is inside the current window,\n        # move the left boundary right past its previous occurrence.\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # The first line is n, the second the string.\n    # We ignore n because Python strings carry their own length.\n    s = data[1].rstrip('\\n') if len(data) > 1 else \"\"\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray. Output this sum.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers ai (−10^4 ≤ ai ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum sum over all contiguous sub-arrays.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # cur = max(x, cur + x)\n        best = best if best > cur else cur    # best = max(best, cur)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the number of pairs (i, j) such that i < j and Ai + Aj is divisible by K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^4).\nThe second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9).\n\nOutput:\nPrint a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = map(int, data[2:2 + n])\n\n    # Count frequencies of each remainder modulo k\n    freq = [0] * k\n    for num in nums:\n        freq[num % k] += 1\n\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    c = freq[0]\n    pairs += c * (c - 1) // 2\n\n    # Other remainder pairs\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # When k is even, remainder k/2 also pairs with itself\n    if k % 2 == 0:\n        c = freq[k // 2]\n        pairs += c * (c - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine the minimum number of elements you need to remove so that all remaining elements are equal.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of removals required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # No need to guard for n == 0 because constraints say n ≥ 1\n    nums = map(int, data[1:1 + n])\n\n    freq = Counter(nums)\n    max_freq = max(freq.values()) if freq else 0\n\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray whose sum is zero.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, ..., A_N (|A_i| ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest contiguous subarray with sum zero.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    prefix_sum = 0\n    first_pos = {0: -1}      # prefix_sum -> earliest index seen\n    best_len = 0\n\n    for idx, val in enumerate(arr):\n        prefix_sum += val\n        if prefix_sum in first_pos:\n            best_len = max(best_len, idx - first_pos[prefix_sum])\n        else:\n            first_pos[prefix_sum] = idx\n\n    print(best_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a binary string s of length n, determine the minimum number of flips required to make the string alternating (no two adjacent characters are the same).\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains the binary string s consisting of '0's and '1's.\n\nOutput Format:\nOutput a single integer — the minimum number of flips required.\n\nConstraints:\n1 ≤ n ≤ 10^5\ns consists of only '0' and '1'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Compute the minimum number of flips required to convert the binary\n    string `s` into an alternating string (no two consecutive characters equal).\n    \"\"\"\n    # Pattern 1 : starts with '0' => \"010101...\"\n    # Pattern 2 : starts with '1' => \"101010...\"\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n\n    for i, ch in enumerate(s):\n        expected_for_0 = '0' if i % 2 == 0 else '1'\n        expected_for_1 = '1' if i % 2 == 0 else '0'\n        if ch != expected_for_0:\n            flips_start_with_0 += 1\n        if ch != expected_for_1:\n            flips_start_with_1 += 1\n\n    return min(flips_start_with_0, flips_start_with_1)\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])   # length, can be ignored but validates input format\n    s = data[1] if len(data) > 1 else ''\n    # Optional safety: use min of given n and actual length\n    s = s[:n]\n    result = min_flips_to_alternate(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if it is possible to partition the array into two subsets with equal sums.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 100).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000).\n\nOutput:\nPrint \"YES\" if it is possible to partition the array into two subsets with equal sums, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, can't split into two equal parts\n    if total & 1:\n        return False\n    target = total // 2\n\n    # Bit-set DP: bit i of `bits` is 1 iff a subset with sum i is reachable\n    bits = 1  # only sum 0 is reachable at start\n    for x in nums:\n        bits |= bits << x        # add current element to all existing sums\n        # Optional early stopping\n        if bits >> target & 1:\n            return True\n    return (bits >> target) & 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine the maximum sum of a contiguous subarray of length at least 1.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    current_sum = best_sum = arr[0]\n    for value in arr[1:]:\n        current_sum = max(value, current_sum + value)\n        best_sum = max(best_sum, current_sum)\n    return best_sum\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nA city has N intersections connected by M one-way roads. Each road has a travel time. Determine the minimum time required to travel from intersection 1 to intersection N. If it is impossible, print -1.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2 × 10^5).\nEach of the next M lines contains three integers u, v, t (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ t ≤ 10^4), indicating a road from u to v of time t.\n\nOutput:\nPrint the minimum travel time from 1 to N, or -1 if there is no path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef dijkstra(n, adj):\n    INF = 10**18\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]                       # (current_distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:                # outdated entry\n            continue\n        if u == n:                      # early exit when destination reached\n            return d\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n    return -1 if dist[n] == INF else dist[n]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        t = int(next(it))\n        adj[u].append((v, t))\n\n    res = dijkstra(n, adj)\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the minimum number of operations required to make all elements equal. In one operation, you can choose any element and decrease it by 1.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 2×10^5).\nThe second line contains N integers ai (1 ≤ ai ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of operations needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))   # we only need the first n numbers\n    \n    min_val = min(arr)\n    operations = sum(x - min_val for x in arr)\n    \n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_seen = {}\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, output all the distinct prime factors of n in increasing order.\n\nInput Format:\n- The first line contains a single integer n (2 ≤ n ≤ 10^9).\n\nOutput Format:\n- Output the list of distinct prime factors, separated by spaces.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef distinct_prime_factors(n: int):\n    \"\"\"Return a list of the distinct prime factors of n in increasing order.\"\"\"\n    factors = []\n\n    # Handle factor 2 separately\n    if n % 2 == 0:\n        factors.append(2)\n        while n % 2 == 0:\n            n //= 2\n\n    # Check odd factors up to sqrt(n)\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            factors.append(f)\n            while n % f == 0:\n                n //= f\n        f += 2\n\n    # If what's left is > 1, it's prime\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    factors = distinct_prime_factors(n)\n    print(\" \".join(map(str, factors)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Determine if S can be rearranged to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains a string S of length N.\n\nOutput:\nOutput \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines whether any permutation of the string `s` can form a palindrome.\n    \n    A string can be rearranged into a palindrome iff the count of characters\n    with odd frequency is:\n      • 0, when the length of `s` is even\n      • 1, when the length of `s` is odd\n    \"\"\"\n    freq = Counter(s)\n    odd = sum(1 for cnt in freq.values() if cnt % 2)\n    \n    if len(s) % 2 == 0:\n        return odd == 0\n    else:\n        return odd == 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])          # Length of the string (not strictly needed)\n    s = data[1] if len(data) > 1 else \"\"\n    \n    # Optional sanity check: ensure the provided length matches.\n    # If mismatched, we can still proceed with the actual string length.\n    if len(s) != n:\n        n = len(s)\n    \n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, return the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nOutput a single integer, the length of the longest substring without duplicate characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_seen = {}               # maps character -> last index where it appeared\n    left = 0                     # left boundary of current window\n    best = 0                     # best length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # `ch` has been seen inside the current window;\n            # move `left` just past its last occurrence\n            left = last_seen[ch] + 1\n        last_seen[ch] = right     # update last seen index\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine the number of connected components in the graph.\n\nInput Format:\n- The first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 10^5).\n- The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput Format:\n- Print a single integer, the number of connected components.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n\ndef main() -> None:\n    # Read entire input at once and split into integers (fast for large input).\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:                       # No data present.\n        return\n\n    n, m = data[0], data[1]\n    # Union-Find (Disjoint Set Union) structures.\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        # Iterative path-compression find.\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> None:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        # Union by size (attach smaller tree under larger one).\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n\n    # Process all edges.\n    idx = 2\n    for _ in range(m):\n        u, v = data[idx], data[idx + 1]\n        union(u, v)\n        idx += 2\n\n    # Count unique roots.\n    components = sum(1 for node in range(1, n + 1) if find(node) == node)\n    print(components)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two arrays of integers A and B, each of length n, find the maximum value of A[i] + B[j] where i < j.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers A_1, A_2, ..., A_n (1 ≤ A_i ≤ 10^9).\nThe third line contains n integers B_1, B_2, ..., B_n (1 ≤ B_i ≤ 10^9).\n\nOutput:\nOutput a single integer — the maximum value of A[i] + B[j] for all i < j.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    # next n integers are A, then n integers are B\n    A = list(map(int, data[1:1 + n]))\n    B = list(map(int, data[1 + n:1 + 2 * n]))\n\n    max_A_prefix = A[0]          # best A[i] seen so far with i < current j\n    best = max_A_prefix + B[1]   # at least one valid pair exists since n ≥ 2\n\n    for j in range(1, n):\n        best = max(best, max_A_prefix + B[j])\n        max_A_prefix = max(max_A_prefix, A[j])\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine whether it is possible to rearrange them so that no two adjacent numbers are equal. Print \"YES\" if possible, otherwise print \"NO\".\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers (1 ≤ a_i ≤ 10^5).\n\nOutput Format:\n- Output \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    \n    # For a valid rearrangement the most frequent number\n    # must not occupy more than ceil(n/2) positions.\n    if max_freq <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if it is possible to rearrange the characters of S to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string.\nThe second line contains the string S.\n\nOutput:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of the string `s` can form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    # data[0] is N, data[1] is the string S\n    # We don't actually need N because len(S) gives us the same information.\n    s = data[1] if len(data) > 1 else \"\"\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the length of the longest contiguous subarray with all distinct elements.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest subarray with all distinct values.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(arr):\n    last_pos = {}\n    start = 0\n    best = 0\n\n    for i, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= start:\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    result = longest_unique_subarray_length(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    # Convert the next n tokens to integers\n    arr = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the length of the longest contiguous subarray whose sum is less than or equal to a given integer k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_subarray_leq_k(arr, k):\n    left = 0\n    current_sum = 0\n    max_len = 0\n    \n    for right, value in enumerate(arr):\n        current_sum += value\n        \n        # Shrink window from the left until sum <= k\n        while current_sum > k and left <= right:\n            current_sum -= arr[left]\n            left += 1\n        \n        # If current_sum <= k, update max_len\n        if current_sum <= k:\n            max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n    \n    result = longest_subarray_leq_k(arr, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the minimum number of elements to remove so that the remaining elements form a strictly increasing sequence.\n\nInput:\nThe first line contains N (1 ≤ N ≤ 2 × 10^4).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(sequence):\n    \"\"\"\n    Returns length of the Longest Strictly Increasing Subsequence.\n    Uses patience sorting with binary search, O(N log N).\n    \"\"\"\n    tails = []                                   # tails[i] = smallest tail of all LIS with length i+1\n    for value in sequence:\n        idx = bisect.bisect_left(tails, value)   # first tail >= value\n        if idx == len(tails):\n            tails.append(value)                  # extend LIS\n        else:\n            tails[idx] = value                   # improve existing subsequence\n    return len(tails)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    length_lis = lis_length(arr)\n    removals = n - length_lis\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting only of lowercase English letters. Determine if you can rearrange the characters of s to form a palindrome. Print 'YES' if possible, otherwise print 'NO'.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of s.\nThe second line contains the string s.\n\nOutput Format:\nPrint 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    # First token is n (we do not strictly need it but read to match the format)\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else ''\n    \n    # Count occurrences of each character\n    freq = Counter(s)\n    \n    # Count how many characters have odd frequency\n    odd_counts = sum(1 for count in freq.values() if count % 2 != 0)\n    \n    # A palindrome permutation is possible if:\n    #  - For even length: no characters have an odd count.\n    #  - For odd length: exactly one character has an odd count.\n    if (n % 2 == 0 and odd_counts == 0) or (n % 2 == 1 and odd_counts == 1):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, print all prime numbers less than or equal to n in increasing order.\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 10^6).\n\nOutput:\nPrint all prime numbers ≤ n separated by spaces.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef sieve_primes(limit: int):\n    \"\"\"Return a list of all primes ≤ limit using the sieve of Eratosthenes.\"\"\"\n    if limit < 2:\n        return []\n\n    sieve = bytearray(b\"\\x01\") * (limit + 1)  # 1 means 'assume prime'\n    sieve[0:2] = b\"\\x00\\x00\"                  # 0 and 1 are not prime\n\n    # Only need to mark multiples for numbers up to sqrt(limit)\n    upper = int(math.isqrt(limit))\n    for p in range(2, upper + 1):\n        if sieve[p]:\n            step = p\n            start = p * p                     # first multiple not previously processed\n            sieve[start:limit + 1:step] = b\"\\x00\" * ((limit - start) // step + 1)\n\n    return [i for i, is_prime in enumerate(sieve) if is_prime]\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n    primes = sieve_primes(n)\n    print(\" \".join(map(str, primes)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s of lowercase English letters. Determine whether it is possible to rearrange the letters of s to form a palindrome. Output 'YES' if possible, otherwise output 'NO'.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of s.\nThe second line contains the string s.\n\nOutput Format:\nPrint 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if some permutation of s can form a palindrome.\n    A string can be permuted into a palindrome if the number of\n    characters with odd frequency is at most 1.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for c in freq.values() if c % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])              # Length of the string\n    s = data[1] if len(data) > 1 else ''\n    # The problem guarantees that 1 <= n <= 1e5 and len(s) == n.\n    print('YES' if can_form_palindrome(s) else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), and edges between them, determine the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj, n):\n    \"\"\"\n    Breadth–first search that returns the node farthest\n    from `start` and its distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS from an arbitrary node (1) to find one end of diameter\n    farthest, _ = bfs(1, adj, n)\n\n    # Second BFS from that farthest node to get the diameter length\n    _, diameter = bfs(farthest, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring of S in which no character repeats.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string S of length n.\n\nOutput Format:\n- Output a single integer — the length of the longest substring with all unique characters.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n\n    last_pos = {}           # character -> last index where it appeared\n    left = 0                # left end of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window, move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M, where each cell contains a non-negative integer representing its cost, find the minimum cost path from the top-left cell (1,1) to the bottom-right cell (N,M). You may only move right or down at each step.\n\nInput Format:\n- The first line contains two integers N and M (1 ≤ N, M ≤ 1000).\n- Each of the next N lines contains M integers, the cost of each cell.\n\nOutput Format:\n- Print a single integer, the minimum total cost to reach cell (N,M).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n    m = next(it)\n\n    # dp[j] keeps the minimum cost to reach column j in the current row\n    dp = [0] * m\n\n    # First cell\n    dp[0] = next(it)  # cost of (1,1)\n\n    # First row (only moves to the right)\n    for j in range(1, m):\n        dp[j] = dp[j - 1] + next(it)\n\n    # Remaining rows\n    for _ in range(1, n):\n        # First column of the new row (only move down)\n        dp[0] += next(it)\n        # Other columns\n        for j in range(1, m):\n            cost = next(it)\n            dp[j] = min(dp[j], dp[j - 1]) + cost\n\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the length of the longest subarray where the sum is divisible by a given integer K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 2 × 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the length of the longest such subarray. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    # Read array\n    a = [int(next(it)) for _ in range(n)]\n\n    # Dictionary to store first occurrence of a given prefix-sum remainder\n    first_occurrence = {0: -1}   # remainder 0 seen at index -1 (empty prefix)\n    prefix = 0\n    best = 0\n\n    for idx, val in enumerate(a):\n        prefix = (prefix + val) % k\n        if prefix in first_occurrence:\n            best = max(best, idx - first_occurrence[prefix])\n        else:\n            first_occurrence[prefix] = idx\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Determine if it is possible to partition the array into two subsets with equal sum.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 100).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4).\n\nOutput:\nPrint \"YES\" if such a partition exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(arr):\n    total = sum(arr)\n    if total % 2:           # odd total cannot be split equally\n        return False\n    target = total // 2\n\n    bitset = 1              # bit i shows whether sum i is reachable\n    for num in arr:\n        bitset |= bitset << num\n        # Early exit if target already reachable\n        if (bitset >> target) & 1:\n            return True\n\n    return False            # not reachable after processing all numbers\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    print(\"YES\" if can_partition(arr) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is equal to a given integer k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the length of the longest contiguous subarray whose sum is exactly k.\n\nConstraints:\n1 ≤ n ≤ 10^5\n|a_i| ≤ 10^4\n|k| ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_to_first_index = {0: -1}          # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If there's an earlier prefix sum that is prefix_sum - k,\n        # the subarray (that earlier index + 1 .. i) sums to k.\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            best_len = max(best_len, i - prefix_to_first_index[target])\n\n        # Record the first occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    # Initialize current and global maximum sums with the first element\n    max_ending_here = max_so_far = arr[0]\n    \n    # Iterate over the rest of the array\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at x\n        max_ending_here = max(x, max_ending_here + x)\n        # Update the global max if necessary\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                     # No input, nothing to do\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))  # Exactly n integers follow\n    # Edge case: if n == 0 (though constraint says n >= 1), handle safely\n    if n == 0:\n        print(0)\n        return\n    \n    result = kadane(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer — the length of the longest substring of s with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    \n    last_pos = {}          # keeps the latest index of every character\n    start = 0              # start index of the current window\n    best = 0               # length of the best (longest) window found\n    \n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # the current character repeats inside the window:\n            # move the window's left bound right after its previous occurrence\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine the number of connected components.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\n- Output a single integer: the number of connected components in the graph.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # Path compression (halving)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> None:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        union(u, v)\n\n    components = sum(1 for i in range(1, n + 1) if parent[i] == i)\n    sys.stdout.write(str(components))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of only lowercase English letters. Find the length of the longest substring that contains only unique characters.\n\nInput Format:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nOutput a single integer: the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains only unique characters.\n    \"\"\"\n    last_seen = {}            # char -> last index\n    start = 0                 # left boundary of the current window\n    best = 0                  # best window length so far\n\n    for i, ch in enumerate(s):\n        # If we have seen `ch` inside the current window,\n        # shift `start` right past the last occurrence.\n        if ch in last_seen and last_seen[ch] >= start:\n            start = last_seen[ch] + 1\n        last_seen[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N positive integers, determine the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any element by 1.\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers (1 ≤ A_i ≤ 10^9).\nOutput:\nPrint a single integer: the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Find median (upper median for even n)\n    nums.sort()\n    median = nums[n // 2]\n\n    # Minimum total moves = sum of absolute differences from the median\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the length of the longest increasing subsequence.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^4).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the length of the longest increasing subsequence in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef longest_increasing_subsequence_length(arr):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (LIS)\n    using patience sorting / binary-search in O(n log n).\n    \"\"\"\n    if not arr:\n        return 0\n\n    tails = []                       # tails[i] = smallest tail of all LIS with length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)\n        if idx == len(tails):\n            tails.append(x)          # start a new longer subsequence\n        else:\n            tails[idx] = x           # replace to keep tail minimal\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(longest_increasing_subsequence_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of only lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer: the length of the longest substring of s with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}            # Stores last index of every character seen\n    left = 0                 # Left boundary of current window\n    best = 0                 # Length of the best window found so far\n\n    for right, ch in enumerate(s):\n        # If the character was seen inside the current window, move `left`\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a binary string S of length N. You can flip any contiguous substring (change all 0s to 1s and 1s to 0s in that substring) at most once. What is the maximum number of 1s you can obtain in the final string?\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains a binary string S of length N.\nOutput:\nPrint a single integer: the maximum possible number of 1s after at most one flip operation.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1].strip()\n    \n    total_ones = s.count('1')\n    \n    # Map: 0 -> +1, 1 -> -1\n    max_ending_here = 0\n    max_so_far = -10**9       # initialise to very small\n    \n    for ch in s:\n        val = 1 if ch == '0' else -1\n        max_ending_here = max(val, max_ending_here + val)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    best_gain = max(0, max_so_far)   # do not flip if it hurts\n    result = total_ones + best_gain\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest contiguous subarray with a sum equal to a given target value K.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).\n\nOutput Format:\nPrint a single integer, the length of the longest contiguous subarray whose sum equals K. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        N = int(next(it))\n        K = int(next(it))\n    except StopIteration:\n        return\n    \n    arr = []\n    for _ in range(N):\n        try:\n            arr.append(int(next(it)))\n        except StopIteration:\n            break\n    \n    prefix_to_first_index = {0: -1}   # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(arr):\n        prefix_sum += val\n        \n        # If we have seen prefix_sum - K before, subarray (prev_idx+1 .. i) sums to K\n        need = prefix_sum - K\n        if need in prefix_to_first_index:\n            length = i - prefix_to_first_index[need]\n            if length > max_len:\n                max_len = length\n        \n        # Record the first time we encounter this prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of n rows and m columns, where each cell is either empty or contains a wall. Find the minimum number of moves required to go from the top-left cell (1,1) to the bottom-right cell (n,m), moving only up, down, left, or right, and not passing through walls. If it is impossible, output -1.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain m characters, where each character is either '.' (empty) or '#' (wall).\n\nOutput Format:\n- Output a single integer: the minimum number of moves required, or -1 if unreachable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = [line.decode().rstrip() for line in data[1:1 + n]]\n\n    # If start or end is blocked, impossible immediately\n    if grid[0][0] == '#' or grid[n - 1][m - 1] == '#':\n        print(-1)\n        return\n\n    # Distance array: -1 means unvisited\n    dist = [[-1] * m for _ in range(n)]\n    dist[0][0] = 0\n\n    dq = deque([(0, 0)])\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    while dq:\n        x, y = dq.popleft()\n        if (x, y) == (n - 1, m - 1):\n            print(dist[x][y])\n            return\n        nx_step = dist[x][y] + 1\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.' and dist[nx][ny] == -1:\n                dist[nx][ny] = nx_step\n                dq.append((nx, ny))\n\n    # If we exit loop without reaching target\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, count the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers arr[1], arr[2], ..., arr[N] (1 ≤ arr[i] ≤ 10^9).\n\nOutput Format:\nPrint a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Parity counters\n    even = odd = 0\n    for i in range(1, n + 1):\n        if int(data[i]) & 1:\n            odd += 1\n        else:\n            even += 1\n    # Number of pairs with same parity\n    res = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest subarray with all unique elements.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    arr = list(map(int, data[1:n + 1]))\n\n    last_idx = {}          # element -> its latest index\n    left = 0               # left end of the current window\n    best = 0               # best window length found so far\n\n    for right, val in enumerate(arr):\n        # If val already seen inside current window, move left past its last position\n        if val in last_idx and last_idx[val] >= left:\n            left = last_idx[val] + 1\n        last_idx[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with n nodes and m edges. Determine if the graph contains a cycle.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v.\n\nOutput:\nPrint \"YES\" if the graph contains a cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        # Path-compression find\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        # Returns True if union successful (different components),\n        # False if a and b are already connected (cycle detected).\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n        return True\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if not union(u, v):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the minimum number of characters you must insert anywhere in the string to make it a palindrome.\n\nInput Format:\n- The first line contains a single string s (1 ≤ |s| ≤ 2000).\n\nOutput Format:\n- Output a single integer, the minimal number of insertions needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_insertions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Minimum insertions = |s| - length of the Longest Palindromic Subsequence.\n    LPS length can be found as LCS(s, reversed(s)).\n    \"\"\"\n    n = len(s)\n    rev = s[::-1]\n\n    # Two-row DP to save memory (O(n) space, O(n²) time)\n    prev = [0] * (n + 1)\n    cur = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == rev[j - 1]:\n                cur[j] = prev[j - 1] + 1\n            else:\n                cur[j] = max(prev[j], cur[j - 1])\n        prev, cur = cur, prev  # reuse arrays; cur becomes old, prev is the new row\n\n    lps_len = prev[n]\n    return n - lps_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(min_insertions_to_palindrome(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the minimum number of characters you need to delete to make the string a palindrome.\n\nInput Format:\n- The first line contains a string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters.\n\nOutput Format:\n- Output a single integer: the minimum number of characters to delete.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_palindromic_subsequence_length(s: str) -> int:\n    \"\"\"\n    Computes the length of the Longest Palindromic Subsequence (LPS) in `s`\n    by finding the Longest Common Subsequence (LCS) between `s`\n    and its reverse.\n    \"\"\"\n    n = len(s)\n    rev = s[::-1]\n\n    # dp[j] will hold the LCS length for current row (i) and column (j)\n    dp_prev = [0] * (n + 1)  # previous row\n    dp_curr = [0] * (n + 1)  # current row\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == rev[j - 1]:\n                dp_curr[j] = dp_prev[j - 1] + 1\n            else:\n                dp_curr[j] = max(dp_prev[j], dp_curr[j - 1])\n        dp_prev, dp_curr = dp_curr, dp_prev  # swap references and reuse the buffer\n\n    # After the final swap, the latest results are in dp_prev\n    return dp_prev[n]\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    if not s:  # In case of empty input line (though |s| ≥ 1 per constraints)\n        print(0)\n        return\n\n    lps_len = longest_palindromic_subsequence_length(s)\n    min_deletions = len(s) - lps_len\n    print(min_deletions)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n integers, find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is divisible by a given integer k.\n\nInput Format:\n- The first line contains two integers n and k (2 ≤ n ≤ 2×10^5, 1 ≤ k ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))  # ensure exactly n numbers are taken\n\n    # Frequency of each remainder\n    freq = [0] * k\n    for val in nums:\n        freq[val % k] += 1\n\n    # Count pairs\n    pairs = 0\n\n    # Remainder 0 pairs among themselves\n    c = freq[0]\n    pairs += c * (c - 1) // 2\n\n    # Pair remainders r and k-r\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, handle remainder k/2 separately\n    if k % 2 == 0:\n        c = freq[k // 2]\n        pairs += c * (c - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with N nodes and M edges. Each edge has a positive integer weight. Find the number of different shortest paths from node 1 to node N, modulo 10^9+7.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains three integers u, v, w (1 ≤ u,v ≤ N, 1 ≤ w ≤ 10^9), denoting an edge between u and v with weight w.\n\nOutput:\nPrint a single integer: the number of shortest paths from node 1 to node N modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nMOD = 10 ** 9 + 7\nINF = 10 ** 18            # large enough for sum of weights (<= 1e5 * 1e9)\n\ndef dijkstra_count_paths(n, adj):\n    dist = [INF] * (n + 1)\n    ways = [0] * (n + 1)\n\n    dist[1] = 0\n    ways[1] = 1\n    pq = [(0, 1)]          # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                ways[v] = ways[u]\n                heapq.heappush(pq, (nd, v))\n            elif nd == dist[v]:\n                ways[v] = (ways[v] + ways[u]) % MOD\n\n    return ways[n] % MOD\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    print(dijkstra_count_paths(n, adj))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes labeled from 1 to n. Each edge has a weight. Find the diameter of the tree (the maximum sum of edge weights on any path between two nodes).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n − 1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), meaning an edge between u and v with weight w.\n\nOutput Format:\nPrint a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef dfs(start, adj):\n    \"\"\"\n    Iterative DFS that returns the farthest node from `start`\n    and its distance using an explicit stack to avoid recursion limits.\n    \"\"\"\n    stack = [(start, -1, 0)]          # (node, parent, distance_from_start)\n    far_node = start\n    max_dist = 0\n\n    while stack:\n        node, parent, dist = stack.pop()\n        if dist > max_dist:\n            max_dist = dist\n            far_node = node\n        for nxt, w in adj[node]:\n            if nxt != parent:\n                stack.append((nxt, node, dist + w))\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    it = iter(data[1:])\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for u, v, w in zip(it, it, it):\n        u = int(u)\n        v = int(v)\n        w = int(w)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st DFS: from an arbitrary node (1) find farthest node s\n    s, _ = dfs(1, adj)\n    # 2nd DFS: from s find the maximum distance (diameter)\n    _, diameter = dfs(s, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points in the 2D plane, determine the number of pairs of points that are at an integer Euclidean distance from each other.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 1000).\nEach of the next n lines contains two integers x_i and y_i (−10^4 ≤ x_i, y_i ≤ 10^4), the coordinates of the i-th point.\n\nOutput Format:\nPrint a single integer: the number of unordered pairs of points with integer Euclidean distance.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    coords = [(int(data[i]), int(data[i+1])) for i in range(1, 2*n, 2)]\n    \n    cnt = 0\n    for i in range(n):\n        x1, y1 = coords[i]\n        for j in range(i+1, n):\n            x2, y2 = coords[j]\n            dx = x1 - x2\n            dy = y1 - y2\n            dist2 = dx*dx + dy*dy        # squared distance\n            root = math.isqrt(dist2)      # integer square root\n            if root * root == dist2:      # perfect square -> integer distance\n                cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find the length of the longest substring in which all characters are distinct.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\n\nOutput Format:\nPrint a single integer, the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains all distinct characters.\n    \"\"\"\n    last_pos = {}            # character -> most recent index\n    left = 0                 # left end of the current window\n    best = 0                 # best window length found so far\n\n    for right, ch in enumerate(s):\n        # If character seen and is inside current window, move left\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].rstrip('\\n') if len(data) > 1 else ''\n    # Ensure we only process first n characters in case of stray input\n    s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, and edges between nodes, find the number of leaf nodes in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nThe next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v) representing an edge between u and v.\n\nOutput:\nPrint a single integer, the number of leaf nodes in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # degree array\n    deg = [0]*(n+1)\n    \n    # read edges and update degree counts\n    for _ in range(n-1):\n        u = int(next(it)); v = int(next(it))\n        deg[u] += 1\n        deg[v] += 1\n    \n    # count nodes with degree 1\n    leaf_cnt = sum(1 for i in range(1, n+1) if deg[i] == 1)\n    \n    # root (node 1) is NOT considered a leaf\n    if deg[1] == 1:\n        leaf_cnt -= 1\n    \n    print(leaf_cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find maximum subarray sum.\n    \"\"\"\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = x if current + x < x else current + x\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n integers, find the number of unordered pairs (i, j) with 1 ≤ i < j ≤ n such that the sum a_i + a_j is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (2 ≤ n ≤ 2×10^5, 1 ≤ k ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Special fast-path for k == 1 (all sums are divisible)\n    if k == 1:\n        total_pairs = n * (n - 1) // 2\n        print(total_pairs)\n        return\n\n    # Frequency of each remainder\n    freq = [0] * k\n    for val in nums:\n        freq[val % k] += 1\n\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    pairs += freq[0] * (freq[0] - 1) // 2\n\n    # If k is even, remainder k//2 pairs with itself\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n        upper = k // 2  # exclusive in loop below\n    else:\n        upper = k // 2 + 1  # ceiling division\n\n    # Other remainder pairs\n    for r in range(1, upper):\n        pairs += freq[r] * freq[k - r]\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the maximum sum of any contiguous subarray. If the array contains only negative numbers, return the least negative number.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n space-separated integers a_i (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum sub-array sum. Works even if all numbers are negative.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is divisible by a given integer k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 2 × 10^5, 1 ≤ k ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer — the number of valid pairs.\n\nConstraints:\n1 ≤ n ≤ 2 × 10^5\n1 ≤ k ≤ 10^5\n1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    \n    # Frequency array of remainders\n    cnt = [0] * k\n    for _ in range(n):\n        val = int(next(it))\n        cnt[val % k] += 1\n\n    ans = 0\n\n    # Pairs whose remainders sum to 0 mod k\n    ans += cnt[0] * (cnt[0] - 1) // 2\n\n    # Handle the rest of the remainders\n    half = k // 2\n    for r in range(1, (k + 1) // 2):\n        ans += cnt[r] * cnt[k - r]\n\n    # If k is even, remainder k/2 pairs with itself\n    if k % 2 == 0:\n        ans += cnt[half] * (cnt[half] - 1) // 2\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven N cities and M bidirectional roads, determine the minimum number of roads that need to be added to make the network of cities strongly connected (there exists a path from any city to any other city).\n\nInput:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing a road between cities u and v.\n\nOutput:\nPrint a single integer, the minimum number of roads to be added to make the network strongly connected.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(a, b):\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        union(u, v)\n\n    # count distinct components\n    components = sum(1 for i in range(n) if parent[i] == i)\n    # minimum edges needed to connect all components\n    print(max(0, components - 1))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is divisible by k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer – the maximum length of the required subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    \n    prefix_rem_first_idx = {0: -1}   # remainder : earliest index seen\n    prefix_sum = 0\n    max_len = 0\n    \n    for idx, val in enumerate(arr):\n        prefix_sum += val\n        rem = prefix_sum % k          # Python already gives non-negative remainder when k>0\n        \n        if rem in prefix_rem_first_idx:\n            # length of subarray with sum divisible by k ending at idx\n            max_len = max(max_len, idx - prefix_rem_first_idx[rem])\n        else:\n            # store the earliest occurrence of this remainder\n            prefix_rem_first_idx[rem] = idx\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, count the number of subarrays whose sum is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n space-separated integers a_i (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the number of subarrays whose sum is divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n\n    freq = defaultdict(int)\n    freq[0] = 1                      # empty prefix\n    prefix = 0\n    ans = 0\n\n    for num in arr:\n        prefix = (prefix + num) % k  # prefix sum modulo k\n        ans += freq[prefix]          # add all previous prefixes with same remainder\n        freq[prefix] += 1            # update frequency\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}          # maps character -> its last index in the current window\n    start = 0              # left boundary of the current window\n    best = 0               # best window length found so far\n\n    for i, ch in enumerate(s):\n        # If we have seen this character and it is inside the current window,\n        # move the window's left side right after its previous occurrence.\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n\n        # Update or add the current character's position\n        last_pos[ch] = i\n\n        # Update best length if current window is longer\n        current_len = i - start + 1\n        if current_len > best:\n            best = current_len\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed acyclic graph (DAG) with N nodes and M edges. Find the number of possible topological orderings of the nodes modulo 10^9+7.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 15, 0 ≤ M ≤ N*(N-1)/2).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), indicating an edge from u to v.\n\nOutput Format:\nPrint a single integer, the number of topological orderings modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    M = int(next(it))\n\n    # prerequisite bitmask for every node\n    pre = [0] * N\n    for _ in range(M):\n        u = int(next(it)) - 1  # 0-based\n        v = int(next(it)) - 1\n        pre[v] |= 1 << u\n\n    size = 1 << N\n    dp = [0] * size\n    dp[0] = 1\n\n    for mask in range(size):\n        if dp[mask] == 0:\n            continue\n        # try to place every node whose prerequisites are satisfied\n        for node in range(N):\n            if (mask >> node) & 1:           # already placed\n                continue\n            if (pre[node] & mask) != pre[node]:\n                continue                     # some prerequisite missing\n            next_mask = mask | (1 << node)\n            dp[next_mask] = (dp[next_mask] + dp[mask]) % MOD\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters.\nInput: A single line containing the string s (1 ≤ |s| ≤ 10^5).\nOutput: Print a single integer: the length of the longest substring without repeating characters.\nConstraints:\n1 ≤ |s| ≤ 10^5\ns consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters in s.\n    Sliding window with a dictionary storing the most recent index of each character.\n    \"\"\"\n    last_pos = {}           # char -> last position seen\n    start = 0               # left boundary of current window\n    max_len = 0\n\n    for idx, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # ch repeated inside the current window; move start right after last occurrence\n            start = last_pos[ch] + 1\n        last_pos[ch] = idx\n        max_len = max(max_len, idx - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of length n, find the smallest positive integer that does not appear in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6).\n\nOutput:\nPrint a single integer: the smallest positive integer not present in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Collect values into a set for O(1) membership checks\n    s = set(map(int, data[1:1 + n]))\n    \n    # The smallest missing positive integer must be in the range [1, n + 1]\n    # (Pigeonhole principle)\n    for candidate in range(1, n + 2):\n        if candidate not in s:\n            print(candidate)\n            return\n\n# Execute the program\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s of length n consisting of lowercase English letters. Find the minimum number of characters to delete from s to make it a palindrome.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2000).\nThe second line contains the string s.\n\nOutput:\nOutput a single integer – the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Return the minimum number of deletions needed\n    to transform string s into a palindrome.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return 0\n\n    # dp[i][j] will store length of the longest palindromic\n    # subsequence within s[i..j] (inclusive).\n    dp = [[0] * n for _ in range(n)]\n\n    # substrings of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # consider all substring lengths from 2 to n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                if length == 2:\n                    dp[i][j] = 2  # two identical characters\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    longest_pal_subseq = dp[0][n - 1]\n    return n - longest_pal_subseq\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip()\n    # Ensure we only process the first n characters (s could be longer due to extra spaces/newlines)\n    s = s[:n]\n\n    result = min_deletions_to_palindrome(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, determine the number of distinct ways to represent n as the sum of positive integers, where the order of addends does not matter (i.e., partition function).\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000).\n\nOutput Format:\n- Output a single integer — the number of distinct unordered partitions of n.\n\nConstraints:\n- 1 ≤ n ≤ 1000\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef number_of_partitions(n: int) -> int:\n    \"\"\"\n    Return the number of unordered integer partitions of n\n    using a classic O(n^2) dynamic-programming approach.\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1                              # Empty sum counts for 0\n    for k in range(1, n + 1):              # Last addend in the partition\n        for s in range(k, n + 1):          # Update all sums that can include k\n            dp[s] += dp[s - k]\n    return dp[n]\n\ndef main() -> None:\n    n_line = sys.stdin.readline().strip()\n    if not n_line:\n        return\n    n = int(n_line)\n    print(number_of_partitions(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an n x n grid of integers. Find the minimum path sum from the top-left to the bottom-right cell, moving only right or down at each step.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 1000).\nEach of the next n lines contains n integers (-10^4 ≤ a_ij ≤ 10^4), the grid values.\n\nOutput Format:\nPrint a single integer: the minimum path sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    # Index in the flattened list of grid values\n    idx = 1\n\n    # DP array that stores the minimum path sum for the current row\n    dp = [0] * n\n\n    for i in range(n):\n        for j in range(n):\n            val = int(data[idx])\n            idx += 1\n\n            if i == 0 and j == 0:           # starting cell\n                dp[j] = val\n            elif i == 0:                    # first row (can only come from left)\n                dp[j] = dp[j - 1] + val\n            elif j == 0:                    # first column (can only come from above)\n                dp[j] = dp[j] + val\n            else:                           # choose min of coming from left or above\n                dp[j] = min(dp[j], dp[j - 1]) + val\n\n    # The last element holds the answer: min path sum to bottom-right\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the maximum length of a substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}           # character -> most recent index\n    max_len = 0\n    start = 0               # left boundary of current window\n\n    for i, ch in enumerate(s):\n        # If the character was seen and is inside current window,\n        # move the start right after its last occurrence.\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        # Update max_len with the size of current window\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n intervals on the number line, determine the minimum number of points required such that each interval contains at least one chosen point.\nInput: The first line contains a single integer n (1 ≤ n ≤ 10^5). The next n lines each contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9), representing the endpoints of the ith interval.\nOutput: Print a single integer: the minimum number of points needed.\nConstraints:\n1 ≤ n ≤ 10^5\n1 ≤ l_i ≤ r_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    intervals = []\n    idx = 1\n    for _ in range(n):\n        l = int(data[idx]); r = int(data[idx + 1])\n        idx += 2\n        intervals.append((r, l))    # store as (right, left) for easy sort\n    # Sort by right endpoint\n    intervals.sort()\n    \n    points_needed = 0\n    current_point = -1  # no point chosen yet\n    \n    for right, left in intervals:\n        # if current point doesn't cover this interval, pick new point\n        if current_point < left:\n            points_needed += 1\n            current_point = right   # place point at the right endpoint\n    \n    print(points_needed)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of only lowercase English letters. Determine if it is possible to rearrange the characters of s to form a palindrome.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of s.\n- The second line contains the string s.\n\nOutput Format:\n- Output \"YES\" if it is possible to rearrange the characters to form a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can be arranged to form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for c in freq.values() if c % 2)\n    # For a palindrome, at most one character may have an odd frequency.\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    # The first item is n, the second is the string s.\n    # We don't actually need n, but we parse it to respect the input format.\n    _n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of n integers. Print the number of distinct subsequences (including the empty subsequence) modulo 10^9+7.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer – the number of distinct subsequences modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # dp = number of distinct subsequences for the processed prefix\n    dp = 1  # empty subsequence\n    last = {}  # value -> dp value before its previous occurrence was processed\n    \n    for x in arr:\n        new_dp = (dp * 2) % MOD\n        if x in last:\n            new_dp = (new_dp - last[x]) % MOD\n        last[x] = dp\n        dp = new_dp\n\n    print(dp % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. For each integer in the array, replace it with the greatest common divisor (GCD) of all the elements except itself. Output the resulting array.\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 2 × 10^5).\nThe second line contains N positive integers (1 ≤ arr[i] ≤ 10^9).\n\nOutput Format:\nPrint N integers: the i-th integer is the GCD of all elements except arr[i].\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    # Pre-compute prefix and suffix gcds\n    pref = [0] * n\n    suff = [0] * n\n\n    pref[0] = arr[0]\n    for i in range(1, n):\n        pref[i] = math.gcd(pref[i - 1], arr[i])\n\n    suff[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = math.gcd(suff[i + 1], arr[i])\n\n    # Build answer\n    res = [0] * n\n    for i in range(n):\n        if i == 0:\n            res[i] = suff[1]\n        elif i == n - 1:\n            res[i] = pref[n - 2]\n        else:\n            res[i] = math.gcd(pref[i - 1], suff[i + 1])\n\n    sys.stdout.write(' '.join(map(str, res)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m consisting of '0's and '1's, find the area of the largest rectangle containing only '1's.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 200).\n- Each of the next n lines contains a string of length m, consisting only of '0' and '1'.\n\nOutput Format:\n- Print a single integer: the area of the largest rectangle containing only '1's.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef largest_histogram_area(heights):\n    \"\"\"\n    Return the largest rectangle area in a histogram given by 'heights'.\n    Uses a monotonic stack in O(len(heights)) time.\n    \"\"\"\n    stack = []  # will store indices\n    max_area = 0\n    # Append a sentinel 0 height to flush the stack at the end\n    for i, h in enumerate(heights + [0]):\n        # Maintain increasing stack\n        while stack and h < heights[stack[-1]]:\n            top = stack.pop()\n            height = heights[top]\n            # width is current index i minus previous smaller index - 1\n            width = i if not stack else i - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        stack.append(i)\n    return max_area\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid_strings = data[2:2 + n]\n\n    heights = [0] * m\n    max_rect = 0\n\n    for row in grid_strings:\n        for j, ch in enumerate(row):\n            heights[j] = heights[j] + 1 if ch == '1' else 0\n        max_rect = max(max_rect, largest_histogram_area(heights))\n\n    print(max_rect)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if it is possible to rearrange the elements to form a palindrome. Output 'YES' if possible, otherwise 'NO'.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Print 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    \n    n = int(data[0])\n    numbers = list(map(int, data[1:n+1]))\n    \n    freq = Counter(numbers)\n    odd_count = sum(1 for v in freq.values() if v % 2)\n    \n    if (n % 2 == 0 and odd_count == 0) or (n % 2 == 1 and odd_count <= 1):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has an integer weight, find the length of the longest path in the tree (the diameter).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between node u and node v with weight w.\n\nOutput Format:\n- Output a single integer — the length of the longest path in the tree.\n\nConstraints:\n- 2 ≤ n ≤ 10^5\n- 1 ≤ w ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, n, adj):\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`\n    using an iterative DFS/BFS (no recursion).\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dq = deque([start])\n    dist[start] = 0\n    while dq:\n        node = dq.pop()        # LIFO or FIFO both work for a tree\n        for nei, w in adj[node]:\n            if dist[nei] == -1:\n                dist[nei] = dist[node] + w\n                dq.append(nei)\n    # find farthest\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u = data[idx]\n        v = data[idx + 1]\n        w = data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # first pass: farthest from an arbitrary node (1)\n    node_a, _ = farthest(1, n, adj)\n    # second pass: farthest from node_a gives the diameter\n    _, diameter = farthest(node_a, n, adj)\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm to find the maximum sum of a contiguous sub-array.\n    \"\"\"\n    best = cur = nums[0]\n    for x in nums[1:]:\n        # Either extend the current subarray or start a new one at x\n        cur = x if cur + x < x else cur + x\n        # Update best if needed\n        if cur > best:\n            best = cur\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Read exactly n integers (assumes the input is well-formed)\n    nums = list(map(int, data[1:1+n]))\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), each node has a value. You are to answer q queries. In each query, given two nodes u and v, output the sum of the values along the unique path from u to v.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5), the number of nodes.\n- The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4), the values of the nodes.\n- Each of the next n-1 lines contains two integers x and y (1 ≤ x, y ≤ n), representing an edge between nodes x and y.\n- The next line contains an integer q (1 ≤ q ≤ 10^5), the number of queries.\n- Each of the next q lines contains two integers u and v (1 ≤ u, v ≤ n).\n\nOutput Format:\n- For each query, output a single integer on its own line: the sum along the path from u to v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    it = iter(data)\n\n    n = next(it)                            # number of nodes\n    values = [0] + [next(it) for _ in range(n)]  # 1-indexed node values\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):                  # edges\n        u = next(it); v = next(it)\n        adj[u].append(v)\n        adj[v].append(u)\n\n    LOG = (n).bit_length()                 # enough to cover up to n\n    up = [[0] * (n + 1) for _ in range(LOG)]  # up[k][v] = 2^k-th ancestor of v\n    depth = [0] * (n + 1)\n    prefix = [0] * (n + 1)                  # sum of values from root to node\n\n    # DFS to fill depth, up[0], prefix\n    stack = [(1, 0)]                        # (node, parent)\n    order = []                              # to process in parent→child order\n    while stack:\n        node, parent = stack.pop()\n        up[0][node] = parent\n        depth[node] = depth[parent] + 1 if parent else 0\n        prefix[node] = prefix[parent] + values[node]\n        order.append(node)\n        for nei in adj[node]:\n            if nei != parent:\n                stack.append((nei, node))\n\n    # binary lifting table\n    for k in range(1, LOG):\n        upk = up[k]\n        upk_1 = up[k - 1]\n        for v in order:                     # 'order' has every node\n            anc = upk_1[v]\n            upk[v] = upk_1[anc] if anc else 0\n\n    def lca(a: int, b: int) -> int:\n        if depth[a] < depth[b]:\n            a, b = b, a\n        diff = depth[a] - depth[b]\n        bit = 0\n        while diff:\n            if diff & 1:\n                a = up[bit][a]\n            diff >>= 1\n            bit += 1\n        if a == b:\n            return a\n        for k in range(LOG - 1, -1, -1):\n            if up[k][a] != up[k][b]:\n                a = up[k][a]\n                b = up[k][b]\n        return up[0][a]\n\n    q = next(it)                            # number of queries\n    out_lines = []\n    for _ in range(q):\n        u = next(it); v = next(it)\n        w = lca(u, v)\n        path_sum = prefix[u] + prefix[v] - 2 * prefix[w] + values[w]\n        out_lines.append(str(path_sum))\n\n    sys.stdout.write('\\n'.join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.\nInput: The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9). The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\nOutput: Print two integers: the indices (0-based) of the numbers that add up to target.\nConstraints:\n1 ≤ n ≤ 10^5\n-10^9 ≤ nums[i], target ≤ 10^9\nEach input has exactly one solution.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n\n    # read the next n integers\n    nums = list(map(int, data[2:2 + n]))\n\n    # dictionary to store value -> index\n    seen = {}\n\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            # found the required pair\n            print(seen[complement], idx)\n            return\n        seen[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any element by 1.\nInput: The first line contains a single integer n (1 ≤ n ≤ 10^5). The second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\nOutput: Print a single integer: the minimum number of moves required.\nConstraints:\n1 ≤ n ≤ 10^5\n1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Sort to obtain the median\n    arr.sort()\n    median = arr[n // 2]        # works for both odd and even n\n\n    # Compute total moves = sum |a_i - median|\n    moves = sum(abs(x - median) for x in arr)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Determine the minimum number of moves required to make all elements equal, where in each move you can increase or decrease any element by 1.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 2 × 10^5).\n- The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\n\nOutput Format:\n- Output a single integer — the minimum number of moves required.\n\nConstraints:\n- 1 ≤ n ≤ 2 × 10^5\n- 1 ≤ ai ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    a = data[1:]\n\n    # Sort to find the median\n    a.sort()\n    median = a[n // 2]        # works for both odd and even n\n\n    # Sum of absolute differences to the median\n    moves = sum(abs(x - median) for x in a)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition the array into two subsets such that the absolute difference of their sums is minimized. Print the minimum possible difference.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 20).\n- The second line contains n integers (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the minimal possible difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    total_sum = sum(arr)\n    \n    # Build the set of all attainable subset sums\n    possible_sums = {0}\n    for num in arr:\n        # For each existing sum, add the current number to form new sums\n        possible_sums |= {s + num for s in possible_sums}\n    \n    # The minimal difference is the minimum of |total_sum - 2*subset_sum|\n    min_diff = min(abs(total_sum - 2 * s) for s in possible_sums)\n    \n    print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition it into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible difference.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 20).\nThe second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\nOutput a single integer, the minimum possible difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    total = sum(arr)\n    \n    # Generate all possible subset sums\n    subset_sums = [0]\n    for num in arr:\n        subset_sums += [num + s for s in subset_sums]   # double the list with num added\n    \n    # Find the minimum absolute difference\n    # We only need to consider subset sums up to total // 2\n    # because beyond that the complement gives the same difference\n    half = total // 2\n    best = total                      # initialize with a large difference\n    for s in subset_sums:\n        if s > half:\n            continue\n        diff = total - 2 * s\n        if diff < best:\n            best = diff\n            if best == 0:             # cannot get smaller than 0\n                break\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.\n- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9) separated by spaces.\n\nOutput Format:\n- Output a single integer: the sum of all even numbers in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read entire input and split into tokens for efficiency\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    \n    # First value is n (can be ignored after reading list length)\n    n = int(data[0])\n    \n    # Remaining values are the array elements\n    nums = map(int, data[1:1 + n])\n\n    # Compute sum of even numbers\n    even_sum = sum(x for x in nums if x % 2 == 0)\n\n    # Output the result\n    sys.stdout.write(str(even_sum))\n\n# Ensure main() is executed\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of N integers, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any element by 1.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Sorting to obtain a median that minimizes the sum of absolute deviations\n    arr.sort()\n    median = arr[n // 2] if n % 2 else arr[(n // 2) - 1]\n\n    moves = sum(abs(x - median) for x in arr)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if it is possible to rearrange them to form an arithmetic progression.\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, ..., A_N (−10^9 ≤ A_i ≤ 10^9).\n\nOutput Format:\nPrint \"Yes\" if possible, otherwise print \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    # With only two numbers you can always form an AP.\n    if n <= 2:\n        print(\"Yes\")\n        return\n\n    arr.sort()\n    common_diff = arr[1] - arr[0]\n\n    for i in range(2, n):\n        if arr[i] - arr[i - 1] != common_diff:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 through n). Each edge has a weight. Find the length of the longest path in the tree (the diameter of the tree).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w.\n\nOutput:\nOutput a single integer — the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"Return (node, distance) of the farthest node from `start`.\"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First BFS/DFS to find one endpoint of the diameter\n    node_a, _ = farthest(1, adj, n)\n    # Second BFS/DFS from that endpoint to get the diameter length\n    _, diameter = farthest(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Find the number of pairs (i, j) such that i < j and A_i + A_j is divisible by K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^3).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^6).\n\nOutput:\nPrint a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    # Frequency of each remainder\n    freq = [0] * k\n    for _ in range(n):\n        val = int(next(it))\n        freq[val % k] += 1\n\n    pairs = 0\n\n    # Remainder 0 pairs\n    pairs += freq[0] * (freq[0] - 1) // 2\n\n    # Pair remainders r and k-r\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, handle remainder k/2 separately\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray that contains only even numbers.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the length of the longest contiguous subarray of even numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # Ensure only n numbers are processed\n\n    max_len = 0\n    current = 0\n    for x in nums:\n        if x % 2 == 0:\n            current += 1\n            if current > max_len:\n                max_len = current\n        else:\n            current = 0\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two integers a and b. Compute the greatest common divisor (GCD) of a and b.\n\nInput Format:\n- The first line contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the GCD of a and b.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    a, b = map(int, data)\n    print(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all unique elements.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\nOutput:\nPrint a single integer — the length of the longest subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray(arr):\n    last_pos = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, *rest = data\n    arr = rest[:n]\n    print(longest_unique_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, rooted at node 1. Each node has an associated value ai. Your task is to find the maximum sum of values on any path from the root to a leaf.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers ai (−10^4 ≤ ai ≤ 10^4).\nEach of the next n−1 lines contains two integers u and v, denoting an edge between nodes u and v (1 ≤ u, v ≤ n).\n\nOutput:\nPrint a single integer: the maximum sum of values on any path from the root to a leaf.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    a = [0] + [int(next(it)) for _ in range(n)]  # 1-indexed\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Iterative DFS: (node, parent, current_sum)\n    stack = [(1, 0, a[1])]\n    max_sum = -10 ** 18  # smaller than minimal possible sum\n\n    while stack:\n        node, parent, cur = stack.pop()\n\n        # leaf check (root is a leaf if it has no children)\n        if (node != 1 and len(adj[node]) == 1) or (node == 1 and len(adj[node]) == 0):\n            if cur > max_sum:\n                max_sum = cur\n            continue\n\n        for nei in adj[node]:\n            if nei == parent:\n                continue\n            stack.append((nei, node, cur + a[nei]))\n\n    # In case all sums were negative and tree had at least root,\n    # max_sum is set during traversal. But assert otherwise:\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a binary string s of length n, find the minimum number of flips required to make the string alternating (no two adjacent characters are the same).\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains a binary string s of length n.\n\nOutput Format:\n- Output a single integer: the minimum number of flips required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of flips required to make\n    the binary string `s` alternating.\n    \"\"\"\n    # Number of flips if the string should start with '0'\n    flips_start_with_0 = 0\n    # Number of flips if the string should start with '1'\n    flips_start_with_1 = 0\n\n    for i, ch in enumerate(s):\n        expected_if_0_start = '0' if i % 2 == 0 else '1'\n        expected_if_1_start = '1' if i % 2 == 0 else '0'\n\n        if ch != expected_if_0_start:\n            flips_start_with_0 += 1\n        if ch != expected_if_1_start:\n            flips_start_with_1 += 1\n\n    return min(flips_start_with_0, flips_start_with_1)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    n = int(data[0])  # Even though n is not explicitly required,\n                      # it is part of the input format.\n    s = data[1]\n    ans = min_flips_to_alternate(s)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine the length of the longest subarray with all distinct elements.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    last_pos = {}           # value -> most recent index\n    left = 0                # left end of current window\n    best = 0\n\n    for right, val in enumerate(arr):\n        # If val already seen inside current window, shrink window\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of a contiguous subarray. Print the result.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's Algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # equivalent to max(x, cur+x)\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Count evens and odds while reading\n    evens = odds = 0\n    for i in range(1, n + 1):\n        if int(data[i]) & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of ways to choose 2 items from k items: k * (k - 1) // 2\n    ans = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\n- The second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000).\n\nOutput Format:\n- Output a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])  # Read exactly n integers\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node i has a value v_i. For every node, compute the sum of values in its subtree (including itself).\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^4).\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between u and v.\n\nOutput Format:\nOutput n integers: the ith integer is the sum of values in the subtree of node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n\n    n = int(next(it))\n    values = [0] * (n + 1)          # 1-based\n    for i in range(1, n + 1):\n        values[i] = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    parent = [0] * (n + 1)\n    order = []\n    stack = [1]\n    parent[1] = -1                  # root has no parent\n\n    # DFS to establish parent/child relations and store traversal order\n    while stack:\n        node = stack.pop()\n        order.append(node)\n        for nei in adj[node]:\n            if nei != parent[node]:\n                parent[nei] = node\n                stack.append(nei)\n\n    # post-order accumulation of subtree sums\n    subtree_sum = values[:]\n    for node in reversed(order):\n        p = parent[node]\n        if p > 0:\n            subtree_sum[p] += subtree_sum[node]\n\n    sys.stdout.write(' '.join(str(subtree_sum[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with n nodes and m edges. Each edge connects two nodes. Determine whether the graph is a tree.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge.\n\nOutput Format:\n- Output \"YES\" if the graph is a tree, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_tree(n, m, edges):\n    # A tree with n vertices must have exactly n-1 edges\n    if m != n - 1:\n        return False\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # BFS/DFS to check connectivity\n    visited = [False] * (n + 1)\n    queue = deque([1])          # graph is 1-indexed\n    visited[1] = True\n    visited_cnt = 0\n\n    while queue:\n        node = queue.popleft()\n        visited_cnt += 1\n        for neigh in adj[node]:\n            if not visited[neigh]:\n                visited[neigh] = True\n                queue.append(neigh)\n\n    return visited_cnt == n          # connected?\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    m = int(data[1])\n\n    edges = []\n    idx = 2\n    for _ in range(m):\n        u = int(data[idx]); v = int(data[idx + 1])\n        edges.append((u, v))\n        idx += 2\n\n    print(\"YES\" if is_tree(n, m, edges) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nInput Format:\n- The first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output \"YES\" if s is a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport string\n\ndef is_palindrome_filtered(text: str) -> bool:\n    \"\"\"\n    Returns True if `text` is a palindrome considering only alphanumeric\n    characters and ignoring cases.\n    \"\"\"\n    left, right = 0, len(text) - 1\n    while left < right:\n        # Move left pointer to the next alphanumeric\n        while left < right and not text[left].isalnum():\n            left += 1\n        # Move right pointer to the previous alphanumeric\n        while left < right and not text[right].isalnum():\n            right -= 1\n        # After skipping, compare lower-cased characters\n        if left < right and text[left].lower() != text[right].lower():\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(\"YES\" if is_palindrome_filtered(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the smallest positive integer that does not appear in the array.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6).\nOutput:\nPrint the smallest positive integer missing from the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = map(int, data[1:])\n    \n    positive_set = {x for x in arr if x > 0}\n    \n    # The smallest missing positive integer is at most n + 1\n    for candidate in range(1, n + 2):\n        if candidate not in positive_set:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine whether it is possible to rearrange the characters of s to form a palindrome. Output \"YES\" if possible, \"NO\" otherwise.\n\nInput Format:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    A palindrome permutation is possible when at most one character\n    appears an odd number of times.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for c in freq.values() if c % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all unique elements.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, *arr = data          # first number is n, the rest are the array elements\n\n    last_pos = {}           # value -> most recent index\n    left = 0                # left end of current window\n    best = 0                # best length found so far\n\n    for right, value in enumerate(arr):\n        # if value seen inside current window, move left pointer\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, print the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−1000 ≤ a_i ≤ 1000).\n\nOutput:\nPrint a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Your task is to determine if it is possible to reorder the array such that no two consecutive elements are equal.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if it is possible to reorder the array as described, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))  # ensure only n numbers are considered\n    if n <= 1:\n        print(\"YES\")\n        return\n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    # It is possible to avoid equal adjacent elements\n    # iff the most frequent element does not exceed (n+1)//2\n    if max_freq <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the length of the longest path in the tree (the diameter).\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 2×10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n\nOutput Format:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs_farthest(start, adj, n):\n    \"\"\"\n    Returns a tuple (farthest_node, farthest_distance) starting from `start`\n    using an iterative BFS/DFS (here simple queue traversal is enough since\n    the tree has a unique path between any two nodes).\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n\n    far_node = start\n    far_dist = 0\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:                 # not visited yet\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > far_dist:\n                    far_dist = dist[v]\n                    far_node = v\n    return far_node, far_dist\n\n\ndef main() -> None:\n    input_data = sys.stdin.buffer.read().split()\n    if not input_data:\n        return\n    it = iter(input_data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: from arbitrary node (1) find farthest node A\n    node_a, _ = bfs_farthest(1, adj, n)\n\n    # 2nd pass: from node A find farthest node B and the distance = diameter\n    _, diameter = bfs_farthest(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum. If all numbers are negative, output the largest number.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nA single integer — the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\n- The second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    # First value is n, the count of numbers (can be ignored after reading)\n    n = int(data[0])\n    numbers = map(int, data[1:n+1])  # read exactly n numbers\n\n    even_sum = sum(num for num in numbers if num % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subarray with all distinct elements.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_seen = {}\n    left = 0\n    best = 0\n\n    for right, val in enumerate(arr):\n        if val in last_seen and last_seen[val] >= left:\n            left = last_seen[val] + 1\n        last_seen[val] = right\n        curr_len = right - left + 1\n        if curr_len > best:\n            best = curr_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if it is possible to rearrange the characters of S to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\nOutput:\nOutput \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of `s` can be a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    # Count how many characters appear an odd number of times.\n    odd = sum(1 for v in freq.values() if v % 2)\n    # A palindrome permutation requires at most one odd-count character.\n    return odd <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest subarray with all elements equal.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer — the length of the longest subarray consisting of equal elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    max_len = 1\n    current_len = 1\n\n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            current_len += 1\n            if current_len > max_len:\n                max_len = current_len\n        else:\n            current_len = 1\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of only lowercase English letters. Find the minimum number of character deletions required so that no two adjacent characters are the same.\n\nInput:\nThe first line contains a single integer t (1 ≤ t ≤ 10^4), the number of test cases.\nEach of the next t lines contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nFor each test case, print a single integer representing the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of deletions needed so that\n    no two adjacent characters in `s` are the same.\n    \"\"\"\n    deletions = 0\n    prev_char = None\n    for ch in s:\n        if ch == prev_char:\n            deletions += 1\n        else:\n            prev_char = ch\n    return deletions\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    idx = 1\n    for _ in range(t):\n        s = data[idx].decode()\n        idx += 1\n        out_lines.append(str(min_deletions(s)))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer N, find the smallest integer greater than N such that all its digits are distinct.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^6).\n\nOutput:\nOutput the desired integer.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef has_all_distinct_digits(number: int) -> bool:\n    \"\"\"\n    Returns True if every digit in `number` is unique, otherwise False.\n    \"\"\"\n    s = str(number)\n    return len(set(s)) == len(s)\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    \n    candidate = n + 1\n    while True:\n        if has_all_distinct_digits(candidate):\n            print(candidate)\n            break\n        candidate += 1\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes (numbered 1 to N) and N-1 edges. Each edge has a weight. Find the length of the longest path in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between node u and v with weight w.\n\nOutput:\nOutput a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef find_farthest(start, adj, n):\n    \"\"\"\n    Returns the farthest node from `start` together with its distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    far_node = start\n    far_dist = 0\n\n    while stack:\n        node = stack.pop()\n        d = dist[node]\n\n        if d > far_dist:\n            far_dist, far_node = d, node\n\n        for nxt, w in adj[node]:\n            if dist[nxt] == -1:\n                dist[nxt] = d + w\n                stack.append(nxt)\n\n    return far_node, far_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = map(int, data[idx:idx + 3])\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: farthest from an arbitrary node (1)\n    node_a, _ = find_farthest(1, adj, n)\n\n    # 2nd pass: farthest from node_a; its distance is the diameter\n    _, diameter = find_farthest(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subarray with a sum equal to k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\n- The second line contains n integers a[i] (−10^4 ≤ a[i] ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest such subarray. If no such subarray exists, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = map(int, data)\n    n = next(it)\n    k = next(it)\n    arr = [next(it) for _ in range(n)]\n\n    prefix_sum = 0\n    first_occurrence = {0: -1}          # prefix_sum : earliest index\n    max_len = 0\n\n    for idx, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, subarray (first_occurrence+1 .. idx) sums to k\n        target = prefix_sum - k\n        if target in first_occurrence:\n            cand_len = idx - first_occurrence[target]\n            if cand_len > max_len:\n                max_len = cand_len\n\n        # Store the earliest index for this prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = idx\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of only lowercase English letters. Find the length of the longest substring without repeating characters.\nInput:\nThe first and only line contains the string S (1 ≤ |S| ≤ 10^5).\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    last_pos = {}\n    max_len = 0\n    left = 0  # left end of current window\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside the current window; move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid with n rows and m columns consisting of only '.' and '#' characters. A move consists of moving up, down, left, or right to a cell with '.'. Starting from the top-left cell (1, 1), find the minimum number of moves required to reach the bottom-right cell (n, m). If it's impossible, output -1.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 500).\nEach of the next n lines contains a string of length m, consisting of '.' and '#'.\n\nOutput:\nA single integer: the minimum number of moves, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = [list(row.rstrip()) for row in data[1:1 + n]]\n\n    # If start or finish is blocked, impossible.\n    if grid[0][0] == '#' or grid[n - 1][m - 1] == '#':\n        print(-1)\n        return\n\n    # Directions: up, down, left, right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Distance matrix initialized to -1 (unvisited)\n    dist = [[-1] * m for _ in range(n)]\n    dist[0][0] = 0\n\n    dq = deque([(0, 0)])\n\n    while dq:\n        x, y = dq.popleft()\n        if (x, y) == (n - 1, m - 1):\n            break\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == '.' and dist[nx][ny] == -1:\n                dist[nx][ny] = dist[x][y] + 1\n                dq.append((nx, ny))\n\n    print(dist[n - 1][m - 1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N vertices (numbered 1 to N), where each edge has a weight, find the length of the longest path (diameter) in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N−1 lines contains three integers u, v, w (1 ≤ u,v ≤ N, 1 ≤ w ≤ 10^9), denoting an edge between u and v with weight w.\n\nOutput:\nPrint a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n\n    # adjacency list: adj[u] = list of (v, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    def bfs(start: int):\n        \"\"\"\n        Breadth-first search on a weighted tree (acts like DFS because edge\n        count is uniform, but weight is accumulated). Returns\n        (farthest_node, farthest_distance).\n        \"\"\"\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        dq = deque([start])\n        far_node = start\n        far_dist = 0\n\n        while dq:\n            u = dq.popleft()\n            for v, w in adj[u]:\n                if dist[v] == -1:\n                    dist[v] = dist[u] + w\n                    if dist[v] > far_dist:\n                        far_dist = dist[v]\n                        far_node = v\n                    dq.append(v)\n        return far_node, far_dist\n\n    # First BFS: get one endpoint of the diameter\n    node_a, _ = bfs(1)\n    # Second BFS from that endpoint yields the diameter length\n    _, diameter = bfs(node_a)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting only of lowercase English letters. Determine if s is a palindrome (reads the same backwards as forwards).\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 1000).\n\nOutput:\nOutput \"YES\" if s is a palindrome, otherwise output \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read the string, strip to remove trailing newline/spaces\n    s = sys.stdin.readline().rstrip('\\n')\n    \n    # Check if the string is equal to its reverse\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, find the minimum number of elements to remove so that the remaining sequence is strictly increasing.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Patience sorting technique to find LIS length in O(n log n)\n    tails = []  # tails[i] = smallest possible tail of an inc subseq of length i+1\n    for num in arr:\n        # For strictly increasing sequence we use bisect_left\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    \n    lis_length = len(tails)\n    removals = n - lis_length\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains at most K distinct characters.\n\nInput:\nThe first line contains an integer K (1 ≤ K ≤ 26).\nThe second line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput a single integer: the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_k_distinct(s: str, k: int) -> int:\n    if k == 0:\n        return 0\n    n = len(s)\n    freq = defaultdict(int)\n    left = 0\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # shrink window while it has more than k distinct chars\n        while len(freq) > k:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n            left += 1\n\n        # update answer\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    k = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    print(longest_substring_at_most_k_distinct(s, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether you can rearrange the characters of S to form a palindrome. If possible, output YES; otherwise, output NO.\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output a single word YES or NO.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of the string `s` can form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for cnt in freq.values() if cnt % 2)\n    # For a palindrome, at most one character may have an odd count\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- A single string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}            # character -> its last index\n    start = 0                # left boundary of the current window\n    best = 0                 # best window length found\n    \n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # current char seen inside the current window, move start\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n# Do NOT forget to call main()\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if it is possible to partition the list into two subsets with equal sums.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 200).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^5).\n\nOutput Format:\n- Output \"YES\" if such a partition exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    total = sum(nums)\n    # If total sum is odd, partitioning into two equal sums is impossible\n    if total & 1:\n        print(\"NO\")\n        return\n\n    target = total // 2\n    # Bitset DP where bit i is 1 if sum i is achievable\n    dp = 1  # only sum 0 is reachable at start\n    mask = (1 << (target + 1)) - 1  # keep only bits up to 'target'\n\n    for num in nums:\n        # Shift by current number and OR with existing reachable sums\n        dp |= (dp << num) & mask\n        # Early exit if target already reachable\n        if dp >> target & 1:\n            print(\"YES\")\n            return\n\n    print(\"YES\" if (dp >> target) & 1 else \"NO\")\n\n# Do NOT forget to call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes labeled 1 to n, and n−1 edges, find the diameter of the tree (the longest distance between any two nodes).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n−1 lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput Format:\n- Output a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj, n):\n    \"\"\"\n    Breadth–first search that returns the farthest node from 'start'\n    and its distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # First BFS to find one endpoint of the diameter\n    node_a, _ = bfs(1, adj, n)\n    # Second BFS from that endpoint to get the diameter length\n    node_b, diameter = bfs(node_a, adj, n)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring with all unique characters.\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n\n    last_pos = {}           # char -> last index seen\n    left = 0                # left end of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Duplicate found inside current window – move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum value in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the length of the array.\nThe second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).\n\nOutput:\nOutput a single integer: the minimum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    \n    n = int(data[0])          # Length of the array (can be ignored after reading)\n    # Convert the rest of the tokens into integers\n    nums = map(int, data[1:1 + n])  # Only take the first n numbers\n    \n    # Compute and output the minimum value\n    print(min(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the sum of all unique elements (elements that appear exactly once in the array).\n\nInput Format:\n- The first line contains a single integer N (1 ≤ N ≤ 10^5), the number of elements in the array.\n- The second line contains N space-separated integers, each between -10^9 and 10^9.\n\nOutput Format:\n- Output a single integer: the sum of all unique elements in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Read exactly n integers; extra tokens, if any, are ignored\n    nums = list(map(int, data[1:1 + n]))\n\n    freq = Counter(nums)\n    unique_sum = sum(num for num, count in freq.items() if count == 1)\n    print(unique_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm to find maximum sub-array sum.\"\"\"\n    current = best = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the most recent position of each character\n    last_seen = {}\n    max_len = 0\n    left = 0  # Left end of current window\n\n    for right, ch in enumerate(s):\n        # If we've seen the character and it's in the current window\n        if ch in last_seen and last_seen[ch] >= left:\n            # Move left end to one past the previous occurrence\n            left = last_seen[ch] + 1\n\n        # Update / record the current position for ch\n        last_seen[ch] = right\n\n        # Update the max length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M consisting of '.' (empty) and '#' (wall), find the minimum number of moves required to go from the top-left corner (1,1) to the bottom-right corner (N,M). You can move up, down, left, or right, but cannot pass through walls. If there is no path, output -1.\n\nInput:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 1000).\nEach of the next N lines contains a string of length M consisting of '.' and '#'.\n\nOutput:\nOutput the minimum number of moves, or -1 if unreachable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    M = int(next(it))\n\n    grid = [list(next(it).decode()) for _ in range(N)]\n\n    # If start or end is a wall, impossible\n    if grid[0][0] == '#' or grid[N-1][M-1] == '#':\n        print(-1)\n        return\n\n    # Directions: up, down, left, right\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # visited array\n    visited = [[False] * M for _ in range(N)]\n    visited[0][0] = True\n\n    dq = deque()\n    dq.append((0, 0, 0))  # row, col, distance\n\n    while dq:\n        r, c, dist = dq.popleft()\n        if r == N - 1 and c == M - 1:\n            print(dist)\n            return\n        ndist = dist + 1\n        for dr, dc in dirs:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < N and 0 <= nc < M:\n                if not visited[nr][nc] and grid[nr][nc] == '.':\n                    visited[nr][nc] = True\n                    dq.append((nr, nc, ndist))\n\n    # If queue empties without reaching end\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe next line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest contiguous subarray with all distinct values.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_pos = {}                 # value -> latest index seen\n    left = 0                      # left border of current window\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s of length n consisting only of lowercase English letters, find the length of the longest substring that contains at most k distinct characters.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26).\nThe second line contains the string s.\n\nOutput:\nA single integer: the length of the longest substring with at most k distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_sub_at_most_k_distinct(s: str, k: int) -> int:\n    if k == 0:\n        return 0\n    freq = defaultdict(int)\n    left = 0\n    max_len = 0\n    distinct = 0\n\n    for right, ch in enumerate(s):\n        if freq[ch] == 0:\n            distinct += 1\n        freq[ch] += 1\n\n        while distinct > k:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                distinct -= 1\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else ''\n    # Safety: If string length given is larger than read portion, read rest\n    # though in competitive settings this is rarely needed.\n    if len(s) < n:\n        # join remaining parts (in case spaces in input line)\n        s = ''.join(data[2:])\n    print(longest_sub_at_most_k_distinct(s, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Print all the numbers from 1 to n in lexicographical order.\n\nInput Format:\n- A single integer n (1 ≤ n ≤ 10^4).\n\nOutput Format:\n- Print the numbers from 1 to n, one per line, in lexicographical order.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n    \n    # Generate strings \"1\"..\"n\", sort them lexicographically, and print.\n    numbers = [str(i) for i in range(1, n + 1)]\n    numbers.sort()                              # default str sorting is lexicographical\n    sys.stdout.write('\\n'.join(numbers))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer - the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the minimum number of operations required to make all elements equal, where in one operation you can decrease any element by 1.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])                  # number of elements\n    arr = list(map(int, data[1:n+1])) # read the array\n    \n    mn = min(arr)                     # smallest element\n    operations = sum(x - mn for x in arr)\n    \n    # Print result\n    sys.stdout.write(str(operations))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 through n). Each node has an integer value. Find the maximum sum of node values along any simple path (i.e., path with no repeated nodes).\n\nInput Format:\n- The first line contains a single integer n (2 ≤ n ≤ 10^5).\n- The second line contains n integers v[i] (−10^4 ≤ v[i] ≤ 10^4), the value of each node.\n- Each of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge.\n\nOutput Format:\n- Output a single integer: the maximum sum along any simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    vals = [0] + [int(next(it)) for _ in range(n)]   # 1-based\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    best_overall = -10**18         # global maximum path sum\n\n    def dfs(u: int, p: int) -> int:\n        nonlocal best_overall\n        max1 = max2 = 0            # two largest positive downward contributions\n        for v in adj[u]:\n            if v == p:\n                continue\n            down = dfs(v, u)       # best downward sum starting from child\n            if down > max1:\n                max2 = max1\n                max1 = down\n            elif down > max2:\n                max2 = down\n\n        # best downward path starting from u (cannot branch)\n        best_down = vals[u]\n        if max1 > 0:\n            best_down += max1\n\n        # best path with u as the highest node (may branch into two subtrees)\n        best_through = vals[u]\n        if max1 > 0:\n            best_through += max1\n        if max2 > 0:\n            best_through += max2\n\n        # update global answer\n        best_overall = max(best_overall, best_through)\n\n        return best_down\n\n    dfs(1, 0)\n    print(best_overall)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Find the smallest positive integer X such that the sum of the digits of X is exactly N.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 500).\n\nOutput:\nOutput the integer X.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    N = int(data)\n    \n    # Number of full 9-digits and the remaining part\n    full_nines = N // 9\n    remainder  = N % 9\n    \n    digits = []\n    if remainder:\n        digits.append(str(remainder))\n    digits.extend('9' * full_nines)\n    \n    # Join the digits – this is the smallest integer with digit-sum N\n    result = ''.join(digits)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, print the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5), the number of elements in the array.\n- The second line contains N space-separated integers A_1, A_2, ..., A_N (|A_i| ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The rest of the tokens are the array elements\n    total_even_sum = 0\n    for i in range(1, n + 1):\n        num = int(data[i])\n        if num % 2 == 0:\n            total_even_sum += num\n    print(total_even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Determine if the string is a palindrome.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\n\nOutput:\nPrint \"YES\" if S is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line: length (can be ignored for logic, but we parse to follow format)\n    # We assume the second line exists as per problem statement\n    s = data[1].strip() if len(data) > 1 else \"\"\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if it is possible to rearrange the elements to form an arithmetic progression.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9).\n\nOutput Format:\n- Output 'YES' if possible, otherwise 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_form_arithmetic_progression(arr):\n    n = len(arr)\n    if n <= 2:\n        return True\n    \n    arr.sort()\n    diff = arr[1] - arr[0]\n    \n    for i in range(2, n):\n        if arr[i] - arr[i - 1] != diff:\n            return False\n    return True\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    print(\"YES\" if can_form_arithmetic_progression(arr) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer — the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that has all unique characters.\n    Uses a sliding-window technique with a dictionary that stores the most recent\n    position of each character.\n    \"\"\"\n    last_pos = {}          # char -> most recent index\n    start = 0              # left boundary of the current window\n    best = 0               # best window length found so far\n\n    for i, ch in enumerate(s):\n        # If we have already seen `ch` and it's inside the current window,\n        # move the left boundary just after that previous occurrence.\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring with all unique characters.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s.\n\nOutput Format:\n- Output a single integer: the maximum length of a substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line: length of the string (can be ignored for logic)\n    # Second line: the string itself\n    if len(data) == 1:\n        # string might be on first line itself when n is implicit\n        s = data[0].strip()\n    else:\n        s = data[1].strip()\n\n    last_pos = {}          # char -> last index seen\n    max_len = 0\n    left = 0               # left boundary of current window\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window; move left boundary\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring that contains at most two distinct characters.\n\nInput Format:\n- A single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer, the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_two_distinct(s: str) -> int:\n    \"\"\"\n    Sliding-window that keeps at most two distinct characters inside the window.\n    Returns the maximum window length encountered.\n    \"\"\"\n    if len(s) <= 2:\n        return len(s)\n\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # Shrink window until it contains at most two distinct characters\n        while len(freq) > 2:\n            left_char = s[left]\n            freq[left_char] -= 1\n            if freq[left_char] == 0:\n                del freq[left_char]\n            left += 1\n\n        # Update best length\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    result = longest_substring_at_most_two_distinct(s)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s of length n consisting of lowercase English letters. Find the length of the longest substring that contains at most k distinct characters.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26).\nThe second line contains the string s.\n\nOutput:\nOutput a single integer - the length of the longest substring with at most k distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_k_distinct(s: str, k: int) -> int:\n    if k >= 26:          # All possible lowercase letters\n        return len(s)\n    \n    counts = defaultdict(int)\n    left = 0\n    max_len = 0\n    distinct = 0\n    \n    for right, ch in enumerate(s):\n        if counts[ch] == 0:\n            distinct += 1\n        counts[ch] += 1\n        \n        while distinct > k:\n            left_ch = s[left]\n            counts[left_ch] -= 1\n            if counts[left_ch] == 0:\n                distinct -= 1\n            left += 1\n        \n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else ''\n    # In case the string contains whitespaces (shouldn't happen by statement),\n    # join remaining tokens to reconstruct it\n    if len(s) < n and len(data) > 3:\n        s = ''.join(data[2:])\n    print(longest_substring_at_most_k_distinct(s[:n], k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if it is possible to partition them into two subsets with equal sums.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 100).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000).\nOutput:\nPrint \"YES\" if such a partition exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, it can't be split equally\n    if total & 1:\n        return False\n    target = total // 2\n    \n    # Bitset DP: bit i of `bits` denotes whether sum i is achievable\n    bits = 1  # only sum 0 is achievable at start\n    for num in nums:\n        # Shift current achievable sums by `num` and OR with previous sums\n        bits |= bits << num\n        # Early stopping: if target already achievable\n        if bits >> target & 1:\n            return True\n    return (bits >> target) & 1 == 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n positive integers. Determine the minimum number of elements you need to remove so that the remaining numbers are all distinct.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The list may span multiple lines – read the next n integers\n    arr = map(int, data[1:1 + n])\n    distinct_count = len(set(arr))\n    removals_needed = n - distinct_count\n    print(removals_needed)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the minimum number of characters you need to delete to make the string a palindrome.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the length of the string.\nThe second line contains the string s of length n.\n\nOutput Format:\nPrint a single integer: the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of deletions needed to turn `s`\n    into a palindrome. This equals len(s) - LPS(s), where LPS is\n    the length of the Longest Palindromic Subsequence.\n    \"\"\"\n    n = len(s)\n    # Longest Common Subsequence between s and its reverse = LPS(s)\n    rev = s[::-1]\n\n    # Use two rolling arrays to save memory.\n    prev = [0] * (n + 1)\n    cur = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == rev[j - 1]:\n                cur[j] = prev[j - 1] + 1\n            else:\n                cur[j] = max(prev[j], cur[j - 1])\n        prev, cur = cur, prev  # reuse arrays; cur becomes old\n    lps_length = prev[n]      # after the final swap, `prev` holds last row\n    return n - lps_length\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # The first line has n, second line is the string.\n    # Robustly accept if only the string is provided.\n    if len(data) == 1:\n        s = data[0].strip()\n    else:\n        s = data[1].strip()\n    result = min_deletions_to_palindrome(s)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, each road has an associated distance. Find the length of the shortest path from city 1 to city n. If there is no path, output -1.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- The next m lines each contain three integers u, v, d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ d ≤ 10^9), indicating a road between cities u and v of length d.\n\nOutput Format:\n- Output a single integer: the length of the shortest path from city 1 to city n, or -1 if no such path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys, heapq\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    try:\n        n = int(next(it)); m = int(next(it))\n    except StopIteration:\n        return\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it)); v = int(next(it)); d = int(next(it))\n        adj[u].append((v, d))\n        adj[v].append((u, d))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]                        # (current_distance, node)\n\n    while pq:\n        cur_d, u = heapq.heappop(pq)\n        if cur_d != dist[u]:             # outdated entry\n            continue\n        if u == n:                       # reached destination early\n            print(cur_d)\n            return\n        for v, w in adj[u]:\n            nd = cur_d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    print(-1)                            # destination unreachable\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has a weight, find the length of the longest path in the tree (the diameter of the tree).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^4), representing an edge between nodes u and v with weight w.\n\nOutput Format:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns the node farthest from `start` and the corresponding distance.\n\n    We do a simple stack-based DFS because in a tree every edge is visited once,\n    giving O(n) time while easily handling weighted edges by accumulating the\n    path length.\n    \"\"\"\n    visited = [False] * (n + 1)\n    stack = [(start, 0)]           # (current_node, distance_from_start)\n    visited[start] = True\n    best_node, best_dist = start, 0\n\n    while stack:\n        node, dist = stack.pop()\n        if dist > best_dist:\n            best_dist, best_node = dist, node\n\n        for nxt, w in adj[node]:\n            if not visited[nxt]:\n                visited[nxt] = True\n                stack.append((nxt, dist + w))\n\n    return best_node, best_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # adjacency list: index -> list of (neighbor, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st traversal: from arbitrary node 1 find a farthest node `a`\n    a, _ = farthest_node(1, adj, n)\n    # 2nd traversal: from `a` find farthest node & distance = diameter\n    _, diameter = farthest_node(a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of distinct elements that sum up to a given target value.\n\nInput:\nThe first line contains two integers n (1 ≤ n ≤ 10^5) and x (1 ≤ x ≤ 10^9), where n is the length of the array and x is the target sum.\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, x = data[0], data[1]\n    arr = data[2: 2 + n]\n\n    seen = set()\n    for value in arr:\n        if x - value in seen:\n            print(\"YES\")\n            return\n        seen.add(value)\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n integers, find the smallest positive integer that does not appear in the array.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^6).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint a single integer — the smallest positive integer not present in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])   # we only need the first n numbers\n\n    # The smallest missing positive integer is guaranteed to be ≤ n + 1\n    limit = n + 2                    # +2 so index n+1 exists\n    seen = [False] * limit           # Boolean marker array\n\n    for x in nums:\n        if 1 <= x < limit:\n            seen[x] = True\n\n    # First index (≥1) that is still False is the answer\n    for i in range(1, limit):\n        if not seen[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find and print the length of the longest substring of S that contains no repeating characters.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains the string S (|S| = N).\n\nOutput Format:\n- Print a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns length of the longest substring of `s` with all unique characters.\n    Uses sliding window technique in O(len(s)) time.\n    \"\"\"\n    last_pos = {}          # char -> last index seen\n    left = 0               # left end of the current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        # If the character has appeared and is inside the current window\n        if ch in last_pos and last_pos[ch] >= left:\n            # Move the window's left end just after this character's previous position\n            left = last_pos[ch] + 1\n        # Update last seen position of current character\n        last_pos[ch] = right\n        # Update best length found so far\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Safety: if input length mismatches declared n, we just trust the string read\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray where the sum of the elements is even.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (-10^9 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # first[pos_parity] holds the earliest index (in prefix array) where that parity occurs\n    # Prefix index starts from 0 (empty prefix)\n    first = [-1, -1]\n    first[0] = 0            # parity 0 first seen at prefix position 0\n\n    best = 0\n    parity = 0              # running parity of prefix sum (0 = even, 1 = odd)\n\n    for i, val in enumerate(arr, 1):    # i is 1-based prefix length\n        parity ^= (val & 1)             # update parity\n        if first[parity] == -1:\n            first[parity] = i           # store earliest occurrence\n        else:\n            best = max(best, i - first[parity])\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s, consisting of lowercase English letters.\n\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` without repeating characters.\n    Standard sliding–window / two-pointer approach, O(len(s)) time, O(Alphabet) space.\n    \"\"\"\n    last_pos = {}             # char -> most recent index\n    start = 0                 # beginning index of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        # If the character has been seen and is inside the current window,\n        # move the window's start just after its previous occurrence.\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        # Update maximum length found so far\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # We expect two lines: length and the string\n    # Safeguard for extra whitespace/newlines\n    n_line = 0\n    while n_line < len(data) and data[n_line].strip() == \"\":\n        n_line += 1\n    if n_line >= len(data):\n        return\n    n = int(data[n_line].strip())\n    # The string may be on the next non-empty line\n    s_line = n_line + 1\n    while s_line < len(data) and data[s_line] == \"\":\n        s_line += 1\n    s = data[s_line].rstrip(\"\\n\")\n    # Truncate/extend string to length n if necessary (but per problem they match)\n    s = s[:n]\n\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if it is possible to partition the array into two subsets with equal sum.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 100).\n- The second line contains N space-separated integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 100).\n\nOutput Format:\n- Output \"YES\" if possible, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(arr):\n    total = sum(arr)\n    # If total sum is odd, can't be split equally\n    if total % 2 == 1:\n        return False\n    target = total // 2\n\n    # Boolean DP where dp[s] is True if a subset sums to 's'\n    dp = [False] * (target + 1)\n    dp[0] = True  # Empty subset always has sum 0\n\n    for num in arr:\n        # Iterate backwards to avoid using the same number twice\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        if dp[target]:  # Early exit if target already achievable\n            return True\n    return dp[target]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))  # Read exactly n integers\n    print(\"YES\" if can_partition(arr) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Partition the array into the minimum number of contiguous subarrays such that each subarray contains at most K distinct numbers.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ N).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the minimum number of contiguous subarrays needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    \n    ans = 1                       # at least one subarray (N >= 1)\n    freq = defaultdict(int)       # frequency map in the current subarray\n    distinct = 0                  # number of distinct values in current subarray\n    \n    for _ in range(N):\n        val = int(next(it))\n        if freq[val]:             # already present in current subarray\n            freq[val] += 1\n        else:\n            if distinct == K:     # would exceed K distinct numbers\n                ans += 1\n                freq.clear()\n                freq[val] = 1\n                distinct = 1\n            else:                 # can safely add a new distinct value\n                freq[val] = 1\n                distinct += 1\n    \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimal length of a contiguous subarray whose sum is at least k. If there is no such subarray, output -1.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the minimal length, or -1 if no such subarray exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2+n]))\n\n    left = 0\n    current_sum = 0\n    best = n + 1   # bigger than any possible answer\n\n    for right, val in enumerate(arr):\n        current_sum += val\n\n        # shrink window from the left while the sum is still >= k\n        while current_sum >= k:\n            best = min(best, right - left + 1)\n            current_sum -= arr[left]\n            left += 1\n\n    print(best if best <= n else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, each road has a length. Find the length of the shortest path from city 1 to city n. If there is no path, print -1.\n\nInput Format:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), representing a road between u and v with length w.\n\nOutput Format:\nPrint a single integer: the length of the shortest path from city 1 to city n, or -1 if no such path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    input = sys.stdin.buffer.readline\n\n    # Read number of cities and roads\n    n, m = map(int, input().split())\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10**18\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    # Dijkstra's algorithm\n    pq = [(0, 1)]  # (distance, node)\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n        if u == n:          # Early exit if we reached city n\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    # Output the result\n    print(-1 if dist[n] == INF else dist[n])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint a single integer — the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}            # stores last index of each character\n    left = 0                 # left boundary of current window\n    best = 0                 # length of the longest valid window found\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated within current window, move left edge\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the last index of each character\n    last_pos = {}\n    start = 0\n    best = 0\n\n    for i, ch in enumerate(s):\n        # If character seen and inside current window,\n        # move start right after its previous occurrence\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the minimum element in the array.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer — the minimum element of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    # The rest of the numbers form the array\n    arr = data[1:1 + n]  # in case there is extra whitespace/newlines\n    if arr:  # n guaranteed ≥ 1, but safety first\n        print(min(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a pair of elements whose sum is exactly X.\n\nInput Format:\n- The first line contains two integers N and X (1 ≤ N ≤ 10^5, |X| ≤ 10^9).\n- The second line contains N space-separated integers A_1, ..., A_N (|A_i| ≤ 10^9).\n\nOutput Format:\n- Print \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    target = int(next(it))\n\n    seen = set()\n    for _ in range(n):\n        val = int(next(it))\n        if (target - val) in seen:\n            print(\"YES\")\n            return\n        seen.add(val)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exist two distinct indices i and j such that nums[i] + nums[j] == target. Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\nInput Format:\n- The first line contains two integers n (1 ≤ n ≤ 10^5) and target (-10^9 ≤ target ≤ 10^9).\n- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single line with \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray. Output the sum only.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe next line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = x if max_ending_here + x < x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has an integer value. Find the maximum sum of values along any path from the root to a leaf.\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- The second line contains N integers, the values of nodes 1 through N.\n- Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge between nodes u and v.\n\nOutput Format:\n- Output a single integer: the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(200000)\n\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().split()\n    if not input_data:\n        return\n    it = iter(input_data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]          # 1-based indexing\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    max_sum = -10**18\n    stack = [(1, 0, values[1])]   # (node, parent, path_sum)\n\n    while stack:\n        node, parent, cur_sum = stack.pop()\n\n        # A leaf is a node (other than root) whose only neighbour is its parent\n        if node != 1 and len(adj[node]) == 1:\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n        for nei in adj[node]:\n            if nei != parent:\n                stack.append((nei, node, cur_sum + values[nei]))\n\n    # For completeness: if the root is the only node (N == 1) – not possible per constraints,\n    # but we'll still handle it gracefully.\n    if n == 1:\n        max_sum = values[1]\n\n    print(max_sum)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with n vertices and m edges. Determine if the graph contains a cycle.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v.\n\nOutput:\nOutput \"YES\" if the graph contains a cycle, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# ---------- Disjoint Set Union (Union-Find) ----------\nclass DSU:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # path compression\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False            # they are already connected -> cycle\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        return True\n\n\n# ---------- Main ----------\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Forest with <= n-1 edges might still contain a self-loop; proceed anyway\n    dsu = DSU(n)\n\n    for _ in range(m):\n        u = int(next(it)) - 1   # zero-based\n        v = int(next(it)) - 1\n\n        # Self-loop is an immediate cycle\n        if u == v:\n            print(\"YES\")\n            return\n\n        # Parallel edge that connects vertices already connected forms a cycle\n        if not dsu.union(u, v):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of integers, find the maximum sum of a contiguous subarray. The subarray must contain at least one element.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm: O(n) time, O(1) space.\n    Returns the maximum sum of any contiguous sub-array.\n    \"\"\"\n    best = curr = arr[0]\n    for x in arr[1:]:\n        curr = x if curr + x < x else curr + x  # same as max(x, curr + x) but avoids extra call\n        if curr > best:\n            best = curr\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # use only first n numbers\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers and an integer K, find the number of subarrays whose product is less than K.\n\nInput Format:\n- The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\n- The second line contains N positive integers, each between 1 and 10^9.\n\nOutput Format:\n- Output a single integer: the number of subarrays with product less than K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef count_subarrays_with_product_less_than_k(arr, k):\n    if k <= 1:                       # no positive subarray product can be < 1\n        return 0\n\n    prod = 1\n    left = 0\n    ans  = 0\n\n    for right, val in enumerate(arr):\n        prod *= val\n\n        # shrink window until product < k or window is empty\n        while prod >= k and left <= right:\n            prod //= arr[left]\n            left += 1\n\n        # all subarrays ending at `right` and starting anywhere between\n        # `left` and `right` (inclusive) have product < k\n        ans += right - left + 1\n\n    return ans\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr   = list(map(int, data[2:2+n]))\n\n    result = count_subarrays_with_product_less_than_k(arr, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a weighted undirected graph with N nodes and M edges. Each edge has a positive integer weight. Find the minimum possible maximum edge weight in any spanning tree of the graph.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 2*10^5, 1 ≤ M ≤ 2*10^5).\nEach of the next M lines contains three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^9), representing an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the minimum possible maximum edge weight in any spanning tree of the graph.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# Disjoint Set Union (Union-Find) with path compression and union by rank\nclass DSU:\n    __slots__ = ('p', 'r')\n    def __init__(self, n: int):\n        self.p = list(range(n))\n        self.r = [0] * n\n\n    def find(self, x: int) -> int:\n        while self.p[x] != x:\n            self.p[x] = self.p[self.p[x]]\n            x = self.p[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False\n        if self.r[ra] < self.r[rb]:\n            self.p[ra] = rb\n        elif self.r[ra] > self.r[rb]:\n            self.p[rb] = ra\n        else:\n            self.p[rb] = ra\n            self.r[ra] += 1\n        return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                 # No input\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        w = int(next(it))\n        edges.append((w, u, v))\n\n    # Kruskal: sort edges by weight\n    edges.sort(key=lambda x: x[0])\n\n    dsu = DSU(n)\n    used = 0\n    max_edge_in_mst = 0\n\n    for w, u, v in edges:\n        if dsu.union(u, v):\n            max_edge_in_mst = max(max_edge_in_mst, w)\n            used += 1\n            if used == n - 1:\n                break\n\n    # If graph is disconnected (no spanning tree), print -1\n    if used != n - 1:\n        print(-1)\n    else:\n        print(max_edge_in_mst)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an n x n matrix of integers. Find the sum of the elements on both the main diagonal and the anti-diagonal. If an element belongs to both diagonals, count it only once.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 500).\n- Each of the next n lines contains n integers a_{i,1}, a_{i,2}, ..., a_{i,n} (−10^4 ≤ a_{i,j} ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the sum as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))  # length should be n*n\n    diag_sum = 0\n    idx = 0  # index in flat nums list\n    for i in range(n):\n        row_start = i * n\n        main_idx = row_start + i               # (i, i)\n        anti_idx = row_start + (n - 1 - i)     # (i, n-1-i)\n        diag_sum += nums[main_idx]\n        if main_idx != anti_idx:               # avoid double-counting center when n is odd\n            diag_sum += nums[anti_idx]\n    print(diag_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each edge has a weight. For each node, compute the sum of the weights on the path from the root to that node.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n\nOutput Format:\n- Output n integers: the ith integer is the sum of the weights from the root (node 1) to node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    dist = [0] * (n + 1)     # distance (sum of weights) from root 1\n    visited = [False] * (n + 1)\n    \n    dq = deque([1])\n    visited[1] = True\n    while dq:\n        node = dq.popleft()\n        cur_dist = dist[node]\n        for nei, w in adj[node]:\n            if not visited[nei]:\n                visited[nei] = True\n                dist[nei] = cur_dist + w\n                dq.append(nei)\n    \n    out = ' '.join(str(dist[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n positive integers, determine if you can partition them into two subsets with equal sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 18).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint \"YES\" if such a partition exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, equal partition is impossible\n    if total & 1:\n        return False\n    target = total // 2\n    n = len(nums)\n    \n    # Enumerate all subsets (n ≤ 18 → 2^18 = 262 144 subsets)\n    for mask in range(1 << n):\n        s = 0\n        for i in range(n):\n            if mask & (1 << i):\n                s += nums[i]\n        if s == target:\n            return True\n    return False\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    print(\"YES\" if can_partition(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. For each element, compute the number of elements to its right that are smaller than it.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint n integers: for each position i, the number of elements a_j (j > i) such that a_j < a_i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\nclass BIT:\n    \"\"\"Fenwick tree for prefix sums.\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (n + 1)\n\n    def update(self, idx: int, delta: int) -> None:\n        while idx <= self.n:\n            self.tree[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        res = 0\n        while idx:\n            res += self.tree[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    # Coordinate compression\n    sorted_vals = sorted(set(a))\n    # map each value to 1-based index for BIT\n    comp = {v: i + 1 for i, v in enumerate(sorted_vals)}\n\n    bit = BIT(len(sorted_vals))\n    ans = [0] * n\n\n    # Traverse from right to left\n    for i in range(n - 1, -1, -1):\n        idx = comp[a[i]]\n        # count of strictly smaller elements seen so far\n        ans[i] = bit.query(idx - 1)\n        bit.update(idx, 1)\n\n    sys.stdout.write(' '.join(map(str, ans)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the smallest lexicographical string that can be obtained by removing exactly one character from s.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of s.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Print the resulting string after removing one character.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read input\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    s = s[:n]                    # ensure length matches n\n\n    # Find the first position where s[i] > s[i+1]\n    remove_idx = -1\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            remove_idx = i\n            break\n\n    # If no such position exists, remove the last character\n    if remove_idx == -1:\n        remove_idx = n - 1\n\n    # Build and output the result\n    result = s[:remove_idx] + s[remove_idx + 1:]\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, output the lexicographically smallest string of length n consisting of only the characters 'a' and 'b' such that no two identical characters are adjacent.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\n\nOutput Format:\nPrint the required string.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    \n    # Construct the alternating pattern 'ababa...' and slice to length n\n    result = (\"ab\" * ((n + 1) // 2))[:n]\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n×m grid of integers, find the path from the top-left cell to the bottom-right cell with the minimum sum. You can only move either right or down at each step.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains m integers (−10^4 ≤ cell value ≤ 10^4).\n\nOutput:\nOutput a single integer - the minimum sum path value.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, m = data[0], data[1]\n    cells = data[2:]\n    \n    dp = [0] * m  # dp[j] – minimum sum to reach current row, column j\n    \n    idx = 0  # index while traversing `cells`\n    for i in range(n):\n        for j in range(m):\n            val = cells[idx]\n            idx += 1\n            if i == 0 and j == 0:\n                dp[0] = val\n            elif i == 0:               # first row – can only come from the left\n                dp[j] = dp[j - 1] + val\n            elif j == 0:               # first column – can only come from above\n                dp[0] = dp[0] + val\n            else:                      # choose min from left or above\n                dp[j] = min(dp[j], dp[j - 1]) + val\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, determine if it is a palindrome (reads the same forwards and backwards). Output \"YES\" if it is, otherwise output \"NO\".\n\nInput Format:\n- The first line contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters.\n\nOutput Format:\n- Output a single line with either \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with N nodes and M edges, determine if it is possible to remove exactly one edge so that the graph remains connected and contains no cycles (i.e., becomes a tree).\nInput:\nFirst line: two integers N and M (2 ≤ N ≤ 10^5, N ≤ M ≤ 2×10^5).\nNext M lines: each contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v) representing an edge.\nOutput:\nPrint \"YES\" if possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\nclass DSU:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.components = n\n\n    def find(self, x):\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a, b):\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        self.components -= 1\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    M = int(next(it))\n\n    dsu = DSU(N)\n\n    for _ in range(M):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        dsu.union(u, v)\n\n    # Graph must stay connected and acyclic with exactly one edge removed.\n    # That is possible iff:\n    # 1. The original graph is connected.\n    # 2. M == N   (so after removing one edge we have N-1 edges, the size of a tree)\n    if dsu.components == 1 and M == N:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the minimum number of elements you need to change (to any positive integer) so that the array becomes strictly increasing.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the minimum number of changes required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns the length of the Longest Strictly Increasing Subsequence (LIS)\n    using the patience sorting / binary search method in O(n log n) time.\n    \"\"\"\n    tails = []               # tails[i] == smallest possible tail of an IS of length i+1\n    for x in arr:\n        pos = bisect.bisect_left(tails, x)  # first index where tails[idx] >= x\n        if pos == len(tails):\n            tails.append(x)                 # extend LIS\n        else:\n            tails[pos] = x                  # better tail (smaller) for subsequences of length pos+1\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    # Length of longest strictly increasing subsequence\n    keep = lis_length(arr)\n    # Minimum elements to change\n    print(n - keep)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nThere are n cities connected by m bidirectional roads. Each road connects two cities and has a certain length. Find the shortest distance from city 1 to city n. If there is no path, output -1.\n\nInput:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), representing a road between cities u and v of length w.\n\nOutput:\nOutput a single integer: the shortest distance from city 1 to city n, or -1 if there is no path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef dijkstra(n, adj):\n    INF = 10**20\n    dist = [INF] * n\n    dist[0] = 0                     # city 1  -> index 0\n    pq = [(0, 0)]                   # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue                # outdated entry\n        if u == n - 1:              # reached city n; early exit\n            return d\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n    return -1                       # city n unreachable\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n    m = next(it)\n    \n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = next(it) - 1            # 0-based\n        v = next(it) - 1\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    ans = dijkstra(n, adj)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes labeled from 1 to n. Each edge has a weight. Find the length of the longest path in the tree (the diameter of the tree).\nInput: The first line contains a single integer n (2 ≤ n ≤ 10^5). Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\nOutput: Print a single integer: the length of the longest path in the tree.\nConstraints:\n2 ≤ n ≤ 10^5\n1 ≤ w ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`\n    using an iterative DFS (stack) to avoid recursion limits.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if dist[v] == -1:          # not visited\n                dist[v] = dist[u] + w\n                stack.append(v)\n\n    # obtain farthest node and its distance\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # adjacency list: 1-indexed\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st DFS/BFS from an arbitrary node (1) to find farthest node\n    node_a, _ = farthest_node(1, adj, n)\n\n    # 2nd DFS/BFS from that farthest node to get the diameter length\n    _, diameter = farthest_node(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed acyclic graph with n nodes and m edges, find the number of distinct paths from node 1 to node n. Since the answer can be large, output it modulo 10^9+7.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a directed edge from u to v.\n\nOutput Format:\n- Output a single integer: the number of distinct paths from node 1 to node n modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque, defaultdict\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # adjacency list and in-degrees\n    adj = [[] for _ in range(n + 1)]\n    indeg = [0] * (n + 1)\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        indeg[v] += 1\n\n    # Kahn's topological sort\n    q = deque(i for i in range(1, n + 1) if indeg[i] == 0)\n    topo = []\n    while q:\n        u = q.popleft()\n        topo.append(u)\n        for v in adj[u]:\n            indeg[v] -= 1\n            if indeg[v] == 0:\n                q.append(v)\n\n    # Dynamic programming over topo order\n    ways = [0] * (n + 1)\n    ways[1] = 1  # start node\n\n    for u in topo:\n        if ways[u] == 0:\n            continue\n        for v in adj[u]:\n            ways[v] += ways[u]\n            if ways[v] >= MOD:\n                ways[v] -= MOD\n\n    print(ways[n] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum difference between any two elements in the list.\n\nInput Format:\n- The first line contains a single integer n (2 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the maximum difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])            # number of elements (not actually needed beyond validation)\n    nums = list(map(int, data[1:1 + n]))\n\n    # Maximum possible difference is obtained from the largest and smallest elements\n    max_diff = max(nums) - min(nums)\n\n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected, connected graph with n nodes and m edges. Each edge has a positive integer weight. Find the weight of the minimum spanning tree.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer, the total weight of the minimum spanning tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    \"\"\"Disjoint-set union with path compression and union by rank.\"\"\"\n    __slots__ = ('parent', 'rank')\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.rank   = [0] * n\n\n    def find(self, x: int) -> int:\n        # Iterative path-compression\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False\n        if self.rank[ra] < self.rank[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        if self.rank[ra] == self.rank[rb]:\n            self.rank[ra] += 1\n        return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    edges = [(int(next(it)), int(next(it)) - 1, int(next(it)) - 1)  # (w,u,v)\n             for _ in range(m)]\n\n    edges.sort(key=lambda e: e[0])          # Kruskal: sort by weight\n\n    dsu   = DSU(n)\n    taken = 0\n    total_weight = 0\n\n    for w, u, v in edges:\n        if dsu.union(u, v):\n            total_weight += w\n            taken += 1\n            if taken == n - 1:               # MST complete\n                break\n\n    print(total_weight)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the maximum sum of edge weights on any simple path in the tree.\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w.\n\nOutput Format:\nPrint a single integer, the maximum sum of weights along any simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef tree_farthest(start, adj):\n    \"\"\"\n    Returns the farthest node from `start` and the corresponding distance.\n    Uses an explicit stack to avoid recursion-depth problems.\n    \"\"\"\n    far_node = start\n    max_dist = 0\n    stack = [(start, -1, 0)]        # (current_node, parent, distance_so_far)\n\n    while stack:\n        node, parent, dist = stack.pop()\n        if dist > max_dist:\n            max_dist = dist\n            far_node = node\n        for nxt, w in adj[node]:\n            if nxt != parent:\n                stack.append((nxt, node, dist + w))\n\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    idx = 1\n\n    # adjacency list: adj[u] = list of (v, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(data[idx])\n        v = int(data[idx + 1])\n        w = int(data[idx + 2])\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st traversal: from any node (say 1) to find the farthest node A\n    node_a, _ = tree_farthest(1, adj)\n\n    # 2nd traversal: from node A to find maximum distance (tree diameter)\n    _, diameter = tree_farthest(node_a, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 1000), the size of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])  # Only take first n numbers in case of extra input\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, count the number of pairs (i, j) such that i < j and a_i + a_j is a prime number.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2000).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput:\nOutput a single integer - the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef sieve(limit: int):\n    \"\"\"Returns a boolean list where index p is True iff p is prime (0 <= p <= limit).\"\"\"\n    is_prime = [True] * (limit + 1)\n    if limit >= 0:\n        is_prime[0] = False\n    if limit >= 1:\n        is_prime[1] = False\n    for p in range(2, int(math.isqrt(limit)) + 1):\n        if is_prime[p]:\n            step = p\n            start = p * p\n            is_prime[start: limit + 1: step] = [False] * (((limit - start) // step) + 1)\n    return is_prime\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # The largest possible sum of two elements\n    max_sum = 2_000_000  # 2 * 10^6 according to constraints\n    is_prime = sieve(max_sum)\n    \n    cnt = 0\n    for i in range(n):\n        ai = arr[i]\n        for j in range(i + 1, n):\n            if is_prime[ai + arr[j]]:\n                cnt += 1\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the sum.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4).\n\nOutput:\nPrint a single integer - the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find the maximum sum of a contiguous subarray.\n    \"\"\"\n    best = -10**18          # smaller than any possible sum\n    current = 0\n    for x in arr:\n        # either extend the current subarray or start a new one at x\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1+n]        # read exactly `n` integers\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a binary tree in the form of its level order traversal as a list of values (null for missing nodes). Return the maximum width of the binary tree. The width of a level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes).\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^4), the number of nodes.\nThe second line contains n space-separated values (integers or \"null\") representing the tree in level order.\n\nOutput Format:\nPrint a single integer: the maximum width of the binary tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    tokens = data[1:]\n    # In case the second line is split across several lines, make sure we only take n tokens\n    tokens = tokens[:n]\n\n    # Convert tokens: integers stay int, \"null\"/\"None\" → None\n    arr = []\n    for tok in tokens:\n        if tok.lower() == 'null' or tok.lower() == 'none':\n            arr.append(None)\n        else:\n            arr.append(int(tok))\n\n    # Edge case: empty or root is null\n    if n == 0 or arr[0] is None:\n        print(0)\n        return\n\n    max_width = 0\n    current_level = [0]         # store indices in the *full* binary tree\n\n    while current_level:\n        # Width of current level = last_index - first_index + 1\n        max_width = max(max_width, current_level[-1] - current_level[0] + 1)\n\n        next_level = []\n        for idx in current_level:\n            left = 2 * idx + 1\n            right = 2 * idx + 2\n\n            if left < n and arr[left] is not None:\n                next_level.append(left)\n            if right < n and arr[right] is not None:\n                next_level.append(right)\n\n        current_level = next_level\n\n    print(max_width)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a number n. Count the number of distinct pairs (i, j) such that 1 ≤ i < j ≤ n and i + j is even.\n\nInput Format:\nThe first line contains a single integer n (2 ≤ n ≤ 10^6).\n\nOutput Format:\nPrint the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read input\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # Count evens and odds in [1, n]\n    evens = n // 2           # numbers 2, 4, 6, ...\n    odds  = n - evens        # the remaining ones\n\n    # Number of valid pairs: choose any 2 evens OR any 2 odds\n    pairs = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n\n    # Output the result\n    print(pairs)\n\n# Call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists any pair of distinct elements whose sum is equal to a target value k.\n\nInput Format:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it)); k = int(next(it))\n    seen = set()\n    for _ in range(n):\n        val = int(next(it))\n        if k - val in seen:\n            print(\"YES\")\n            return\n        seen.add(val)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray where the sum of the elements is even.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the length of the longest contiguous subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    # first[p] – first position i (prefix length) where prefix parity == p\n    first = [0, None]          # parity 0 appears at prefix length 0\n    pref_parity = 0            # current prefix parity\n    best = 0\n\n    for idx, val in enumerate(arr, 1):   # idx is 1-based prefix length\n        pref_parity ^= (val & 1)         # update parity (0 even, 1 odd)\n        if first[pref_parity] is None:\n            first[pref_parity] = idx     # remember earliest occurrence\n        else:\n            best = max(best, idx - first[pref_parity])\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, where each edge has a weight, find the maximum sum of weights along any path between two nodes in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nOutput one integer — the maximum sum of weights along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the node farthest from `start` together with its distance.\n    Because the graph is a tree, the first distance we compute for every\n    node is the correct (and only) one, so a simple queue/stack traversal\n    is sufficient.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:          # not visited yet\n                dist[v] = dist[u] + w\n                q.append(v)\n\n    # locate farthest node and its distance\n    far_node = max(range(1, n + 1), key=dist.__getitem__)\n    return far_node, dist[far_node]\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st traversal: farthest from node 1\n    node_a, _ = farthest(1, adj, n)\n\n    # 2nd traversal: farthest from node_a gives tree diameter\n    _, diameter = farthest(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the number of distinct pairs (i, j) such that i < j and a_i + a_j is divisible by k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 2 × 10^5, 1 ≤ k ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Special fast-path when k == 1: every pair works.\n    if k == 1:\n        total_pairs = n * (n - 1) // 2\n        print(total_pairs)\n        return\n\n    # Frequency array for remainders\n    freq = [0] * k\n    for x in nums:\n        freq[x % k] += 1\n\n    # Pairs whose both elements give remainder 0\n    ans = freq[0] * (freq[0] - 1) // 2\n\n    # Handle k even -> remainder k//2 pairs with itself\n    if k % 2 == 0:\n        mid = k // 2\n        ans += freq[mid] * (freq[mid] - 1) // 2\n\n    # Handle the rest of the remainders\n    # For r in 1 .. k-1, r < k - r to avoid double counting\n    upper = (k // 2) if k % 2 == 0 else (k // 2 + 1)\n    for r in range(1, upper):\n        ans += freq[r] * freq[k - r]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition the array into two subsets such that the absolute difference between the sums of the two subsets is minimized. Output the minimal possible difference.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 100).\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4).\n\nOutput:\nPrint a single integer - the minimal possible difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    total = sum(nums)\n    # Bitset dynamic programming: bit i of dp indicates whether sum i is attainable\n    dp = 1  # only sum 0 is reachable initially\n    \n    for x in nums:\n        dp |= dp << x  # add x to all previously reachable sums\n    \n    half = total // 2\n    # Find the largest reachable sum not exceeding total//2\n    for s in range(half, -1, -1):\n        if (dp >> s) & 1:\n            best = s\n            break\n    \n    minimal_difference = total - 2 * best\n    print(minimal_difference)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), compute the diameter of the tree. The diameter is the length of the longest path between any two nodes.\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput:\nPrint a single integer - the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start: int, adj: list[list[int]], n: int) -> tuple[int, int]:\n    \"\"\"\n    Standard BFS that returns the farthest node from `start`\n    together with its distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n\n    far_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            far_node = i\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx])\n        v = int(data[idx + 1])\n        idx += 2\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS: from an arbitrary node (1) to find one endpoint of the diameter\n    endpoint, _ = bfs(1, adj, n)\n\n    # Second BFS: from that endpoint to get the actual diameter length\n    _, diameter = bfs(endpoint, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered from 1 to n), where each edge has a weight, find the length of the longest path (diameter) in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the vertex farthest from `start` and the corresponding distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    dq = deque([start])\n\n    while dq:\n        node = dq.pop()\n        for neigh, w in adj[node]:\n            if dist[neigh] == -1:\n                dist[neigh] = dist[node] + w\n                dq.append(neigh)\n\n    # Locate the farthest node\n    max_dist = 0\n    far_node = start\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            far_node = i\n    return far_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    \n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # First DFS/BFS to find one endpoint of the diameter\n    node_a, _ = farthest(1, adj, n)\n    # Second DFS/BFS from that endpoint to find the diameter length\n    _, diameter = farthest(node_a, adj, n)\n    \n    sys.stdout.write(str(diameter))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, for each element, compute the number of elements to its right that are smaller than it.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2*10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint n integers, where the i-th integer is the number of elements to the right of a_i that are smaller than a_i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.n = size\n        self.bit = [0] * (self.n + 1)\n\n    def add(self, idx: int, delta: int) -> None:\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def prefix_sum(self, idx: int) -> int:\n        s = 0\n        while idx:\n            s += self.bit[idx]\n            idx -= idx & -idx\n        return s\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Coordinate compression\n    uniq = sorted(set(arr))\n    to_rank = {v: i + 1 for i, v in enumerate(uniq)}  # 1-based ranks\n\n    ft = FenwickTree(len(uniq))\n    res = [0] * n\n\n    # Traverse from right to left\n    for i in range(n - 1, -1, -1):\n        r = to_rank[arr[i]]\n        # Count of smaller elements = prefix sum of ranks < r\n        res[i] = ft.prefix_sum(r - 1)\n        ft.add(r, 1)\n\n    sys.stdout.write(' '.join(map(str, res)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each edge has a weight. For each node, compute the sum of distances from that node to every other node in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 2×10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between u and v with weight w.\n\nOutput:\nOutput n integers: the i-th integer is the sum of distances from node i to all other nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# ----------  Solution  ----------\ndef main() -> None:\n    sys.setrecursionlimit(500_000)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    size = [0] * (n + 1)          # subtree sizes\n    dist = [0] * (n + 1)          # distance from root (node 1)\n    \n    # ----- first DFS: compute size[] and dist[] -----\n    def dfs1(u: int, p: int) -> None:\n        size[u] = 1\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            dist[v] = dist[u] + w\n            dfs1(v, u)\n            size[u] += size[v]\n    \n    dfs1(1, 0)\n    \n    total_root = sum(dist[1:])    # sum of distances from node 1 to all nodes\n    ans = [0] * (n + 1)\n    ans[1] = total_root\n    \n    # ----- second DFS: rerooting to obtain answers for all nodes -----\n    def dfs2(u: int, p: int) -> None:\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            # when moving root from u to v\n            ans[v] = ans[u] + (n - 2 * size[v]) * w\n            dfs2(v, u)\n    \n    dfs2(1, 0)\n    \n    # ----- output -----\n    out = ' '.join(str(ans[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\n# ----- run -----\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two strings A and B, determine the minimum number of single-character edits (insertions, deletions, or substitutions) required to change A into B.\n\nInput Format:\n- The first line contains string A (1 ≤ |A| ≤ 1000).\n- The second line contains string B (1 ≤ |B| ≤ 1000).\n\nOutput Format:\n- Output a single integer, the minimum number of edits.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef levenshtein_distance(a: str, b: str) -> int:\n    \"\"\"\n    Computes the Levenshtein (edit) distance between strings `a` and `b`.\n    Uses O(min(len(a), len(b))) additional memory.\n    \"\"\"\n    n, m = len(a), len(b)\n\n    # Ensure that `b` is the shorter string to minimize memory usage\n    # (swap if necessary).\n    if m > n:\n        a, b = b, a\n        n, m = m, n\n\n    # `prev` holds distances for transforming a[0:i] -> b[0:j]\n    prev = list(range(m + 1))\n\n    for i in range(1, n + 1):\n        cur = [i] + [0] * m\n        for j in range(1, m + 1):\n            cost = 0 if a[i - 1] == b[j - 1] else 1\n            cur[j] = min(\n                prev[j] + 1,      # deletion\n                cur[j - 1] + 1,   # insertion\n                prev[j - 1] + cost  # substitution\n            )\n        prev = cur\n    return prev[m]\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    a = data[0].rstrip('\\n')\n    b = data[1].rstrip('\\n') if len(data) > 1 else \"\"\n    print(levenshtein_distance(a, b))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of N integers, find the length of the longest contiguous subsequence with all elements distinct.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers, each between 1 and 10^9.\n\nOutput Format:\n- Output a single integer: the length of the longest such subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_length(arr):\n    \"\"\"\n    Returns the length of the longest contiguous subarray\n    whose elements are all distinct.\n    \"\"\"\n    last_pos = {}          # value -> most recent index\n    left = 0               # left boundary of current window\n    best = 0\n\n    for right, value in enumerate(arr):\n        # If we've seen `value` inside current window, move `left`\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1          # shrink window from the left\n\n        last_pos[value] = right                 # update last seen position\n        best = max(best, right - left + 1)      # update best length found\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n + 1]))  # Safeguard in case extra whitespace follows\n\n    # Directly compute and print answer\n    print(longest_unique_subarray_length(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n cities and m bidirectional roads connecting pairs of cities, determine the minimum number of roads that need to be added to make all cities connected (i.e., so that it's possible to travel between any two cities).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\nThe next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a road between cities u and v.\n\nOutput:\nPrint a single integer - the minimum number of roads to be added.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# ---------- Disjoint-Set (Union-Find) ----------\nclass DSU:\n    __slots__ = (\"p\", \"r\")\n    def __init__(self, n: int):\n        self.p = list(range(n + 1))\n        self.r = [0] * (n + 1)\n\n    def find(self, x: int) -> int:\n        # Path compression\n        while self.p[x] != x:\n            self.p[x] = self.p[self.p[x]]\n            x = self.p[x]\n        return x\n\n    def union(self, a: int, b: int) -> None:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        # Union by rank\n        if self.r[ra] < self.r[rb]:\n            self.p[ra] = rb\n        elif self.r[ra] > self.r[rb]:\n            self.p[rb] = ra\n        else:\n            self.p[rb] = ra\n            self.r[ra] += 1\n\n# ---------- Solver ----------\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    dsu = DSU(n)\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        dsu.union(u, v)\n\n    # Count distinct components\n    comp_roots = {dsu.find(i) for i in range(1, n + 1)}\n    # Minimum roads needed is (#components - 1)\n    print(len(comp_roots) - 1)\n\n# ---------- Run ----------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, determine the minimum number of moves required to make all elements equal, where in each move you can increment or decrement any element by 1.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2*10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, *a = data\n    a.sort()\n    median = a[n // 2]          # upper median (works for both odd and even n)\n    moves = sum(abs(x - median) for x in a)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has a weight, find the length of the longest path in the tree (the tree diameter).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), meaning there is an edge between nodes u and v with weight w.\n\nOutput Format:\nPrint a single integer: the length of the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef farthest(start: int, n: int, adj: list[list[tuple[int, int]]]) -> tuple[int, int]:\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`.\n    Uses an iterative DFS to avoid recursion-limit issues.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        u = stack.pop()\n        du = dist[u]\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = du + w\n                stack.append(v)\n\n    # locate the farthest node and its distance\n    far_node = start\n    far_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > far_dist:\n            far_dist = dist[i]\n            far_node = i\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: from an arbitrary node (1) to find a farthest node\n    node_a, _ = farthest(1, n, adj)\n\n    # 2nd pass: from that farthest node to get the diameter\n    _, diameter = farthest(node_a, n, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine if the graph contains a cycle. If it does, output 'YES'. Otherwise, output 'NO'.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nOutput 'YES' if the graph contains a cycle, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Increase recursion limit just in case (not really needed for DSU)\n    sys.setrecursionlimit(1_000_000)\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Disjoint Set Union (Union-Find) with path compression and union by size\n    parent = list(range(n + 1))\n    size   = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # Path compression (two-step)\n            x = parent[x]\n        return x\n\n    def union(x: int, y: int) -> bool:\n        rx, ry = find(x), find(y)\n        if rx == ry:            # already in same set → adding this edge forms a cycle\n            return False\n        if size[rx] < size[ry]: # union by size\n            rx, ry = ry, rx\n        parent[ry] = rx\n        size[rx] += size[ry]\n        return True\n\n    answer = \"NO\"\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n\n        # Self-loop counts as a cycle immediately\n        if u == v:\n            answer = \"YES\"\n            break\n\n        if not union(u, v):  # union returns False when a cycle is detected\n            answer = \"YES\"\n            break\n\n    # No cycle detected after processing all edges\n    sys.stdout.write(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find the length of the longest substring that contains at most two distinct characters.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\n\nOutput:\nOutput a single integer: the length of the longest such substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1].strip() if len(data) > 1 else \"\"\n    \n    left = 0\n    freq = defaultdict(int)\n    best = 0\n    \n    for right, ch in enumerate(s):\n        freq[ch] += 1\n        \n        while len(freq) > 2:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n            left += 1\n        \n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the length of the smallest subarray with a sum greater than or equal to a given value s.\n\nInput Format:\nThe first line contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer — the length of the smallest such subarray, or −1 if no such subarray exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, s = data[0], data[1]\n    arr = data[2:]\n    # Safety, though input guarantees n numbers.\n    arr = arr[:n]\n\n    left = 0\n    current_sum = 0\n    best = n + 1  # bigger than any possible window\n\n    for right in range(n):\n        current_sum += arr[right]\n        # Shrink window from the left while it still satisfies the condition\n        while current_sum >= s:\n            best = min(best, right - left + 1)\n            current_sum -= arr[left]\n            left += 1\n\n    print(best if best <= n else -1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine the minimum number of elements you must remove to make the remaining elements all equal.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 2×10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    freq = Counter(nums)\n    max_freq = max(freq.values()) if freq else 0\n    removals = n - max_freq\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n × m containing only '.' (empty cell) or '#' (blocked cell). Count the number of distinct paths from the top-left corner to the bottom-right corner, moving only right or down, and not passing through any blocked cell. Output the answer modulo 10^9+7.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains a string of length m, each character is either '.' or '#'.\n\nOutput Format:\n- Output a single integer, the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n    \n    # dp[j] will hold number of ways to reach current row, column j (1-based)\n    dp = [0] * (m + 1)\n    dp[1] = 1 if grid[0][0] == '.' else 0      # starting cell\n    \n    for i in range(1, n + 1):\n        row = grid[i - 1]\n        for j in range(1, m + 1):\n            if row[j - 1] == '#':\n                dp[j] = 0                       # cannot stand on blocked cell\n            else:\n                dp[j] = (dp[j] + dp[j - 1]) % MOD\n                # dp[j] already contained ways from the previous row (down move)\n                # dp[j - 1] is ways from current row, previous column (right move)\n    print(dp[m] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, count the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers arr[1], arr[2], ..., arr[N] (-10^9 ≤ arr[i] ≤ 10^9).\n\nOutput:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens plus number of ways to pick 2 odds\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers A and B, find the smallest integer X such that X ≥ A and X is divisible by B.\n\nInput:\nThe first line contains two integers A and B (1 ≤ A, B ≤ 10^9).\n\nOutput:\nPrint the smallest integer X ≥ A that is divisible by B.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    A, B = map(int, data[:2])\n\n    remainder = A % B\n    if remainder == 0:\n        print(A)\n    else:\n        print(A + (B - remainder))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer — the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs_farthest(start, adj):\n    \"\"\"\n    Breadth-first search that returns the farthest node and its distance\n    from `start` in an unweighted graph (tree).\n    \"\"\"\n    n = len(adj) - 1          # adjacency list is 1-indexed\n    dist = [-1] * (n + 1)\n    q = deque([start])\n    dist[start] = 0\n    farthest_node = start\n\n    while q:\n        v = q.popleft()\n        for nxt in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + 1\n                q.append(nxt)\n                if dist[nxt] > dist[farthest_node]:\n                    farthest_node = nxt\n    return farthest_node, dist[farthest_node]\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # First BFS: from any node (1) to get one endpoint of diameter\n    u, _ = bfs_farthest(1, adj)\n    \n    # Second BFS: from that endpoint to get actual diameter length\n    v, diameter = bfs_farthest(u, adj)\n    \n    # Output the diameter length\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of only lowercase English letters. Determine whether s is a palindrome. A palindrome is a string that reads the same forwards and backwards.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint \"YES\" if s is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string consisting of lowercase English letters, determine whether it is a palindrome (reads the same forwards and backwards).\n\nInput:\nA single line containing a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput \"YES\" if the string is a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(\"YES\" if s == s[::-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, output the sum of all even numbers in the list.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer representing the sum of all even numbers in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    # First value is N; the rest are the integers\n    n = int(data[0])\n    nums = map(int, data[1:n+1])   # only take first n numbers in case there are extras\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes (numbered 1 to N). Each edge has a positive integer weight. Find the length of the longest path in the tree (the diameter).\n\nInput Format:\n- The first line contains a single integer N (2 ≤ N ≤ 10^5).\n- Each of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), denoting an undirected edge between u and v of weight w.\n\nOutput Format:\n- Print a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the node farthest from `start` and the corresponding distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n\n    far_node = start\n    max_dist = 0\n\n    while q:\n        u = q.pop()          # stack-style traversal (DFS-ish)\n        for v, w in adj[u]:\n            if dist[v] == -1:  # not visited\n                dist[v] = dist[u] + w\n                if dist[v] > max_dist:\n                    max_dist = dist[v]\n                    far_node = v\n                q.append(v)\n\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First pass: from any node (1) find the farthest node `x`\n    x, _ = farthest(1, adj, n)\n    # Second pass: from `x` find farthest distance (the diameter)\n    _, diameter = farthest(x, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array of length n, determine if it is possible to partition the array into two non-empty subsets with equal sums.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 1000).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint \"YES\" if it is possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(arr):\n    total = sum(arr)\n    # If total sum is odd, equal partition is impossible\n    if total % 2 == 1 or len(arr) < 2:\n        return False\n    target = total // 2\n\n    # Bitset: bit i is 1 iff a subset with sum i is achievable\n    mask = 1  # only sum 0 is achievable initially\n    for x in arr:\n        # shift current mask by x and OR; this adds x to every previously reachable sum\n        mask |= mask << x\n        # Early exit: once target sum is reachable, we are done\n        if (mask >> target) & 1:\n            return True\n    return False\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S, determine whether it is a palindrome (reads the same forwards and backwards). Print \"YES\" if it is a palindrome, otherwise print \"NO\".\n\nInput Format:\nA single line containing string S (1 ≤ |S| ≤ 1000), consisting of lowercase English letters.\n\nOutput Format:\nPrint \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    # Read the string, strip the trailing newline (but keep all other characters).\n    s = sys.stdin.readline().rstrip('\\n')\n\n    # Check if the string reads the same forwards and backwards.\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n# Ensures main() runs when the script is executed\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subsequence such that the absolute difference between any two consecutive elements is at most 1.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the length of the longest such subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    dp = {}                 # dp[value] -> longest valid subsequence ending with `value`\n    best = 0\n\n    for x in arr:\n        # length if we append x to the best subsequence that can precede it\n        prev_best = max(dp.get(x - 1, 0), dp.get(x, 0), dp.get(x + 1, 0))\n        cur_len = prev_best + 1\n\n        # store the best subsequence length ending with value x\n        if cur_len > dp.get(x, 0):\n            dp[x] = cur_len\n\n        if cur_len > best:\n            best = cur_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S can be rearranged to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput Format:\n- The first line contains a single string S (1 ≤ |S| ≤ 1000).\n\nOutput Format:\n- Output \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    from collections import Counter\n    freq = Counter(s)\n    odd_counts = sum(1 for cnt in freq.values() if cnt % 2)\n    # For a palindrome, at most one character may have an odd count\n    return odd_counts <= 1\n\n\ndef main():\n    import sys\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, print the sum of the even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000).\n\nOutput Format:\n- Output a single integer: the sum of the even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])  # In case extra numbers are provided we only consider first n\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. For each distinct element, count the number of times it appears and output the counts in ascending order of the distinct elements.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- For each distinct integer in increasing order, output the integer and its count on a separate line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    freq = Counter(nums)\n\n    for value in sorted(freq):\n        sys.stdout.write(f\"{value} {freq[value]}\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine if it is a palindrome. Output \"YES\" if it is a palindrome, otherwise output \"NO\".\n\nInput Format:\n- The first line contains a string s (1 ≤ |s| ≤ 1000).\n\nOutput Format:\n- Output \"YES\" or \"NO\" as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n    \n    # Read the string (strip newline/whitespace)\n    s = sys.stdin.readline().strip()\n    \n    # Check if palindrome\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two arrays A and B, each of length n. Find the minimum number of swaps needed to make both arrays strictly increasing. You may swap the elements at the same index in A and B any number of times.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers A[i] (1 ≤ A[i] ≤ 10^9).\n- The third line contains n integers B[i] (1 ≤ B[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the minimal number of swaps required. If impossible, output -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_swaps_strictly_increasing(A, B):\n    \"\"\"\n    Returns the minimum number of index–wise swaps needed to make both\n    sequences strictly increasing, or -1 if impossible.\n    \"\"\"\n    n = len(A)\n    # keep  – min swaps up to i with NO swap at i\n    # swap  – min swaps up to i WITH swap at i\n    INF = n + 5\n    keep, swap = 0, 1          # i = 0\n    \n    for i in range(1, n):\n        k = s = INF\n\n        # Case 1: keeping the relative order of index i and i-1 works\n        if A[i] > A[i-1] and B[i] > B[i-1]:\n            k = min(k, keep)          # keep->keep\n            s = min(s, swap + 1)      # swap->swap (+1 for current swap)\n\n        # Case 2: swapping exactly one of (i-1) or i works\n        if A[i] > B[i-1] and B[i] > A[i-1]:\n            k = min(k, swap)          # swap (i-1), keep i\n            s = min(s, keep + 1)      # keep (i-1), swap i (+1)\n\n        keep, swap = k, s\n\n        # Early exit if both are impossible\n        if keep >= INF and swap >= INF:\n            return -1\n\n    ans = min(keep, swap)\n    return ans if ans < INF else -1\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    A = list(map(int, data[1:1 + n]))\n    B = list(map(int, data[1 + n:1 + 2 * n]))\n    \n    print(min_swaps_strictly_increasing(A, B))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. For each prefix of the array, output the minimum value in that prefix.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).\n\nOutput Format:\nOutput N integers, where the i-th integer is the minimum value among the first i elements of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))  # Ensure we only take first n numbers\n    out = []\n    current_min = float('inf')\n    for x in nums:\n        if x < current_min:\n            current_min = x\n        out.append(str(current_min))\n    sys.stdout.write(' '.join(out))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, print the sum of all even numbers in the array.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine if the string can be rearranged to form a palindrome. Output 'YES' if possible, otherwise 'NO'.\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 1000).\n\nOutput:\nPrint 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_cnt = sum(1 for c in freq.values() if c % 2)\n    # For a palindrome, at most one character may have an odd frequency.\n    return odd_cnt <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print('YES' if can_form_palindrome(s) else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, output the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\nThe second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000).\n\nOutput:\nPrint a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n positive integers, find the greatest common divisor (GCD) of all numbers.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the GCD of all the numbers.\n\nConstraints:\n1 ≤ n ≤ 10^5\n1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom functools import reduce\n\ndef compute_gcd_list(numbers):\n    \"\"\"Return the GCD of all integers in the iterable `numbers`.\"\"\"\n    return reduce(math.gcd, numbers)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # slice up to n numbers, convert to int\n    numbers = list(map(int, data[1:1 + n]))\n    result = compute_gcd_list(numbers)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of S.\nThe second line contains the string S.\n\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_seen = {}\n    left = 0\n    max_len = 0\n    \n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        max_len = max(max_len, right - left + 1)\n    \n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n\n    # data[0] is n, but we actually don't need it except for validation\n    if len(data) < 2:\n        return\n    \n    s = data[1].strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n x m consisting of only '.' (empty) and '#' (blocked) cells. Find the number of distinct paths from the top-left cell to the bottom-right cell, moving only right or down, and not stepping on any blocked cells. Output the count modulo 10^9+7.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain a string of length m, consisting of '.' and '#'.\n\nOutput Format:\n- Output a single integer: the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n\n    # If start or destination is blocked -> no paths\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # Use a 1-dimensional DP array to save memory\n    dp = [0] * (m + 1)\n    dp[1] = 1  # virtual 0th column, so dp[j] corresponds to column j-1 in grid\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(1, m + 1):\n            if row[j - 1] == '#':\n                dp[j] = 0\n            else:\n                dp[j] = (dp[j] + dp[j - 1]) % MOD\n    print(dp[m] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers a and b, compute their greatest common divisor (GCD).\n\nInput:\nA single line containing two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput:\nOutput a single integer: the GCD of a and b.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main():\n    # Read input, strip whitespace, and split into two parts\n    data = sys.stdin.readline().strip().split()\n    if len(data) < 2:      # Handle potential missing inputs gracefully\n        return\n    a, b = map(int, data)\n    \n    # Compute GCD using math.gcd (Euclidean algorithm under the hood)\n    result = math.gcd(a, b)\n    \n    # Output the result\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine the length of the longest contiguous subarray with all distinct elements.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> most recent index\n    left = 0               # left boundary of current window\n    best = 0               # best window length found so far\n\n    for right, val in enumerate(arr):\n        # if val seen inside current window, move left boundary\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine whether s can be rearranged to form a palindrome. If yes, print \"YES\"; otherwise, print \"NO\".\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint \"YES\" if s can be rearranged into a palindrome, else print \"NO\".\n\nConstraints:\n1 ≤ |s| ≤ 10^5\ns consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the string `s` can be rearranged into a palindrome.\n    \"\"\"\n    # Count frequency of each character\n    freq = Counter(s)\n    # Count how many characters have odd occurrences\n    odd_count = sum(1 for count in freq.values() if count % 2)\n    # A palindrome can have at most one character with an odd count\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nOutput a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains no repeating characters.\n    Uses a sliding-window technique with a hash map storing the most recent position\n    of each character, guaranteeing O(n) time and O(σ) extra memory (σ ≤ 26 here).\n    \"\"\"\n    last_seen = {}          # char -> last index it appeared at\n    left = 0                # left boundary of the current window\n    best = 0                # best length found so far\n\n    for right, ch in enumerate(s):\n        # If 'ch' was seen and is inside the current window, move `left`\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find and print the length of the longest substring of s that contains no repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring with no repeated characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding window approach to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_seen = {}          # char -> last index\n    start = 0               # start index of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= start:\n            # Character repeated inside the current window.\n            start = last_seen[ch] + 1\n        last_seen[ch] = i\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring in which no character repeats.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window algorithm to get the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_pos = {}          # character -> its latest index\n    left = 0               # left border of the current window\n    best = 0               # best window length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside the current window → move left border\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray of length at least 1.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4).\n\nOutput:\nOutput a single integer — the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    best = current = arr[0]\n    for value in arr[1:]:\n        current = value if current + value < value else current + value\n        if current > best:\n            best = current\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm:\n    Keeps track of the maximum sub-array sum ending at the current position\n    and the global maximum across the array.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = max(x, cur + x)   # either extend the previous subarray or start new\n        best = max(best, cur)   # update global best\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return                          # no input\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))   # read exactly n numbers\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the smallest positive integer that does not appear in the list.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint the smallest positive integer not present in the list.\n\nConstraints:\n1 ≤ n ≤ 10^5\n−10^6 ≤ a_i ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # exactly n integers expected\n\n    # The smallest missing positive integer is at most n + 1\n    size = n + 2\n    present = [False] * size  # indices 0..n+1\n\n    for val in nums:\n        if 0 < val < size:\n            present[val] = True\n\n    for i in range(1, size):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding–window technique to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_pos = {}            # character -> last index seen\n    start = 0                # start index of current window\n    best = 0                 # best length found so far\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # Repeated character found inside current window; move the start\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = x if current + x < x else current + x\n        best = best if best > current else current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer — the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # equivalent to cur = max(x, cur + x)\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Calculate the number of distinct pairs of positive integers (a, b) such that a × b = n and a ≤ b.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of distinct pairs (a, b) satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    \n    limit = int(math.isqrt(n))      # floor(sqrt(n))\n    count = 0\n    \n    for d in range(1, limit + 1):\n        if n % d == 0:              # d is a divisor\n            count += 1              # (d, n//d) with d ≤ sqrt(n) automatically satisfies d ≤ n/d\n    \n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer representing the maximum length of a contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(arr):\n    last_pos = {}            # stores the most recent index of every value\n    left = 0                 # left end of the current window\n    best = 0                 # best window length found\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            # value already inside current window – shrink from the left\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:                       # no input\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer — the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of size n, determine if there exists a pair of distinct indices i and j such that nums[i] + nums[j] = k, where k is an integer provided as input.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\nThe next line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    target = k\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray_sum(arr):\n    \"\"\"Return the maximum sum over all contiguous sub-arrays of `arr`.\"\"\"\n    max_so_far = -10**18        # smaller than any possible sum\n    current_sum = 0\n    for value in arr:\n        current_sum = max(value, current_sum + value)\n        max_so_far = max(max_so_far, current_sum)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:                       # No input provided\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    result = kadane_max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers. Find the minimum number of operations required to make all elements equal, where in one operation you can increment or decrement any element by 1.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 2 × 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the minimum number of operations.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    arr.sort()\n    median = arr[n // 2]          # works for both even and odd n\n    total_ops = sum(abs(x - median) for x in arr)\n    \n    print(total_ops)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N distinct integers, determine the length of the longest increasing subsequence.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N distinct integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest increasing subsequence in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    arr = data[1:1 + n]\n\n    tails = []                              # tails[i] = smallest ending value of an LIS of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)  # first tail >= x\n        if idx == len(tails):               # x extends largest subsequence\n            tails.append(x)\n        else:                               # x could start/improve a smaller subsequence\n            tails[idx] = x\n\n    print(len(tails))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nSum of Odd Integers\nGiven an array of n integers, find the sum of all odd integers in the array. If there are no odd integers, print 0.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the sum of all odd integers in the array.\n\nConstraints:\n1 ≤ n ≤ 10^5\n−10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The remaining tokens are the array elements\n    # Avoid IndexError in case fewer elements than n are provided\n    arr = map(int, data[1:n+1])\n    \n    odd_sum = sum(x for x in arr if x & 1)   # x & 1 is faster than x % 2 != 0\n    # If no odd numbers, odd_sum will naturally be 0\n    print(odd_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sorted array of n integers and a target value k, determine whether there exist two distinct elements in the array that sum to k.\n\nInput:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9), sorted in non-decreasing order.\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    a = data[2:2 + n]\n\n    left, right = 0, n - 1\n    while left < right:\n        s = a[left] + a[right]\n        if s == k:\n            print(\"YES\")\n            return\n        if s < k:\n            left += 1\n        else:\n            right -= 1\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding window to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_pos = {}            # maps character -> its latest index\n    max_len = 0\n    window_start = 0         # left boundary of current window\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= window_start:\n            # Character repeated inside current window. Move start right after its last position.\n            window_start = last_pos[ch] + 1\n        last_pos[ch] = i\n        max_len = max(max_len, i - window_start + 1)\n\n    return max_len\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray of length k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read entire input at once and split by whitespace for speed.\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return  # No input\n    \n    # Parse n and k\n    n = int(data[0])\n    k = int(data[1])\n    \n    # Parse the array elements\n    a = list(map(int, data[2:2 + n]))\n    \n    # Compute the sum of the first window of size k\n    current_sum = sum(a[:k])\n    max_sum = current_sum\n    \n    # Slide the window across the array\n    for i in range(k, n):\n        current_sum += a[i] - a[i - k]  # Add new element, remove element that is no longer in window\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Output the result\n    print(max_sum)\n\n# Call main() as required\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. The subarray must contain at least one element.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer — the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    current_max = global_max = arr[0]\n    for value in arr[1:]:\n        current_max = max(value, current_max + value)\n        global_max = max(global_max, current_max)\n    \n    sys.stdout.write(str(global_max))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains at most two distinct characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer — the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    \"\"\"Return the length of the longest substring of `s`\n       that contains at most two distinct characters.\"\"\"\n    n = len(s)\n    if n <= 2:\n        return n\n    \n    left = 0\n    freq = defaultdict(int)\n    best = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # shrink window until it is valid\n        while len(freq) > 2:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                del freq[left_ch]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_substring_two_distinct(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if S is a palindrome (i.e., it reads the same forwards and backwards).\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 1000).\n\nOutput Format:\nPrint \"YES\" if S is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if s == s[::-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if there exists a pair of distinct elements whose sum is equal to a given integer k.\n\nInput:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, rooted at node 1. Each edge has a weight. Find the length of the longest simple path in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5), the number of nodes.\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nOutput a single integer: the length of the longest simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef farthest(start, adj):\n    \"\"\"Return (farthest_node, distance) from start using DFS stack.\"\"\"\n    stack = [(start, -1, 0)]              # (node, parent, dist_from_start)\n    far_node, far_dist = start, 0\n    while stack:\n        u, p, d = stack.pop()\n        if d > far_dist:\n            far_node, far_dist = u, d\n        for v, w in adj[u]:\n            if v != p:\n                stack.append((v, u, d + w))\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS/BFS from node 1 to find one end of the diameter\n    u, _ = farthest(1, adj)\n    # Second DFS/BFS from u to get the actual diameter length\n    _, dia = farthest(u, adj)\n\n    print(dia)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the smallest integer greater than n that is a palindrome.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the smallest palindrome greater than n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome(x: int) -> bool:\n    \"\"\"Check if an integer is a palindrome.\"\"\"\n    s = str(x)\n    return s == s[::-1]\n\ndef next_palindrome(n: int) -> int:\n    \"\"\"Return the smallest palindrome strictly greater than n.\"\"\"\n    candidate = n + 1\n    while not is_palindrome(candidate):\n        candidate += 1\n    return candidate\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    print(next_palindrome(n))\n\nif __name__ == '__main__':\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, find the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nOutput a single integer representing the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window to keep track of the most recent index at which\n    each character appeared. Whenever we see a repeat inside the\n    current window, we move the window’s left edge just after the\n    previous occurrence.\n    \"\"\"\n    last_pos = {}          # char -> latest index seen\n    left = 0               # current window left edge\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # 'ch' repeats inside the current window → shrink from left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the length of the longest subarray with all distinct elements.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    last_pos = {}          # value -> its most recent index\n    left = 0               # left boundary of the current window\n    best = 0               # length of the best window found\n    \n    for right, val in enumerate(arr):\n        # If val already seen inside current window, shrink window from the left\n        if val in last_pos and last_pos[val] >= left:\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # If the input might include more/less numbers than n we still safely slice\n    arr = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    max_so_far = -10**15  # smaller than any possible sum\n    current_sum = 0\n    for val in arr:\n        # Either extend the existing subarray or start new at current element\n        current_sum = max(val, current_sum + val)\n        max_so_far = max(max_so_far, current_sum)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the length of the longest contiguous subarray with all elements distinct.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray_length(arr):\n    last_pos = {}\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray_length(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the minimal number of elements to remove so that the remaining elements form a strictly increasing sequence.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 2000).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the minimal number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(seq):\n    \"\"\"\n    Returns the length of the Longest Strictly Increasing Subsequence (LIS)\n    using the classic patience-sorting / binary-search approach in O(N log N).\n    \"\"\"\n    tails = []                                # tails[i] = smallest tail of all LIS of length i+1\n    for x in seq:\n        idx = bisect.bisect_left(tails, x)    # first tail >= x   (strictly increasing => bisect_left)\n        if idx == len(tails):\n            tails.append(x)                   # extend LIS\n        else:\n            tails[idx] = x                    # improve existing tail\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    lis = lis_length(arr)\n    print(n - lis)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered from 1 to N), your task is to find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N−1 lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), denoting an edge between nodes u and v.\n\nOutput Format:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport collections\n\ndef bfs(start, adj, n):\n    \"\"\"\n    Breadth-first search returning the farthest node from `start`\n    and its distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    farthest = start\n    dq = collections.deque([start])\n\n    while dq:\n        v = dq.popleft()\n        for nxt in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + 1\n                dq.append(nxt)\n                if dist[nxt] > dist[farthest]:\n                    farthest = nxt\n    return farthest, dist[farthest]\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # 1st BFS to find one endpoint of the diameter\n    endpoint, _ = bfs(1, adj, n)\n    # 2nd BFS from that endpoint to get the diameter length\n    _, diameter = bfs(endpoint, adj, n)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum length of a substring of s with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    \"\"\"\n    last_pos = {}          # maps char -> last index seen\n    left = 0               # left boundary of sliding window\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window, move left just after its previous position\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value assigned to it. For every node, calculate the sum of values in its subtree.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers v_1, v_2, ..., v_N, where v_i is the value of node i (-10^4 ≤ v_i ≤ 10^4).\nEach of the next N-1 lines contains two integers u and v, denoting an edge between nodes u and v (1 ≤ u, v ≤ N).\n\nOutput Format:\nPrint N integers: the sum of values in the subtree of nodes 1 through N.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(200000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]      # 1-indexed\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        g[u].append(v)\n        g[v].append(u)\n\n    subtree = [0] * (n + 1)\n\n    def dfs(u: int, p: int) -> None:\n        subtotal = values[u]\n        for v in g[u]:\n            if v == p:\n                continue\n            dfs(v, u)\n            subtotal += subtree[v]\n        subtree[u] = subtotal\n\n    dfs(1, 0)\n\n    out = ' '.join(str(subtree[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S of length N, determine whether it is a palindrome. A palindrome is a string that reads the same forwards and backwards.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains a string S of length N consisting of lowercase English letters.\n\nOutput:\nPrint \"YES\" if S is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First meaningful line should contain N, second the string\n    # We don't really need N for the logic, but we read it to respect input format\n    if len(data) == 1:\n        # The string might be on the same line after N if input was \"N S\"\n        # Handle such edge-case robustly\n        first_line_parts = data[0].split()\n        if len(first_line_parts) == 1:\n            # Only N provided, no string – nothing to process\n            return\n        # If two parts: parts[0] = N, parts[1] = S\n        # If more than two parts, they belong to S (string can’t have spaces by statement though)\n        s = ''.join(first_line_parts[1:])\n    else:\n        s = data[1].strip()\n\n    if s == s[::-1]:\n        sys.stdout.write(\"YES\")\n    else:\n        sys.stdout.write(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all the even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\nThe second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).\n\nOutput:\nPrint a single integer representing the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])  # Only take the first n numbers in case of extra input\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N positive integers, find the minimum number of operations required to make all elements equal. In one operation, you can subtract 1 from any single element. Output the minimum number of operations.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer, the minimum number of operations.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    if n == 0:\n        print(0)\n        return\n    mn = min(nums)\n    operations = sum(x - mn for x in nums)\n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the smallest positive integer that does not appear in the list.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the smallest positive integer missing from the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:n+1])   # there will be exactly n numbers\n\n    positives = set()\n    for x in nums:\n        if x > 0:\n            positives.add(x)\n\n    # The answer cannot exceed n+1 (pigeon-hole principle)\n    candidate = 1\n    while candidate in positives:\n        candidate += 1\n\n    print(candidate)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine the number of connected components in the graph.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer: the number of connected components in the graph.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\nclass DSU:\n    __slots__ = ('parent', 'rank')\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # path compression\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> None:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        if self.rank[ra] < self.rank[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        if self.rank[ra] == self.rank[rb]:\n            self.rank[ra] += 1\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    dsu = DSU(n)\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        dsu.union(u, v)\n\n    roots = set()\n    for i in range(n):\n        roots.add(dsu.find(i))\n    print(len(roots))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, print all integers from 1 to n, but for multiples of 3 print \"Fizz\" instead of the number and for multiples of 5 print \"Buzz\". For numbers which are multiples of both 3 and 5, print \"FizzBuzz\".\n\nInput Format:\n- A single integer n (1 ≤ n ≤ 100)\n\nOutput Format:\n- Print n lines as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    try:\n        n = int(data)\n    except ValueError:\n        return\n    for i in range(1, n + 1):\n        if i % 15 == 0:\n            print(\"FizzBuzz\")\n        elif i % 3 == 0:\n            print(\"Fizz\")\n        elif i % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(i)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nLongest Unique Substring\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring without repeating characters.\n\nConstraints:\n1 ≤ |s| ≤ 10^5\ns consists of lowercase English letters only.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    \n    # For lowercase English letters we can use a fixed-size list\n    last_seen = [-1] * 26          # last_seen[i] = last index of character 'a' + i\n    start = 0                      # left boundary of current window\n    best = 0                       # best window length found so far\n    \n    for i, ch in enumerate(s):\n        idx = ord(ch) - 97         # map 'a'..'z' to 0..25\n        \n        # If character was seen in current window, move start right\n        if last_seen[idx] >= start:\n            start = last_seen[idx] + 1\n        \n        last_seen[idx] = i\n        best = max(best, i - start + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a pair of distinct elements whose sum is exactly K. Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single line: \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        k = int(next(it))\n    except StopIteration:\n        return\n\n    seen = set()\n    for _ in range(n):\n        try:\n            x = int(next(it))\n        except StopIteration:\n            break  # Fewer numbers than declared; not expected per constraints\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 100).\n- The second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000).\n\nOutput Format:\n- Output a single integer representing the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest subarray where the sum of the subarray is zero.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest subarray with sum zero.\n\nConstraints:\n1 ≤ n ≤ 10^5\n−10^9 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    prefix_to_first_index = {0: -1}        # prefix sum -> earliest index\n    prefix_sum = 0\n    max_len = 0\n    \n    for i, val in enumerate(arr):\n        prefix_sum += val\n        \n        if prefix_sum in prefix_to_first_index:\n            # A previous occurrence means the subarray between them sums to zero\n            max_len = max(max_len, i - prefix_to_first_index[prefix_sum])\n        else:\n            # Store the first time this prefix sum occurs\n            prefix_to_first_index[prefix_sum] = i\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    # Initialize with the first element to correctly handle all-negative arrays\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Convert next n tokens to integers\n    arr = list(map(int, data[1:1 + n]))\n    print(kadane(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a pair of elements whose sum is exactly K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 2×10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    arr = data[2:2 + n]\n\n    seen = set()\n    for num in arr:\n        complement = k - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the sum of all even numbers in nums.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])          # number of elements (may not be needed explicitly)\n    nums = map(int, data[1:1 + n])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window algorithm to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_seen = {}        # maps char -> its latest index\n    start = 0             # start index of current window\n    best = 0              # best (maximum) length found so far\n\n    for i, ch in enumerate(s):\n        # If we've seen this char and it's inside the current window,\n        # move the window's start just after that previous occurrence.\n        if ch in last_seen and last_seen[ch] >= start:\n            start = last_seen[ch] + 1\n\n        last_seen[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip(\"\\n\")\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points on a 2D plane, find the minimum Euclidean distance between any two distinct points.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n lines contains two integers x_i and y_i (−10^9 ≤ x_i, y_i ≤ 10^9).\n\nOutput:\nPrint the minimum distance with at least 6 decimal places of precision.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\n\ndef closest_pair(points):\n    \"\"\"\n    Returns the squared distance of the closest pair of points.\n    `points` must be sorted by x-coordinate before the first call.\n    \"\"\"\n\n    def rec(pts):\n        m = len(pts)\n        if m <= 3:                                      # brute-force\n            best = 10 ** 40\n            for i in range(m):\n                for j in range(i + 1, m):\n                    dx = pts[i][0] - pts[j][0]\n                    dy = pts[i][1] - pts[j][1]\n                    dist2 = dx * dx + dy * dy\n                    if dist2 < best:\n                        best = dist2\n            # return also the points sorted by y for merge step\n            return best, sorted(pts, key=lambda p: p[1])\n\n        mid = m // 2\n        mid_x = pts[mid][0]\n\n        d_left,   left_by_y  = rec(pts[:mid])\n        d_right,  right_by_y = rec(pts[mid:])\n        d = min(d_left, d_right)\n\n        # merge the two y-sorted halves\n        merged_by_y = []\n        i = j = 0\n        while i < len(left_by_y) and j < len(right_by_y):\n            if left_by_y[i][1] < right_by_y[j][1]:\n                merged_by_y.append(left_by_y[i])\n                i += 1\n            else:\n                merged_by_y.append(right_by_y[j])\n                j += 1\n        merged_by_y.extend(left_by_y[i:])\n        merged_by_y.extend(right_by_y[j:])\n\n        # build the strip (points whose x is within sqrt(d) of the division line)\n        strip = [p for p in merged_by_y if (p[0] - mid_x) * (p[0] - mid_x) < d]\n\n        # check each point against following points (at most 7 comparisons)\n        for k in range(len(strip)):\n            l = k + 1\n            while l < len(strip) and (strip[l][1] - strip[k][1]) ** 2 < d:\n                dx = strip[k][0] - strip[l][0]\n                dy = strip[k][1] - strip[l][1]\n                dist2 = dx * dx + dy * dy\n                if dist2 < d:\n                    d = dist2\n                l += 1\n\n        return d, merged_by_y\n\n    best_sq, _ = rec(points)\n    return best_sq\n\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 20)\n    it = iter(sys.stdin.read().strip().split())\n    try:\n        n = int(next(it))\n    except StopIteration:\n        return\n\n    pts = [(int(next(it)), int(next(it))) for _ in range(n)]\n    pts.sort()                       # sort by x, then y\n\n    # quick duplicate check\n    for i in range(1, n):\n        if pts[i] == pts[i - 1]:\n            print(\"0.000000\")\n            return\n\n    best_sq = closest_pair(pts)\n    print(f\"{math.sqrt(best_sq):.6f}\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring with all distinct characters.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5), the length of S.\nThe second line contains the string S.\n\nOutput:\nPrint a single integer: the length of the longest substring of S with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}               # Stores last index of each character\n    start = 0                   # Left border of current window\n    best = 0                    # Best length found so far\n    \n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # Current character repeats inside the window; move start\n            start = last_pos[ch] + 1\n        last_pos[ch] = i        # Update last position of current character\n        best = max(best, i - start + 1)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # The problem guarantees |S| == N, but we can safely trim/pad in case of extra spaces/newlines\n    s = s[:n]\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, find the length of the longest increasing subsequence.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    tail = []                                           # tail[i] -> minimum possible tail of an IS of length i+1\n    for num in arr:\n        idx = bisect.bisect_left(tail, num)             # first position where num could extend/replace\n        if idx == len(tail):\n            tail.append(num)                            # extend LIS\n        else:\n            tail[idx] = num                             # make potential future LIS smaller\n    print(len(tail))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if there exists a pair of distinct indices i, j such that a[i] + a[j] = k for a given integer k.\n\nInput:\nThe first line contains two integers n and k (2 ≤ n ≤ 2×10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and ai + aj is divisible by k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 1000).\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\n\nOutput:\nOutput a single integer — the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    cnt = [0] * k            # cnt[r] – how many numbers give remainder r\n    for _ in range(n):\n        val = int(next(it))\n        cnt[val % k] += 1\n\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    pairs += cnt[0] * (cnt[0] - 1) // 2\n\n    # If k is even, remainder k/2 also pairs with itself\n    if k % 2 == 0:\n        r = k // 2\n        pairs += cnt[r] * (cnt[r] - 1) // 2\n\n    # Other remainders: pair r with k-r (only need to process r < k-r)\n    for r in range(1, (k + 1) // 2):\n        pairs += cnt[r] * cnt[k - r]\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nTree Diameter\nGiven an undirected tree with n nodes (numbered 1 to n), find the length of the longest path between any two nodes in the tree. The length of a path is the number of edges it contains.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5), the number of nodes.\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer: the length of the longest path in the tree.\n\nConstraints:\n2 ≤ n ≤ 10^5\n1 ≤ u, v ≤ n\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"\n    Breadth-first search that returns the farthest node from `start`\n    together with its distance (number of edges).\n    \"\"\"\n    n = len(adj) - 1  # adjacency list is 1-indexed\n    dist = [-1] * (n + 1)\n    q = deque([start])\n    dist[start] = 0\n    far_node = start\n\n    while q:\n        v = q.popleft()\n        for nxt in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + 1\n                q.append(nxt)\n                if dist[nxt] > dist[far_node]:\n                    far_node = nxt\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS from arbitrary node (1) to find one endpoint of the diameter\n    endpoint, _ = bfs(1, adj)\n    # Second BFS from that endpoint to get the actual diameter length\n    _, diameter = bfs(endpoint, adj)\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m consisting of only '0's and '1's, find the number of distinct islands. An island is a group of connected '1's (horizontally or vertically). Two islands are considered distinct if their shapes are different.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 50).\nEach of the next n lines contains a string of length m, consisting only of '0' and '1'.\n\nOutput:\nPrint a single integer representing the number of distinct islands in the grid.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(10000)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    # flatten list after first two ints -> grid chars\n    raw = ''.join(data[2:])   # concatenate because each row may have no spaces\n    # But rows are given as separate tokens (no spaces) so join is fine\n    grid = [list(raw[i*m:(i+1)*m]) for i in range(n)]\n\n    visited = [[False]*m for _ in range(n)]\n    distinct_shapes = set()\n\n    def dfs(r0, c0, r, c, shape):\n        # record relative coordinate\n        shape.append((r - r0, c - c0))\n        visited[r][c] = True\n        for dr, dc in ((1,0),(-1,0),(0,1),(0,-1)):\n            nr, nc = r+dr, c+dc\n            if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == '1':\n                dfs(r0, c0, nr, nc, shape)\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1' and not visited[i][j]:\n                shape = []\n                dfs(i, j, i, j, shape)\n                # sort coordinates for canonical representation\n                shape.sort()\n                distinct_shapes.add(tuple(shape))\n\n    print(len(distinct_shapes))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine if you can rearrange the letters of s to form a palindrome. If possible, output \"YES\"; otherwise, output \"NO\".\n\nInput Format:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    s = sys.stdin.readline().strip()\n    freq = Counter(s)\n    odd = sum(1 for c in freq.values() if c % 2)\n    if odd <= 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, determine the minimum number of elements you need to remove so that the remaining array is strictly increasing.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns the length of the Longest Strictly Increasing Subsequence in arr\n    using O(n log n) patience sorting algorithm.\n    \"\"\"\n    tails = []                             # tails[i] -> smallest tail of LIS of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x) # first position with value >= x\n        if idx == len(tails):\n            tails.append(x)                # extend the LIS\n        else:\n            tails[idx] = x                 # improve existing subsequence tail\n    return len(tails)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    length_lis = lis_length(arr)\n    removals = n - length_lis\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Find the smallest positive integer x such that the sum of digits of x equals n.\n\nInput:\nA single integer n (1 ≤ n ≤ 1000).\n\nOutput:\nOutput a single integer — the smallest such x.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_number_with_digit_sum(n: int) -> str:\n    \"\"\"\n    Return the smallest positive integer (as string) whose digits sum to n.\n    \"\"\"\n    k, r = divmod(n, 9)       # k = how many full 9's, r = remaining sum (< 9)\n    if r:\n        return str(r) + '9' * k\n    else:\n        return '9' * k\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n    print(smallest_number_with_digit_sum(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Determine if it is possible to partition the array into two subsets with equal sum.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 100).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000).\n\nOutput Format:\nPrint 'YES' if such a partition exists, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(arr):\n    total = sum(arr)\n    if total & 1:                  # Odd total cannot be split equally\n        return False\n    target = total // 2\n\n    # Bitset trick: bit i of mask tells whether sum i is achievable\n    mask = 1                       # only sum 0 achievable at start\n    for num in arr:\n        mask |= mask << num        # add current number to all previous sums\n        if (mask >> target) & 1:   # early exit if target is reachable\n            return True\n    return False                   # target not reachable after processing all numbers\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    print('YES' if can_partition(arr) else 'NO')\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S is a palindrome (it reads the same forwards and backwards).\n\nInput Format:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" if S is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if s == s[::-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a positive weight, find the length of the longest path in the tree (the diameter).\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- The next N-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), denoting an edge between u and v with weight w.\n\nOutput Format:\n- Output a single integer, the length of the longest path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns the node that is farthest from `start` and the distance to it.\n    \"\"\"\n    distance = [-1] * (n + 1)\n    distance[start] = 0\n    q = deque([start])\n\n    far_node = start\n    max_dist = 0\n\n    while q:\n        u = q.pop()\n        for v, w in adj[u]:\n            if distance[v] == -1:\n                distance[v] = distance[u] + w\n                q.append(v)\n                if distance[v] > max_dist:\n                    max_dist = distance[v]\n                    far_node = v\n    return far_node, max_dist\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First pass: arbitrary start (node 1) to find one end of diameter\n    u, _ = farthest_node(1, adj, n)\n    # Second pass: from that end find actual diameter length\n    _, diameter = farthest_node(u, adj, n)\n\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring of S that contains no repeating characters.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput a single integer representing the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    \n    last_seen = {}        # character -> latest index\n    left = 0              # start index of current window\n    longest = 0\n    \n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # character repeated inside current window -> shrink from the left\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        longest = max(longest, right - left + 1)\n    \n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers and an integer K, find the number of contiguous subarrays whose sum is exactly K.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the number of contiguous subarrays whose sum is K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                      # no input\n\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n\n    prefix_sum = 0\n    subarrays_count = 0\n    freq = defaultdict(int)\n    freq[0] = 1                     # empty prefix to handle subarrays starting at index 0\n\n    for _ in range(N):\n        prefix_sum += int(next(it))\n        subarrays_count += freq[prefix_sum - K]\n        freq[prefix_sum] += 1\n\n    print(subarrays_count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Determine whether it is possible to rearrange the letters to form a palindrome. Print \"YES\" if possible and \"NO\" otherwise.\n\nInput:\nA single string s (1 ≤ |s| ≤ 10^5), containing only lowercase English letters.\n\nOutput:\nPrint \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for count in Counter(s).values() if count % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Find the length of the longest subsequence such that all elements are strictly increasing.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 2×10^4).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer, the length of the longest strictly increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    tails = []                       # tails[i] = smallest tail of an increasing subsequence of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)   # first tail >= x\n        if idx == len(tails):\n            tails.append(x)          # extend LIS\n        else:\n            tails[idx] = x           # improve existing subsequence tail\n\n    print(len(tails))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    # Ensure we only take the first n numbers in case of extra whitespace\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Kadane's algorithm\n    max_current = max_global = arr[0]\n    for x in arr[1:]:\n        max_current = max(x, max_current + x)\n        max_global = max(max_global, max_current)\n    \n    print(max_global)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum difference between any two elements such that the larger element comes after the smaller one.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the maximum difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Initialize minimum so far and maximum difference\n    min_so_far = arr[0]\n    max_diff = 0  # If no increasing pair exists, answer will stay 0\n    \n    for value in arr[1:]:\n        # Update maximum difference if current value - min_so_far is larger\n        if value - min_so_far > max_diff:\n            max_diff = value - min_so_far\n        \n        # Update minimum so far if current value is smaller\n        if value < min_so_far:\n            min_so_far = value\n    \n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if it is possible to rearrange the characters of S to form a palindrome. If possible, output \"YES\", otherwise output \"NO\".\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput a single line: \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can form a palindrome, False otherwise.\n    A string can be permuted into a palindrome iff at most one character has an odd count.\n    \"\"\"\n    odd_counts = sum(1 for c in Counter(s).values() if c & 1)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s of length n, determine the length of the longest substring that contains at most k distinct characters.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26).\nThe second line contains a string s of length n, consisting of lowercase English letters.\n\nOutput:\nPrint a single integer, the length of the longest such substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_k_distinct(s: str, k: int) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` containing\n    at most `k` distinct characters.\n    \"\"\"\n    if k == 0:\n        return 0\n    n = len(s)\n    left = 0\n    best = 0\n    freq = defaultdict(int)  # frequency of characters in current window\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n        # Shrink window until we have at most k distinct chars\n        while len(freq) > k:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n            left += 1\n        # Update best length\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    s = data[2] if len(data) > 2 else ''\n    # Safety check in case of trailing spaces/newlines\n    s = s[:n]\n    print(longest_substring_k_distinct(s, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum of any contiguous subarray. The subarray must contain at least one element.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer representing the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = x if max_ending_here + x < x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n vertices and m edges, determine whether the graph contains a cycle. If it does, print \"YES\", otherwise print \"NO\".\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 2×10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between vertices u and v.\n\nOutput Format:\nPrint \"YES\" if the graph contains a cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # path compression (halving)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False  # already connected, adding this edge forms a cycle\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n        return True\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if u == v or not union(u, v):\n            # self-loop or endpoints already connected ⇒ cycle\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size N x M, each cell containing either a \".\" (empty) or \"#\" (wall). Starting from the top-left cell (1,1), compute the number of distinct ways to reach the bottom-right cell (N,M), moving only right or down and not passing through walls. Output the answer modulo 10^9+7.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 1000).\nEach of the next N lines contains M characters, each either \".\" or \"#\".\n\nOutput Format:\nOutput a single integer: the number of ways modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    M = int(next(it))\n\n    grid = [list(next(it)) for _ in range(N)]\n\n    # If start or end is a wall, no paths exist\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # DP array for current row\n    dp = [0] * M\n    dp[0] = 1  # starting cell\n\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == '#':\n                dp[j] = 0     # Cannot stand on a wall\n            else:\n                if j > 0:\n                    dp[j] = (dp[j] + dp[j - 1]) % MOD\n                # For j == 0 we keep whatever came from above (already in dp[j])\n    print(dp[-1] % MOD)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x n grid of integers, find the maximum sum path from the top-left corner to the bottom-right corner, moving only right or down at each step.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 500).\n- The next n lines each contain n integers (−1000 ≤ grid[i][j] ≤ 1000).\n\nOutput Format:\n- Output a single integer: the maximum sum possible along such a path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    # We'll use a 1-dimensional DP array to keep memory small.\n    # dp[j] will store max sum to reach cell in current row, column j.\n    NEG_INF = -10**18\n    dp = [NEG_INF] * n\n    for i in range(n):\n        for j in range(n):\n            val = int(next(it))\n            if i == 0 and j == 0:\n                dp[j] = val               # starting cell\n            elif i == 0:\n                dp[j] = dp[j-1] + val     # first row, can only come from left\n            elif j == 0:\n                dp[j] = dp[j] + val       # first column, can only come from top (dp[j] holds previous row)\n            else:\n                dp[j] = max(dp[j], dp[j-1]) + val  # from top (old dp[j]) or left (dp[j-1])\n    # After processing all rows, dp[-1] contains answer\n    sys.stdout.write(str(dp[-1]))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Returns the maximum sum over all contiguous subarrays of `arr`.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = kadane_max_subarray(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring with all distinct characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer: the length of the longest substring with no repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring of s where all characters are distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}                     # character -> last index seen\n    left = 0                          # left bound of sliding window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Duplicate inside current window -> move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right          # update last seen position\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = x if current + x < x else current + x\n        best = best if best > current else current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains at most K distinct characters.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 26).\nThe second line contains the string S of length N.\n\nOutput Format:\nPrint a single integer: the maximum length of a substring with at most K distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_k_distinct(s: str, k: int) -> int:\n    if k == 0:\n        return 0\n    freq = defaultdict(int)\n    left = 0\n    max_len = 0\n    distinct = 0\n\n    for right, ch in enumerate(s):\n        if freq[ch] == 0:\n            distinct += 1\n        freq[ch] += 1\n\n        while distinct > k:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                distinct -= 1\n            left += 1\n\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else ''\n    print(longest_substring_k_distinct(s, k))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, rooted at node 1. Each edge has a weight. For each node, compute the sum of distances from that node to all other nodes in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 2×10^5), the number of nodes.\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), meaning there is an edge between u and v with weight w.\n\nOutput:\nPrint n integers. The i-th integer should be the sum of distances from node i to all other nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 20)          # enough for n ≤ 2·10^5\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    subtree = [0] * (n + 1)     # sizes of sub-trees\n    dist    = [0] * (n + 1)     # distance from root (node 1)\n\n    # first DFS: collect subtree sizes and distances from root\n    def dfs1(u: int, p: int) -> None:\n        subtree[u] = 1\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            dist[v] = dist[u] + w\n            dfs1(v, u)\n            subtree[u] += subtree[v]\n\n    dfs1(1, 0)\n\n    # sum of distances from root to all nodes\n    ans = [0] * (n + 1)\n    ans[1] = sum(dist[1:])\n\n    # second DFS: rerooting DP to compute answers for every node\n    def dfs2(u: int, p: int) -> None:\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            # moving root from u to v\n            ans[v] = ans[u] + (n - 2 * subtree[v]) * w\n            dfs2(v, u)\n\n    dfs2(1, 0)\n\n    sys.stdout.write(' '.join(str(ans[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a weighted, undirected graph with n nodes and m edges, compute the minimum cost to travel from node 1 to node n. If there is no path, print -1.\n\nInput:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), representing an edge between u and v with weight w.\n\nOutput:\nPrint a single integer, the minimum cost, or -1 if no path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]  # (distance, node)\n    while pq:\n        d, node = heapq.heappop(pq)\n        if d != dist[node]:\n            continue\n        if node == n:\n            break\n        for nei, wt in adj[node]:\n            nd = d + wt\n            if nd < dist[nei]:\n                dist[nei] = nd\n                heapq.heappush(pq, (nd, nei))\n\n    print(-1 if dist[n] == INF else dist[n])\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the largest sum of any contiguous subarray. Print the sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the largest sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    \"\"\"\n    Returns the maximum sum of any contiguous sub-array.\n    Works in O(n) time and O(1) extra space.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # cur = max(x, cur+x)\n        best = best if best > cur else cur    # best = max(best, cur)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Convert the next n tokens to ints\n    arr = list(map(int, data[1:1 + n]))\n    # In case fewer numbers than declared, slice protects.\n    print(kadane(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring with no repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer, the length of the longest substring without repeating characters.\n\nConstraints:\n- 1 ≤ |s| ≤ 10^5\n- s consists only of lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substr_length(s: str) -> int:\n    # Array to store last positions of characters (only lowercase letters a-z)\n    last_pos = [-1] * 26\n    left = 0               # left boundary of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97   # map 'a'..'z' -> 0..25\n        if last_pos[idx] >= left:\n            # Character repeated inside current window; move left pointer\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substr_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S consisting of lowercase English letters, determine if you can rearrange the letters of S to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 1000).\n\nOutput Format:\nOutput a single line, either \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters in s can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for count in Counter(s).values() if count % 2)\n    # A palindrome can have at most one character with an odd frequency\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of lowercase English letters. Determine whether it is possible to rearrange the letters of S to form a palindrome. Print \"YES\" if possible, otherwise print \"NO\".\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    \n    # Count occurrences of each character\n    freq = Counter(s)\n    \n    # Count how many characters appear an odd number of times\n    odd_count = sum(1 for cnt in freq.values() if cnt % 2)\n    \n    # A palindrome permutation is possible if at most one character\n    # has an odd frequency.\n    print(\"YES\" if odd_count <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer array A of length N and an integer K. Find the minimum length of a contiguous subarray whose sum is at least K. If no such subarray exists, output -1.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the length of the shortest such subarray, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    arr = [int(next(it)) for _ in range(n)]\n\n    # Two–pointer / sliding–window because all A_i are positive\n    left = 0\n    current_sum = 0\n    best = n + 1          # larger than any possible length\n\n    for right in range(n):\n        current_sum += arr[right]\n\n        # shrink window from the left while the sum is still ≥ K\n        while current_sum >= k:\n            best = min(best, right - left + 1)\n            current_sum -= arr[left]\n            left += 1\n\n    print(best if best <= n else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of N integers, determine if it is possible to partition the sequence into two subsets with equal sum.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 100).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000).\n\nOutput Format:\nPrint \"YES\" if it is possible to partition the sequence into two subsets with equal sum, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, cannot split into two equal parts\n    if total & 1:\n        return False\n    \n    target = total // 2\n    # Bitset trick: dp bit i is 1 if some subset sums to i\n    dp = 1  # only sum 0 is reachable initially\n    for num in nums:\n        dp |= dp << num          # add current number to all existing sums\n        dp &= (1 << (target+1)) - 1   # we only care up to target\n        if (dp >> target) & 1:   # early exit if target reachable\n            return True\n    return False\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray. The subarray must contain at least one element.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Kadane's algorithm\n    current_max = global_max = arr[0]\n    for x in arr[1:]:\n        current_max = x if current_max + x < x else current_max + x\n        if current_max > global_max:\n            global_max = current_max\n\n    print(global_max)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine if you can rearrange the characters of s to form a palindrome.\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint \"YES\" if it is possible to rearrange the string into a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    # Count how many characters have odd frequency\n    odd_counts = sum(freq & 1 for freq in Counter(s).values())\n    # A palindrome can have at most one character with an odd count\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the index of the first occurrence of a given target value. If the target does not exist in the array, return -1.\n\nInput Format:\n- The first line contains two integers n and t (1 ≤ n ≤ 10^5, -10^9 ≤ t ≤ 10^9), the number of elements and the target value.\n- The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the index (0-based) of the first occurrence of t, or -1 if t is not present.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    t = int(data[1])\n    # The next n items are the array\n    arr = list(map(int, data[2:2 + n]))\n    \n    # Find first occurrence\n    try:\n        idx = arr.index(t)\n        print(idx)\n    except ValueError:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value. Find the maximum value that can be obtained by selecting a subset of nodes such that no two selected nodes are directly connected.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^4), where v_i is the value of the i-th node.\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer — the maximum sum as described.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]   # 1-indexed\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp0 = [0] * (n + 1)   # node not selected\n    dp1 = [0] * (n + 1)   # node selected\n\n    def dfs(u: int, parent: int) -> None:\n        dp1[u] = values[u]   # include this node\n        for v in adj[u]:\n            if v == parent:\n                continue\n            dfs(v, u)\n            dp0[u] += max(dp0[v], dp1[v])\n            dp1[u] += dp0[v]\n\n    dfs(1, 0)\n    print(max(dp0[1], dp1[1]))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the smallest positive integer that does not appear in the list.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^6 ≤ a_i ≤ 10^6).\n\nOutput Format:\nPrint a single integer: the smallest positive integer not present in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    # The smallest missing positive integer is at most n + 1.\n    size = n + 2                      # indices 0..n+1\n    present = [False] * size\n\n    for x in nums:\n        if 1 <= x < size:\n            present[x] = True\n\n    for i in range(1, size):\n        if not present[i]:\n            print(i)\n            return\n\n# call the main function\nmain()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine whether the graph is bipartite.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between u and v.\n\nOutput:\nPrint \"YES\" if the graph is bipartite, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, edges):\n    \"\"\"Return True if the undirected graph is bipartite.\"\"\"\n    adj = [[] for _ in range(n + 1)]\n\n    for u, v in edges:\n        if u == v:          # self-loop → definitely not bipartite\n            return False\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * (n + 1)  # -1 = unvisited, 0 / 1 = two colors\n\n    for start in range(1, n + 1):\n        if color[start] != -1:\n            continue\n        # start BFS from this component\n        color[start] = 0\n        q = deque([start])\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    q.append(v)\n                elif color[v] == color[u]:    # conflict\n                    return False\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    edges = [(int(next(it)), int(next(it))) for _ in range(m)]\n\n    print(\"YES\" if is_bipartite(n, edges) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the minimum length of a contiguous subarray such that the sum is at least s. If there is no such subarray, output 0.\n\nInput:\nThe first line contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the length of the shortest subarray with sum at least s, or 0 if no such subarray exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = int(data[1])\n    a = list(map(int, data[2:2 + n]))\n    \n    INF = n + 1           # any value larger than possible answer\n    min_len = INF\n    current_sum = 0\n    left = 0\n    \n    for right in range(n):\n        current_sum += a[right]\n        \n        # Shrink window from the left while it still meets the requirement\n        while current_sum >= s:\n            min_len = min(min_len, right - left + 1)\n            current_sum -= a[left]\n            left += 1\n\n    print(0 if min_len == INF else min_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, count the number of pairs (i, j) such that i < j and A_i + A_j is divisible by K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^3).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the number of pairs satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    \n    # frequency array for remainders 0..K-1\n    freq = [0] * K\n    for _ in range(N):\n        val = int(next(it))\n        freq[val % K] += 1\n    \n    # count pairs\n    pairs = 0\n    \n    # remainder 0 pairs with itself\n    c0 = freq[0]\n    pairs += c0 * (c0 - 1) // 2\n    \n    # remainders 1..K//2 pair with K - r\n    for r in range(1, (K + 1) // 2):\n        pairs += freq[r] * freq[K - r]\n    \n    # If K even, handle remainder K/2 separately (pairs within itself)\n    if K % 2 == 0:\n        ck = freq[K // 2]\n        pairs += ck * (ck - 1) // 2\n    \n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of distinct elements that sum up to a given target value k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\n- The second line contains n integers a[i] (-10^9 ≤ a[i] ≤ 10^9).\n\nOutput Format:\n- Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^9 ≤ a[i], k ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        if (k - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nMinimum Number of Jumps\nYou are given an array of n positive integers a_1, a_2, ..., a_n. Starting from the first index, each value a_i represents your maximum jump length from that position. Determine the minimum number of jumps required to reach the last index. If it is not possible to reach the end, print -1.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\nPrint a single integer: the minimum number of jumps to reach the last index, or -1 if impossible.\n\nConstraints:\n1 ≤ n ≤ 10^5\n1 ≤ a_i ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_jumps(arr):\n    n = len(arr)\n    if n == 1:\n        return 0                    # already at the last index\n\n    jumps = 0                       # number of jumps made so far\n    current_end = 0                 # farthest index reachable with current number of jumps\n    furthest = 0                    # farthest index reachable with one more step within current range\n\n    for i in range(n - 1):          # we never need to jump from the last index\n        furthest = max(furthest, i + arr[i])\n\n        # If we have come to the end of the current jump's range,\n        # we must make another jump\n        if i == current_end:\n            if furthest == current_end:   # cannot move any further\n                return -1\n            jumps += 1\n            current_end = furthest\n            if current_end >= n - 1:      # can reach or pass the last index\n                return jumps\n\n    return -1 if current_end < n - 1 else jumps\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n + 1]))\n    print(min_jumps(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the smallest integer k such that the sum 1 + 2 + ... + k ≥ n. Print k.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^9).\n\nOutput:\nPrint a single integer k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # Using the inequality k(k+1)/2 >= n  =>  k^2 + k - 2n >= 0\n    # Solve the quadratic and take the ceiling of the positive root.\n    # We employ integer arithmetic with math.isqrt to stay exact.\n    s = math.isqrt(1 + 8 * n)          # floor(sqrt(1 + 8n))\n    k = (s - 1) // 2                   # this is ⌊(-1 + √(1+8n)) / 2⌋\n\n    # k might be one step too small; adjust if necessary\n    while k * (k + 1) // 2 < n:\n        k += 1\n\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, determine if any two distinct elements in nums sum up to target. Output 'YES' if such a pair exists, otherwise output 'NO'.\n\nInput:\nThe first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).\nThe second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput:\nOutput 'YES' if there are two distinct elements whose sum is target, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for num in nums:\n        complement = target - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the number of distinct pairs (i, j) such that i < j and a_i + a_j is divisible by k.\n\nInput:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n\n    # Frequency of each remainder modulo k\n    rem_count = Counter(a % k for a in arr)\n\n    pairs = 0\n\n    # Remainder 0 pairs with itself\n    zero_cnt = rem_count.get(0, 0)\n    pairs += zero_cnt * (zero_cnt - 1) // 2\n\n    # Handle remainders 1..k//2\n    # Each r pairs with k-r (only count once), except when k is even\n    # and r == k/2, which also pairs with itself.\n    upper = k // 2\n    for r in range(1, upper + 1):\n        s = k - r\n        if r == s:                           # only possible when k even and r == k/2\n            cnt = rem_count.get(r, 0)\n            pairs += cnt * (cnt - 1) // 2\n        else:\n            pairs += rem_count.get(r, 0) * rem_count.get(s, 0)\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers A and B, find the number of integers X such that A ≤ X ≤ B and the sum of digits of X is a prime number.\n\nInput Format:\nThe first line contains two integers A and B (1 ≤ A ≤ B ≤ 10^6).\n\nOutput Format:\nPrint a single integer: the count of such integers X.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    A, B = map(int, data[:2])\n\n    # Pre–compute primality for all possible digit–sums (0 … 63)\n    MAX_DIGIT_SUM = 63        # 9 * 7  (since B ≤ 1 000 000)\n    prime = [False]*(MAX_DIGIT_SUM+1)\n    for n in range(2, MAX_DIGIT_SUM+1):\n        is_p = True\n        for d in range(2, int(n**0.5)+1):\n            if n % d == 0:\n                is_p = False\n                break\n        prime[n] = is_p\n\n    def digit_sum(x: int) -> int:\n        s = 0\n        while x:\n            s += x % 10\n            x //= 10\n        return s\n\n    cnt = 0\n    for x in range(A, B+1):\n        if prime[digit_sum(x)]:\n            cnt += 1\n\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array a of n positive integers. For each i from 1 to n, output the greatest common divisor (GCD) of all elements of the array except a[i].\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9).\n\nOutput:\nOutput n integers: the i-th integer is the GCD of all elements except a[i].\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    prefix = [0] * n\n    suffix = [0] * n\n\n    # Build prefix GCDs\n    g = 0\n    for i in range(n):\n        g = math.gcd(g, a[i])\n        prefix[i] = g\n\n    # Build suffix GCDs\n    g = 0\n    for i in range(n - 1, -1, -1):\n        g = math.gcd(g, a[i])\n        suffix[i] = g\n\n    # Compute answer for every position\n    out = []\n    for i in range(n):\n        if i == 0:\n            ans = suffix[1]\n        elif i == n - 1:\n            ans = prefix[n - 2]\n        else:\n            ans = math.gcd(prefix[i - 1], suffix[i + 1])\n        out.append(str(ans))\n\n    sys.stdout.write(\" \".join(out))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sorted array of n integers and a target integer k, determine whether there exist two distinct indices i and j such that a_i + a_j = k.\n\nInput:\nThe first line contains two integers n and k (2 ≤ n ≤ 10^5, |k| ≤ 10^9).\nThe second line contains n integers a_1, ..., a_n (−10^9 ≤ a_i ≤ 10^9), sorted in non-decreasing order.\n\nOutput:\nPrint \"YES\" if such a pair exists, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    a = list(map(int, data[2:2 + n]))\n\n    left, right = 0, n - 1\n    while left < right:\n        s = a[left] + a[right]\n        if s == k:\n            print(\"YES\")\n            return\n        if s < k:\n            left += 1\n        else:\n            right -= 1\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether the string is a palindrome.\n\nInput: The first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string. The second line contains the string S of length N.\n\nOutput: Output \"YES\" if S is a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    \n    # Direct palindrome check using slicing\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes, where each edge has a weight, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), describing an edge between node u and v with weight w.\n\nOutput:\nOutput a single integer — the length of the tree's diameter.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start: int, adj: list) -> tuple:\n    \"\"\"\n    Return the (node, distance) that is farthest from `start`.\n    Runs in O(n) because the graph is a tree (n‒1 edges).\n    Uses an explicit stack to avoid Python's recursion limit.\n    \"\"\"\n    stack = [(start, -1, 0)]          # (current, parent, distance_from_start)\n    far_node, far_dist = start, 0\n\n    while stack:\n        node, parent, dist = stack.pop()\n        if dist > far_dist:\n            far_node, far_dist = node, dist\n        for nxt, w in adj[node]:\n            if nxt != parent:\n                stack.append((nxt, node, dist + w))\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]   # 1-based indexing\n\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st DFS/BFS: from arbitrary node (1) to find one endpoint of diameter\n    end1, _ = farthest(1, adj)\n\n    # 2nd DFS/BFS: from that endpoint to get diameter length\n    _, diameter = farthest(end1, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array of length N, determine if it is possible to make the array strictly increasing by removing at most one element.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput \"YES\" if it is possible, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_be_strictly_increasing(arr):\n    n = len(arr)\n    violation_index = -1          # position where the first non-increasing pair appears\n\n    for i in range(1, n):\n        if arr[i] <= arr[i - 1]:\n            if violation_index != -1:        # second violation → impossible\n                return False\n            violation_index = i\n\n    if violation_index == -1:                # already strictly increasing\n        return True\n\n    i = violation_index\n\n    # Option 1: remove arr[i-1]\n    option1 = (i == 1 or arr[i] > arr[i - 2])\n\n    # Option 2: remove arr[i]\n    option2 = (i == n - 1 or arr[i + 1] > arr[i - 1])\n\n    return option1 or option2\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n + 1]))\n\n    print(\"YES\" if can_be_strictly_increasing(arr) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the minimum number of moves required to make all elements equal. In one move, you can increment or decrement any one element by 1.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # The optimal target value is any median of the array.\n    nums.sort()\n    median = nums[n // 2]          # works for both odd and even n\n    moves = sum(abs(x - median) for x in nums)\n\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given Q queries. Each query gives you an integer X. For each X, print the number of distinct prime divisors of X.\n\nInput:\nThe first line contains a single integer Q (1 ≤ Q ≤ 10^4).\nEach of the next Q lines contains an integer X (2 ≤ X ≤ 10^6).\n\nOutput:\nFor each query, print a single integer: the number of distinct prime divisors of X.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\nMAX_N = 10**6\n\ndef build_spf(limit: int):\n    \"\"\"\n    Builds an array `spf` (smallest prime factor) for every number up to `limit`.\n    spf[n] = the smallest prime that divides n (spf[1] = 1 by convention)\n    \"\"\"\n    spf = [0] * (limit + 1)\n    spf[1] = 1\n    for i in range(2, limit + 1):\n        if spf[i] == 0:                # `i` is prime\n            spf[i] = i\n            step = i\n            start = i * i              # start striking from i^2\n            if start > limit:\n                continue\n            for j in range(start, limit + 1, step):\n                if spf[j] == 0:\n                    spf[j] = i\n    return spf\n\n\ndef count_distinct_prime_factors(x: int, spf) -> int:\n    \"\"\"\n    Returns the number of distinct prime factors of x using the `spf` array.\n    \"\"\"\n    count = 0\n    while x > 1:\n        prime = spf[x]\n        count += 1\n        while x % prime == 0:\n            x //= prime\n    return count\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    q = int(data[0])\n    xs = list(map(int, data[1:1 + q]))\n    \n    spf = build_spf(MAX_N)\n    \n    out_lines = []\n    for x in xs:\n        out_lines.append(str(count_distinct_prime_factors(x, spf)))\n    \n    sys.stdout.write(\"\\n\".join(out_lines))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a binary string s, find the minimum number of flips (changing a '0' to '1' or vice versa) required to make the string alternating (i.e., no two adjacent characters are the same).\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5) consisting of only '0' and '1'.\n\nOutput:\nOutput a single integer: the minimum number of flips needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_flips_to_alternate(s: str) -> int:\n    \"\"\"\n    Calculates the minimum flips needed to make the binary string `s`\n    alternating (no two adjacent characters equal).\n    \"\"\"\n    # Pattern 1: starts with '0'  -> 010101...\n    # Pattern 2: starts with '1'  -> 101010...\n    flips_start_with_0 = 0\n    flips_start_with_1 = 0\n\n    for i, ch in enumerate(s):\n        expected_if_0 = '0' if i % 2 == 0 else '1'\n        expected_if_1 = '1' if i % 2 == 0 else '0'\n\n        if ch != expected_if_0:\n            flips_start_with_0 += 1\n        if ch != expected_if_1:\n            flips_start_with_1 += 1\n\n    return min(flips_start_with_0, flips_start_with_1)\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(min_flips_to_alternate(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points on a plane, determine the number of distinct lines that pass through at least two of the points.\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 300).\nEach of the next n lines contains two integers x_i and y_i (|x_i|, |y_i| ≤ 10^6), the coordinates of the i-th point.\nOutput:\nPrint a single integer — the number of distinct lines passing through at least two given points.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef normalize_line(x1, y1, x2, y2):\n    \"\"\"\n    Return a canonical (A, B, C) representation for the line\n    that passes through (x1, y1) and (x2, y2).\n\n    The canonical form is:\n        A * x + B * y + C = 0\n    such that:\n        - gcd(|A|, |B|, |C|) == 1\n        - A > 0, or A == 0 and B > 0\n    \"\"\"\n    dx = x2 - x1\n    dy = y2 - y1\n    # Coefficients before normalisation\n    A = dy\n    B = -dx\n    C = -(A * x1 + B * y1)\n\n    # Make them coprime\n    g = math.gcd(abs(A), abs(B))\n    g = math.gcd(g, abs(C))\n    if g:\n        A //= g\n        B //= g\n        C //= g\n\n    # Fix the sign for uniqueness\n    if A < 0 or (A == 0 and B < 0):\n        A, B, C = -A, -B, -C\n    return (A, B, C)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    pts = [(int(next(it)), int(next(it))) for _ in range(n)]\n\n    lines = set()\n    for i in range(n):\n        x1, y1 = pts[i]\n        for j in range(i + 1, n):\n            x2, y2 = pts[j]\n            # Skip identical points (do not define a line)\n            if x1 == x2 and y1 == y2:\n                continue\n            lines.add(normalize_line(x1, y1, x2, y2))\n\n    print(len(lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    last_pos = {}          # value -> last index it appeared at\n    left = 0               # current window's left border\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1   # shrink window past the duplicate\n        last_pos[value] = right\n        current_len = right - left + 1\n        if current_len > best:\n            best = current_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nCounting Pairs with Sum Divisible by K\nGiven an array of n integers and a positive integer k, count the number of pairs (i, j) (1 ≤ i < j ≤ n) such that (a_i + a_j) is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^4).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the number of valid pairs.\n\nConstraints:\n1 ≤ n ≤ 10^5\n1 ≤ k ≤ 10^4\n1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:]))\n\n    # Count occurrences of each remainder\n    cnt = [0] * k\n    for x in nums:\n        cnt[x % k] += 1\n\n    # Pairs whose both elements leave remainder 0\n    pairs = cnt[0] * (cnt[0] - 1) // 2\n\n    # Pairs of complementary remainders r and k-r (handle r < k-r only once)\n    for r in range(1, (k + 1) // 2):\n        pairs += cnt[r] * cnt[k - r]\n\n    # If k is even, handle the special remainder k/2\n    if k % 2 == 0:\n        pairs += cnt[k // 2] * (cnt[k // 2] - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with N nodes and M edges, determine if the graph contains a cycle.\n\nInput Format:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing an edge between node u and node v.\n\nOutput Format:\nOutput \"YES\" if the graph contains at least one cycle, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Disjoint Set Union (Union-Find) implementation\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    def find(x: int) -> int:\n        # Path compression\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(x: int, y: int) -> bool:\n        # Returns True if merged, False if x and y were already connected\n        rx, ry = find(x), find(y)\n        if rx == ry:\n            return False           # cycle detected\n        # Union by rank\n        if rank[rx] < rank[ry]:\n            parent[rx] = ry\n        elif rank[rx] > rank[ry]:\n            parent[ry] = rx\n        else:\n            parent[ry] = rx\n            rank[rx] += 1\n        return True\n\n    # Process edges and detect a cycle on the fly\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if not union(u, v):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given n distinct integers. Find the number of unordered pairs (i, j) such that the greatest common divisor (GCD) of a_i and a_j is 1.\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 2000).\nThe second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint a single integer: the number of unordered coprime pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    coprime_pairs = 0\n    for i in range(n):\n        ai = nums[i]\n        for j in range(i + 1, n):\n            if math.gcd(ai, nums[j]) == 1:\n                coprime_pairs += 1\n    print(coprime_pairs)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s.\n\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains no\n    repeating characters using a sliding-window approach.\n    \"\"\"\n    last_pos = {}          # maps character -> its most recent index in the window\n    left = 0               # left border of the current window\n    best = 0               # best window length found so far\n\n    for right, ch in enumerate(s):\n        # If character appeared inside current window, move left pointer\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        # Update / insert current character position\n        last_pos[ch] = right\n        # Update the answer\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line: length of string (can be ignored apart from validation)\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else ''\n    # Optional defensive trim in case input contains trailing spaces/newlines\n    s = s[:n]\n\n    result = longest_unique_substring(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters.\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    # Read the input string (possibly with trailing newline)\n    s = sys.stdin.readline().strip()\n\n    last_seen = {}        # stores latest index of each character\n    start = 0             # left boundary of current window\n    max_len = 0           # answer to maintain\n\n    for i, ch in enumerate(s):\n        # If character already seen within current window, move start\n        if ch in last_seen and last_seen[ch] >= start:\n            start = last_seen[ch] + 1\n\n        last_seen[ch] = i\n        max_len = max(max_len, i - start + 1)\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput: The first line contains an integer N (1 ≤ N ≤ 10^5). The second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput: Output a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm: O(N) time, O(1) space.\"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at x\n        max_ending_here = max(x, max_ending_here + x)\n        # Record the best seen so far\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:                        # no input safety\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))  # ensure only n elements read\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a matrix of size n × m filled with integers. You may move either right or down from each cell. Find the maximum sum path from the top-left corner to the bottom-right corner of the matrix.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains m integers (−1000 ≤ a_{i,j} ≤ 1000).\n\nOutput:\nOutput a single integer — the maximum sum achievable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, m = data[0], data[1]\n    vals = data[2:]\n\n    # Rolling 1-dimensional DP array – dp[j] stores the best sum to reach column j in current row\n    dp = [-10**18] * m          # initialise with very small numbers\n    idx = 0                     # pointer inside vals list\n\n    for i in range(n):\n        for j in range(m):\n            v = vals[idx]\n            idx += 1\n            if i == 0 and j == 0:             # starting cell\n                dp[j] = v\n            elif i == 0:                      # first row – can only come from the left\n                dp[j] = dp[j-1] + v\n            elif j == 0:                      # first column – can only come from above\n                dp[j] = dp[j] + v             # dp[j] still holds value from the previous row\n            else:                             # choose max of coming from left or from above\n                dp[j] = max(dp[j], dp[j-1]) + v\n\n    sys.stdout.write(str(dp[-1]))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, find the minimum number of edges that must be removed to make the graph acyclic (i.e., a forest).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer: the minimum number of edges to remove.\n\nConstraints:\n1 ≤ n ≤ 10^5\n0 ≤ m ≤ 2×10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    \"\"\"Disjoint Set Union / Union-Find structure.\"\"\"\n    __slots__ = ('parent', 'size', 'components')\n\n    def __init__(self, n: int):\n        self.parent = list(range(n + 1))\n        self.size = [1] * (n + 1)\n        self.components = n          # starts with every node in its own component\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # path compression\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> None:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        if self.size[ra] < self.size[rb]:     # union by size\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        self.components -= 1                 # merged two different components\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    dsu = DSU(n)\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        dsu.union(u, v)\n\n    # Minimum edges to remove = m - (n - number_of_components)\n    answer = m - n + dsu.components\n    sys.stdout.write(str(answer))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    without repeating characters.\n    \"\"\"\n    last_pos = {}            # maps character -> last index seen\n    start = 0                # start index of current window\n    best = 0                 # best length found\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # character repeated inside current window -> move start\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nThere are N cities connected by M bidirectional roads. Each road connects two cities and has a positive length. Find the length of the shortest path from city 1 to city N. If there is no path, output -1.\n\nInput Format:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains three integers u, v, w, denoting a road between cities u and v of length w (1 ≤ u,v ≤ N; 1 ≤ w ≤ 10^9).\n\nOutput Format:\nOutput a single integer representing the shortest path length from city 1 to city N, or -1 if no such path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    # Read all input at once for speed\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    it = iter(data)\n    n = next(it)          # number of cities\n    m = next(it)          # number of roads\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]                        # (distance, node)\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue                     # stale entry\n        if u == n:                       # reached destination\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    print(-1 if dist[n] == INF else dist[n])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_index = {}          # stores most recent position of each value\n    left = 0                 # left end of the current window\n    best = 0                 # best (maximum) length found so far\n\n    for right, value in enumerate(arr):\n        # If value already seen inside current window, shrink window from the left\n        if value in last_index and last_index[value] >= left:\n            left = last_index[value] + 1\n        # Record current index of the value\n        last_index[value] = right\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value. Find the maximum sum of values along any path from the root to a leaf.\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nThe second line contains N integers v_1, v_2, ..., v_N (|v_i| ≤ 10^4), the values of the nodes.\nEach of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge of the tree.\n\nOutput Format:\nOutput a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(200000)          # safeguard for deep recursions\n    read = sys.stdin.readline\n\n    N = int(read().strip())\n    values = [0] + list(map(int, read().split()))   # 1-based indexing\n\n    adj = [[] for _ in range(N + 1)]\n    for _ in range(N - 1):\n        u, v = map(int, read().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    max_sum = -10 ** 18                       # smaller than minimal possible sum\n    stack = [(1, 0, values[1])]               # (node, parent, sum up to node)\n\n    while stack:\n        node, parent, cur_sum = stack.pop()\n\n        # A leaf is any non-root node with only one neighbour,\n        # or the root when it has no children (N == 1 case, not possible here)\n        if node != 1 and len(adj[node]) == 1:\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n\n        for nei in adj[node]:\n            if nei != parent:\n                stack.append((nei, node, cur_sum + values[nei]))\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each edge has an integer weight. Find the length of the longest path in the tree (the tree's diameter).\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N−1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), denoting an edge between u and v of weight w.\n\nOutput:\nOutput a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: adj[u] -> list of (v, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # helper that returns (farthest_node, distance) from start\n    def farthest(start: int):\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        stack = [start]\n\n        while stack:\n            node = stack.pop()\n            d = dist[node]\n            for nb, w in adj[node]:\n                if dist[nb] == -1:           # not visited\n                    dist[nb] = d + w\n                    stack.append(nb)\n\n        # find the node with the maximum distance\n        far_node = start\n        max_dist = 0\n        for i in range(1, n + 1):\n            if dist[i] > max_dist:\n                max_dist = dist[i]\n                far_node = i\n        return far_node, max_dist\n\n    # first DFS/BFS to find one end of the diameter\n    end1, _ = farthest(1)\n    # second DFS/BFS from that end to get the diameter length\n    _, diameter = farthest(end1)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in nums.\nThe second line contains n integers, the elements of nums (-10^4 ≤ nums[i] ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    best = curr = nums[0]\n    for x in nums[1:]:\n        curr = x if curr + x < x else curr + x\n        best = curr if curr > best else best\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Print the maximum sum.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Computes the maximum sum of any contiguous sub-array using Kadane's algorithm.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        # either extend the previous subarray or start new at x\n        cur = x if cur + x < x else cur + x\n        best = best if best > cur else cur\n    return best\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # read exactly n numbers\n    if n == 0:        # though constraints say n >= 1, still safe\n        print(0)\n        return\n    print(kadane_max_subarray(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers A and B (1 ≤ A, B ≤ 10^{18}), compute their greatest common divisor (GCD).\n\nInput:\nA single line containing two integers A and B.\n\nOutput:\nPrint a single integer: the GCD of A and B.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    a, b = map(int, data)\n    print(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the length of the longest increasing subsequence.\n\nInput: The first line contains an integer N (1 ≤ N ≤ 10^4). The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput: Output a single integer, the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef longest_increasing_subsequence_length(arr):\n    \"\"\"\n    Returns the length of the longest strictly increasing subsequence\n    in the list `arr` using an O(N log N) algorithm.\n    \"\"\"\n    tails = []  # tails[i] -> minimum possible tail of all increasing subseqs of length i+1\n\n    for num in arr:\n        # Locate the insertion point for num in tails to keep tails sorted\n        idx = bisect.bisect_left(tails, num)  # strictly increasing → bisect_left\n        if idx == len(tails):\n            tails.append(num)   # num extends largest subsequence\n        else:\n            tails[idx] = num    # num could start/extend a shorter subseq\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(longest_increasing_subsequence_length(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = x if current + x < x else current + x\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, each road has a length. Find the length of the shortest path from city 1 to city n. If there is no path, output -1.\n\nInput Format:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), representing a road between u and v of length w.\n\nOutput Format:\nPrint a single integer, the shortest path length from city 1 to city n, or -1 if unreachable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Build adjacency list\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n        if u == n:  # Early exit if we reached the target\n            break\n        for v, w in graph[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    ans = -1 if dist[n] == INF else dist[n]\n    sys.stdout.write(str(ans))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of n integers. Determine the length of the longest subsequence such that the absolute difference between any two consecutive elements is at most 1.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the length of the longest such subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    # dp[val] = length of the longest valid subsequence seen so far\n    #           that ends with the value `val`\n    dp = defaultdict(int)\n    best = 0\n\n    for v in a:\n        # The previous element in the subsequence can be v-1, v, or v+1\n        prev_len = max(dp[v - 1], dp[v], dp[v + 1])\n        cur_len = prev_len + 1\n        if cur_len > dp[v]:\n            dp[v] = cur_len\n        if cur_len > best:\n            best = cur_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 100).\nThe second line contains n integers nums[i] (1 ≤ nums[i] ≤ 1000).\n\nOutput:\nPrint a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # ensure we only take n numbers\n    even_sum = sum(num for num in nums if num % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum difference between two elements such that the larger element comes after the smaller one in the array. Output 0 if no such pair exists.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the maximum difference.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^9 ≤ nums[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Initialize minimum element so far and maximum difference\n    min_so_far = float('inf')\n    max_diff = 0\n    \n    for num in nums:\n        # Update maximum difference if current number gives a better result\n        if num - min_so_far > max_diff:\n            max_diff = num - min_so_far\n        # Update minimum so far\n        if num < min_so_far:\n            min_so_far = num\n    \n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, determine the minimum number of elements to remove so that the remaining elements form a strictly increasing sequence.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 2000).\n- The second line contains n integers (1 ≤ a_i ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the minimum number of elements to remove.\n\nConstraints:\n- 1 ≤ n ≤ 2000\n- 1 ≤ a_i ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns length of the Longest Strictly Increasing Subsequence in arr\n    using patience sorting / binary search (O(n log n)).\n    \"\"\"\n    piles = []                     # piles[i] = smallest tail of an IS of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(piles, x)   # first pile whose top >= x\n        if idx == len(piles):\n            piles.append(x)                  # start new pile\n        else:\n            piles[idx] = x                   # replace to keep pile tops minimal\n    return len(piles)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    lis_len = lis_length(arr)\n    removals = n - lis_len\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any single element by 1.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer, the minimum number of operations.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    arr.sort()\n    median = arr[n // 2]               # works for both odd and even n\n    operations = sum(abs(x - median) for x in arr)\n    print(operations)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of n integers. For each prefix of the sequence, determine if it is possible to rearrange the numbers in the prefix to form a palindrome.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nOutput:\nPrint n lines. The i-th line should contain \"YES\" if the first i numbers can be rearranged to form a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    cnt = defaultdict(int)      # frequency of each number\n    odd = 0                     # how many numbers have odd frequency\n    out_lines = []\n\n    for x in nums:\n        cnt[x] += 1\n        if cnt[x] & 1:          # now odd\n            odd += 1\n        else:                   # now even\n            odd -= 1\n\n        out_lines.append(\"YES\" if odd <= 1 else \"NO\")\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, find the smallest positive integer that is not the sum of any subset of the list.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the smallest positive integer not representable as a sum of any subset.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Sort the list to process numbers in increasing order\n    arr.sort()\n\n    # 'smallest' is the smallest sum we can’t currently form\n    smallest = 1\n    for x in arr:\n        if x > smallest:\n            # Gap detected: cannot form 'smallest'\n            break\n        smallest += x  # Extend reachable sums to [1, smallest)\n\n    print(smallest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray of length at least k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\nThe second line contains n integers a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray with length at least k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().strip().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n\n    # Prefix sums: prefix[i] = sum of first i elements, prefix[0] = 0\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + arr[i - 1]\n\n    max_sum = -10 ** 18            # sufficiently small initial value\n    min_prefix = 0                 # minimal prefix up to index i - k\n\n    for i in range(k, n + 1):      # i is the right end (1-based) of the subarray\n        # Update the minimal prefix sum seen so far up to position i - k\n        min_prefix = min(min_prefix, prefix[i - k])\n        # Candidate subarray sum ending at i with length >= k\n        current = prefix[i] - min_prefix\n        if current > max_sum:\n            max_sum = current\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two positive integers a and b, compute their greatest common divisor (GCD).\n\nInput:\nThe first line contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput:\nOutput a single integer: the GCD of a and b.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.buffer.readline().strip().split()\n    if not data:\n        return\n    a, b = map(int, data)\n    print(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest subarray with all distinct elements.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest subarray with all unique elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    last_pos = dict()        # value -> last index it appeared at\n    best = 0\n    left = 0                 # left end of the current window (inclusive)\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            # Duplicate inside current window – move left past its previous position\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine whether it is possible to rearrange the elements so that no two adjacent elements are equal.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nOutput:\nPrint 'YES' if such a rearrangement exists, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    freq = Counter(arr)\n    max_freq = max(freq.values())\n\n    # A rearrangement without equal adjacent elements is possible\n    # iff the most frequent element does not exceed ceil(n/2)\n    if max_freq <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition the array into the minimum number of contiguous subarrays such that the sum of each subarray is even.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer, the minimum number of contiguous subarrays required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1: n+1]))\n    \n    total_sum = sum(arr)\n    \n    # If the total sum is odd, it's impossible to partition the entire array\n    # into subarrays with even sums, because the sum of any collection of\n    # even numbers is always even.\n    if total_sum % 2 == 1:\n        print(-1)\n    else:\n        # When the total sum is even, the whole array itself forms\n        # a valid subarray with an even sum, so only one segment is needed.\n        print(1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with n nodes and m edges, determine whether there is a cycle in the graph.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating an edge from u to v.\n\nOutput:\nPrint \"YES\" if the graph contains a cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    indeg = [0] * (n + 1)\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        indeg[v] += 1\n\n    q = deque(i for i in range(1, n + 1) if indeg[i] == 0)\n    processed = 0\n\n    while q:\n        u = q.popleft()\n        processed += 1\n        for v in adj[u]:\n            indeg[v] -= 1\n            if indeg[v] == 0:\n                q.append(v)\n\n    if processed == n:\n        print(\"NO\")   # acyclic\n    else:\n        print(\"YES\")  # cycle exists\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, rooted at node 1. Each edge has a weight. For each node, compute the sum of weights on the path from the root to that node.\n\nInput:\nThe first line contains one integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u,v ≤ n, 1 ≤ w ≤ 10^4), describing an edge between nodes u and v with weight w.\n\nOutput:\nPrint n integers: for each node from 1 to n, the sum of weights on the path from the root to that node.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n\ndef main() -> None:\n    # Read and tokenize all input at once (fast for large n)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))                             # number of nodes\n\n    # Build adjacency list: adj[u] -> list of (v, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # dist[i] will store distance from root (node 1) to i\n    dist = [0] * (n + 1)\n    visited = [False] * (n + 1)\n\n    # Iterative DFS (stack) to avoid recursion-depth problems\n    stack = [1]\n    visited[1] = True\n\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if not visited[v]:\n                dist[v] = dist[u] + w\n                visited[v] = True\n                stack.append(v)\n\n    # Output distances from node 1 to every node (1 … n)\n    sys.stdout.write(\" \".join(str(dist[i]) for i in range(1, n + 1)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^4).\n\nOutput:\nOutput a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Sliding window with dictionary to store last index of each character\n    last_index = {}\n    start = 0          # left edge of the current window\n    best_len = 0       # best length found so far\n\n    for i, ch in enumerate(s):\n        if ch in last_index and last_index[ch] >= start:\n            # Character repeated inside current window -> move start\n            start = last_index[ch] + 1\n        last_index[ch] = i                # update last seen index\n        best_len = max(best_len, i - start + 1)\n\n    return best_len\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    result = max_subarray_sum(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the maximum sum of any contiguous subarray. The subarray must contain at least one number.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    current_max = global_max = arr[0]\n    for num in arr[1:]:\n        current_max = max(num, current_max + num)\n        global_max = max(global_max, current_max)\n    return global_max\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(kadane(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a 2-dimensional grid of size n × m consisting of 0s and 1s, find the size of the largest connected group of 1s (connected horizontally or vertically).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains m integers (either 0 or 1) separated by spaces.\n\nOutput:\nPrint a single integer: the size of the largest group of connected 1s.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, m = data[0], data[1]\n    grid_vals = data[2:]\n    # Build grid row pointers without extra copies\n    grid = [grid_vals[i * m:(i + 1) * m] for i in range(n)]\n\n    visited = [[False] * m for _ in range(n)]\n    max_size = 0\n\n    # Directions: up, down, left, right\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == 1 and not visited[i][j]:\n                # BFS\n                q = deque()\n                q.append((i, j))\n                visited[i][j] = True\n                comp_size = 0\n\n                while q:\n                    x, y = q.popleft()\n                    comp_size += 1\n                    for dx, dy in dirs:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            if grid[nx][ny] == 1 and not visited[nx][ny]:\n                                visited[nx][ny] = True\n                                q.append((nx, ny))\n                if comp_size > max_size:\n                    max_size = comp_size\n\n    print(max_size)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition the array into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible difference.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 30).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum possible difference between the sums of the two subsets.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\nfrom itertools import combinations\n\ndef subset_sums(arr):\n    \"\"\"Return list of all subset sums of arr (arr length ≤ 15).\"\"\"\n    n = len(arr)\n    sums = [0] * (1 << n)\n    for mask in range(1, 1 << n):\n        # take least-significant set bit\n        lsb = mask & -mask\n        bit = (lsb.bit_length() - 1)\n        prev = mask ^ lsb\n        sums[mask] = sums[prev] + arr[bit]\n    return sums\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Split into two halves\n    mid = n // 2\n    left, right = nums[:mid], nums[mid:]\n    \n    sums_left = subset_sums(left)\n    sums_right = subset_sums(right)\n    sums_right.sort()\n    \n    total = sum(nums)\n    best_diff = total            # worst case (put everything on one side)\n    \n    half = total / 2             # target value\n    \n    for s_left in sums_left:\n        need = half - s_left\n        idx = bisect.bisect_left(sums_right, need)\n        \n        # Check closest candidate(s)\n        for j in (idx - 1, idx):\n            if 0 <= j < len(sums_right):\n                current_sum = s_left + sums_right[j]\n                diff = abs(total - 2 * current_sum)\n                if diff < best_diff:\n                    best_diff = diff\n                    if best_diff == 0:            # can't do better than perfect split\n                        print(0)\n                        return\n    print(best_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Your task is to determine the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s of length n.\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    Uses a sliding-window approach with a dictionary to record\n    the last position where each character was seen.\n    \"\"\"\n    last_pos = {}          # char -> last index it appeared at\n    start = 0              # left end of current window\n    best = 0               # best window length found so far\n\n    for i, ch in enumerate(s):\n        # If character seen and inside current window, move start\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line is n (may be redundant, but we respect the format)\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Optionally truncate or validate length\n    # s = s[:n]  # not strictly necessary, as input guarantees length\n    result = longest_unique_substring(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of n rows and m columns filled with '.' (empty) and '#' (blocked) characters, determine the number of connected components of empty cells. Two empty cells are connected if they share a side.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nThe next n lines each contain a string of length m consisting of '.' and '#'.\n\nOutput:\nPrint a single integer: the number of connected components of empty cells.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid = data[2:]  # list of byte strings representing rows\n    # Convert to bytes keeps memory low; we will compare to ord('.') == 46\n    dot = ord('.')\n    visited = [[False]*m for _ in range(n)]\n    cnt = 0\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == dot and not visited[i][j]:\n                cnt += 1\n                # BFS\n                q = deque()\n                q.append((i, j))\n                visited[i][j] = True\n                while q:\n                    x, y = q.popleft()\n                    # iterate 4-neighbors\n                    if x > 0 and not visited[x-1][y] and grid[x-1][y] == dot:\n                        visited[x-1][y] = True\n                        q.append((x-1, y))\n                    if x+1 < n and not visited[x+1][y] and grid[x+1][y] == dot:\n                        visited[x+1][y] = True\n                        q.append((x+1, y))\n                    if y > 0 and not visited[x][y-1] and grid[x][y-1] == dot:\n                        visited[x][y-1] = True\n                        q.append((x, y-1))\n                    if y+1 < m and not visited[x][y+1] and grid[x][y+1] == dot:\n                        visited[x][y+1] = True\n                        q.append((x, y+1))\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the minimum number of characters you need to remove to make s a palindrome.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2×10^5) — the length of the string.\nThe second line contains the string s of length n.\n\nOutput:\nOutput a single integer — the minimum number of characters to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_palindromic_subsequence_length(s: str) -> int:\n    \"\"\"\n    Returns length of the longest palindromic subsequence in s\n    using a bit-set LCS algorithm (s versus reversed(s)).\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    # Bitmask with n low bits set to 1 – keeps every\n    # intermediate value limited to the first n positions.\n    ALL_ONES = (1 << n) - 1\n\n    # Build masks for every character in reversed string.\n    # pos_mask[c] has 1-bits wherever the reversed string equals c.\n    pos_mask = [0] * 26\n    rev = s[::-1]\n    for i, ch in enumerate(rev):\n        pos_mask[ord(ch) - 97] |= 1 << i\n\n    dp = 0  # bitset that will finally hold the LCS information\n    for ch in s:\n        char_bits = pos_mask[ord(ch) - 97]\n        x = dp | char_bits\n        y = ((dp << 1) | 1) & ALL_ONES\n        dp = x & ~(x - y) & ALL_ONES  # Myers' recurrence limited to n bits\n\n    return dp.bit_count()   # number of 1s == LCS length\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    s = data[1].decode()\n\n    # Safety (though input guarantees it):\n    if n != len(s):\n        s = s[:n]\n\n    lps_len = longest_palindromic_subsequence_length(s)\n    # Minimum removals = total length − length of longest palindromic subsequence\n    print(n - lps_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each edge has a positive weight. For each node, compute the maximum distance from the root (node 1) to that node.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 2×10^5), the number of nodes.\n- The next n-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), denoting an edge between u and v with weight w.\n\nOutput Format:\n- Print n integers: the i-th integer is the distance from node 1 to node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: adj[u] = list of (v, w)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # BFS/DFS to compute distances from root (node 1)\n    dist = [0] * (n + 1)\n    visited = [False] * (n + 1)\n    visited[1] = True\n    q = deque([1])\n    \n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if not visited[v]:\n                visited[v] = True\n                dist[v] = dist[u] + w\n                q.append(v)\n    \n    # Output distances 1..n\n    sys.stdout.write(' '.join(str(dist[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value assigned to it. Find the size of the largest subtree where all nodes have the same value.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9) — the values assigned to the nodes.\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge in the tree.\n\nOutput:\nOutput a single integer — the size of the largest valid subtree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(200000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    vals = [0] + [int(next(it)) for _ in range(n)]  # 1-indexed\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # answer we are looking for\n    best = 1\n\n    def dfs(u: int, p: int) -> (bool, int):\n        \"\"\"\n        Returns:\n            is_uniform  : whether the subtree rooted at u is uniform\n            subtree_size: size of the subtree rooted at u\n        \"\"\"\n        nonlocal best\n        is_uniform = True\n        size = 1\n\n        for v in adj[u]:\n            if v == p:\n                continue\n            child_uniform, child_size = dfs(v, u)\n            size += child_size\n            # Child subtree must itself be uniform and its root value must match u\n            if (not child_uniform) or vals[v] != vals[u]:\n                is_uniform = False\n\n        if is_uniform:\n            best = max(best, size)\n        return is_uniform, size\n\n    dfs(1, 0)\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer representing the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    \"\"\"\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the minimum number of characters you must delete from the string so that no two adjacent characters are the same.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer, the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_no_adjacent_equals(s: str) -> int:\n    \"\"\"\n    Compute the minimum number of deletions required so that\n    no two adjacent characters in string `s` are the same.\n    \"\"\"\n    deletions = 0\n    prev_char = None\n    for ch in s:\n        if ch == prev_char:\n            deletions += 1\n        else:\n            prev_char = ch\n    return deletions\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(min_deletions_no_adjacent_equals(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S, find the length of the longest substring without repeating characters.\n\nInput: The first line contains an integer N (1 ≤ N ≤ 10^5), the length of the string. The second line contains the string S consisting of lowercase English letters.\n\nOutput: Output a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains no repeated characters.\n    Uses a sliding-window technique with two pointers.\n    \"\"\"\n    last_pos = {}                # char -> most recent index\n    left = 0                     # left bound of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        # If `ch` was seen and is inside the current window, move `left`\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n\n    # First line: N (not strictly needed because we can rely on len(S))\n    # Second line: the string\n    # Robustly handle potential extra whitespace/newlines.\n    if len(data) == 1:\n        # only one line means N and S are on the same line or N omitted\n        # Treat the sole line as the string itself, ignoring N.\n        s = data[0].strip()\n    else:\n        s = data[1].strip()\n\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has an integer value. Find the maximum sum of values along any simple path in the tree.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (|v_i| ≤ 10^4).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput:\nPrint a single integer: the maximum sum along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    vals = list(map(int, data[1:1 + n]))\n    edges = data[1 + n:]\n    g = [[] for _ in range(n)]\n    it = iter(edges)\n    for u, v in zip(it, it):\n        u = int(u) - 1\n        v = int(v) - 1\n        g[u].append(v)\n        g[v].append(u)\n\n    best = [-10 ** 18]      # global maximum, wrapped in list for inner scope\n\n    def dfs(u: int, p: int) -> int:\n        \"\"\"\n        Returns the maximum path sum that starts at `u` and goes downwards\n        (u must be included, may choose at most one child branch).\n        Also updates the global best with every possibility found in the\n        subtree rooted at `u`.\n        \"\"\"\n        # two largest downward contributions from children (only if positive)\n        top1 = top2 = 0\n\n        for v in g[u]:\n            if v == p:\n                continue\n            down = dfs(v, u)          # best downward path from child v\n            if down > top1:           # maintain the two best\n                top2 = top1\n                top1 = down\n            elif down > top2:\n                top2 = down\n\n        # best path starting at u and going to at most one child\n        best_down = vals[u] + (top1 if top1 > 0 else 0)\n\n        # candidate paths to update the global best\n        best[0] = max(best[0], vals[u])                        # single node\n        best[0] = max(best[0], best_down)                      # u + one branch\n        if top1 > 0 and top2 > 0:                              # u + two branches\n            best[0] = max(best[0], vals[u] + top1 + top2)\n\n        return best_down\n\n    dfs(0, -1)\n    print(best[0])\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the length of the longest path in the tree (the diameter).\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N−1 lines contains three integers u, v, w (1 ≤ u,v ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nOutput a single integer, the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    # Fast input\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    \n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1]); w = int(data[idx + 2])\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    def farthest(start: int) -> tuple[int, int]:\n        \"\"\"Return (node, distance) that is farthest from `start`.\"\"\"\n        visited = [False] * (n + 1)\n        visited[start] = True\n        stack = [(start, 0)]\n        best_node, best_dist = start, 0\n        \n        while stack:\n            node, dist = stack.pop()\n            if dist > best_dist:\n                best_node, best_dist = node, dist\n            for nxt, w in adj[node]:\n                if not visited[nxt]:\n                    visited[nxt] = True\n                    stack.append((nxt, dist + w))\n        return best_node, best_dist\n    \n    # Two-phase DFS/BFS to find diameter\n    endpoint, _ = farthest(1)\n    _, diameter = farthest(endpoint)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N. Determine if S can be rearranged to form a palindrome.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S of length N, consisting of lowercase English letters.\n\nOutput:\nPrint \"YES\" if S can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    if len(data) < 2:\n        # No string provided, though per constraints this should not happen\n        print(\"NO\")\n        return\n    s = data[1]\n    # Quick length check\n    if len(s) != n:\n        # Input inconsistency; follow spec defensively.\n        s = s[:n]\n\n    # Count occurrences\n    cnt = Counter(s)\n\n    # Count how many characters have odd counts\n    odd = sum(1 for v in cnt.values() if v % 2)\n\n    # A string can be rearranged into a palindrome iff\n    # the number of odd-count letters is <= 1\n    print(\"YES\" if odd <= 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s of length n consisting of lowercase English letters. Determine if s is a palindrome. A palindrome is a string that reads the same backward as forward.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains the string s of length n.\n\nOutput:\nPrint \"YES\" if s is a palindrome, otherwise print \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])          # Length of the string (can be ignored for the logic itself)\n    s = data[1] if len(data) > 1 else \"\"\n    \n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if it is possible to partition the array into two non-empty subsets with equal sum.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 1000).\nThe second line contains n integers ai (1 ≤ ai ≤ 1000).\n\nOutput:\nPrint \"YES\" if the array can be partitioned into two subsets with equal sum, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, it cannot be split equally\n    if total % 2 == 1:\n        return False\n    \n    target = total // 2\n    \n    # Bitset DP: bit i is 1 if a subset with sum i is achievable\n    bits = 1  # only the 0-sum is achievable at start\n    for x in nums:\n        bits |= bits << x          # add current number to every existing subset sum\n        # early exit if we already reached target\n        if (bits >> target) & 1:\n            return True\n    \n    return False\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S can be rearranged to form a palindrome.\n\nInput Format:\nThe first line contains a single string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" if S can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the string `s` can be rearranged to form a palindrome.\n    \"\"\"\n    from collections import Counter\n    cnt = Counter(s)\n    # Count how many characters appear an odd number of times\n    odd = sum(1 for v in cnt.values() if v % 2)\n    # A palindrome can have at most one character with an odd count\n    return odd <= 1\n\n\ndef main() -> None:\n    import sys\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, output the number of pairs (i, j) such that i < j and nums[i] > nums[j].\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2·10^5).\nThe second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).\n\nOutput:\nOutput a single integer: the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef merge_count(arr):\n    \"\"\"\n    Performs a merge-sort on arr while counting inversions.\n    Returns (sorted_arr, inversion_count).\n    \"\"\"\n    length = len(arr)\n    if length <= 1:\n        return arr, 0\n\n    mid = length // 2\n    left,  inv_left  = merge_count(arr[:mid])\n    right, inv_right = merge_count(arr[mid:])\n\n    merged = []\n    i = j = 0\n    inv = inv_left + inv_right\n\n    # Merge two sorted halves counting cross inversions\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv += len(left) - i        # all remaining in left are > right[j]\n            j += 1\n\n    # Append leftovers\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n\n    return merged, inv\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    _, inversion_count = merge_count(nums)\n    print(inversion_count)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the length of the longest simple path in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w.\n\nOutput:\nOutput a single integer: the length of the longest simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the node farthest from `start` and the corresponding distance.\n    Uses an iterative DFS to avoid recursion depth issues.\n    \"\"\"\n    visited = [False] * (n + 1)\n    stack = [(start, 0)]           # (current_node, distance_from_start)\n    visited[start] = True\n    far_node = start\n    far_dist = 0\n\n    while stack:\n        node, dist = stack.pop()\n        if dist > far_dist:\n            far_dist = dist\n            far_node = node\n        for nxt, w in adj[node]:\n            if not visited[nxt]:\n                visited[nxt] = True\n                stack.append((nxt, dist + w))\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS: from any node (1) to get one endpoint of the diameter\n    endpoint, _ = farthest(1, adj, n)\n    \n    # Second DFS: from the found endpoint to get the actual diameter length\n    _, diameter = farthest(endpoint, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with N nodes and M edges, determine if there exists a cycle in the graph.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), indicating a directed edge from u to v.\n\nOutput Format:\nPrint 'YES' if there is a cycle; otherwise, print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    indeg = [0] * (n + 1)\n    \n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        indeg[v] += 1\n    \n    # Kahn's algorithm for topological sorting.\n    q = deque(i for i in range(1, n + 1) if indeg[i] == 0)\n    processed = 0\n    \n    while q:\n        node = q.popleft()\n        processed += 1\n        for nei in adj[node]:\n            indeg[nei] -= 1\n            if indeg[nei] == 0:\n                q.append(nei)\n    \n    if processed == n:\n        sys.stdout.write(\"NO\\n\")   # no cycle\n    else:\n        sys.stdout.write(\"YES\\n\")  # at least one cycle\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each node has an integer value. Find the maximum sum of values along any path from the root to a leaf.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (-10^4 ≤ v_i ≤ 10^4), where v_i is the value of node i.\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer, the maximum sum from the root to any leaf.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(200000)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:          # No input\n        return\n    it = iter(data)\n    \n    n = int(next(it))\n    vals = [0] + [int(next(it)) for _ in range(n)]   # 1-indexed\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # Special case: single vertex tree\n    if n == 1:\n        print(vals[1])\n        return\n    \n    max_sum = -10**18\n    stack = [(1, 0, vals[1])]          # (node, parent, cumulative_sum)\n    \n    while stack:\n        node, parent, cur_sum = stack.pop()\n        is_leaf = True\n        for nb in adj[node]:\n            if nb == parent:\n                continue\n            is_leaf = False\n            stack.append((nb, node, cur_sum + vals[nb]))\n        if is_leaf:\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a permutation of numbers from 1 to N. You can swap any two adjacent elements any number of times. What is the minimum number of swaps required to sort the permutation in ascending order?\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers p_1, p_2, ..., p_N, a permutation of numbers from 1 to N.\n\nOutput:\nOutput a single integer, the minimum number of adjacent swaps required to sort the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass Fenwick:\n    \"\"\"Binary Indexed Tree for prefix sums.\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.bit = [0] * (n + 1)\n\n    def add(self, idx: int, delta: int) -> None:\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def prefix_sum(self, idx: int) -> int:\n        s = 0\n        while idx:\n            s += self.bit[idx]\n            idx -= idx & -idx\n        return s\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    perm = list(map(int, data[1:]))\n\n    bit = Fenwick(n)\n    inversions = 0\n\n    # Traverse from left to right, counting previously seen larger elements.\n    for val in perm:\n        # Number of elements already processed\n        seen = bit.prefix_sum(n)\n        # Number of elements <= current value already processed\n        not_greater = bit.prefix_sum(val)\n        inversions += seen - not_greater\n        bit.add(val, 1)\n\n    print(inversions)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a connected undirected graph with n nodes and m edges. Each edge has a weight. Find the minimum possible sum of the weights such that the graph remains connected (i.e., find the total weight of the minimum spanning tree).\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), representing an edge between node u and node v with weight w.\n\nOutput Format:\n- Output a single integer, the sum of the weights in the minimum spanning tree.\n\nConstraints:\n- The graph is connected.\n- 2 ≤ n ≤ 10^5\n- 1 ≤ m ≤ 2×10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    \"\"\"Disjoint Set Union (Union-Find) with path compression and union by size.\"\"\"\n    __slots__ = ('parent', 'size')\n\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # Path compression (2-step)\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False\n        if self.size[ra] < self.size[rb]:   # Union by size\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        return True\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, m = data[0], data[1]\n\n    # Read all edges\n    edges = []\n    idx = 2\n    for _ in range(m):\n        u = data[idx] - 1      # 0-based indexing\n        v = data[idx + 1] - 1\n        w = data[idx + 2]\n        edges.append((w, u, v))\n        idx += 3\n\n    # Kruskal's algorithm\n    edges.sort()               # Sort by weight\n    dsu = DSU(n)\n    mst_weight = 0\n    chosen = 0\n\n    for w, u, v in edges:\n        if dsu.union(u, v):\n            mst_weight += w\n            chosen += 1\n            if chosen == n - 1:  # MST completed\n                break\n\n    print(mst_weight)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes numbered from 1 to N, where each edge has a positive integer weight, find the diameter of the tree (the maximum distance between any pair of nodes).\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between node u and node v with weight w.\n\nOutput Format:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef farthest(start, adj, n):\n    \"\"\"Return (node, distance) farthest from `start` in the tree.\"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        node = stack.pop()\n        for nei, w in adj[node]:\n            if dist[nei] == -1:\n                dist[nei] = dist[node] + w\n                stack.append(nei)\n\n    # Get farthest node and its distance\n    far_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            far_node = i\n    return far_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # First DFS/BFS from an arbitrary node (here 1) to find one endpoint of the diameter\n    node_a, _ = farthest(1, adj, n)\n    # Second DFS/BFS from that endpoint to get the diameter length\n    _, diameter = farthest(node_a, adj, n)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of indices (i, j) such that i < j and arr[i] + arr[j] == k, where k is a given integer.\n\nInput:\nThe first line contains two integers n (1 ≤ n ≤ 10^5) and k (−10^9 ≤ k ≤ 10^9).\nThe second line contains n integers arr[1], arr[2], ..., arr[n] (−10^9 ≤ arr[i] ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        if k - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n vertices and m edges, determine whether there exists a cycle in the graph.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between u and v.\n\nOutput:\nPrint \"YES\" if there is at least one cycle in the graph, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # path compression (halving)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False  # already in same set -> adding this edge forms a cycle\n        if rank[ra] < rank[rb]:\n            parent[ra] = rb\n        elif rank[ra] > rank[rb]:\n            parent[rb] = ra\n        else:\n            parent[rb] = ra\n            rank[ra] += 1\n        return True\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        # self-loop instantly forms a cycle\n        if u == v:\n            print(\"YES\")\n            return\n        if not union(u, v):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points in a 2D plane, find the pair of points with the smallest Euclidean distance between them.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n lines contains two integers x_i and y_i (−10^6 ≤ x_i, y_i ≤ 10^6), the coordinates of the points.\n\nOutput Format:\nPrint the smallest distance, rounded to 6 decimal places.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nsys.setrecursionlimit(300000)\n\ndef dist2(p, q):\n    dx = p[0] - q[0]\n    dy = p[1] - q[1]\n    return dx * dx + dy * dy\n\ndef closest_pair(points):\n    points.sort(key=lambda p: p[0])          # sort by x–coordinate\n    d2, _ = _closest(points)\n    return math.sqrt(d2)\n\ndef _closest(pts):\n    n = len(pts)\n    if n <= 3:                               # brute force\n        best = float('inf')\n        for i in range(n):\n            for j in range(i + 1, n):\n                best = min(best, dist2(pts[i], pts[j]))\n        return best, sorted(pts, key=lambda p: p[1])      # also return list sorted by y\n\n    mid = n // 2\n    mid_x = pts[mid][0]\n\n    d_left, left_y  = _closest(pts[:mid])\n    d_right, right_y = _closest(pts[mid:])\n    d2 = d_left if d_left < d_right else d_right           # current best squared distance\n\n    # merge the two y-sorted lists\n    merged_y = []\n    i = j = 0\n    while i < len(left_y) and j < len(right_y):\n        if left_y[i][1] < right_y[j][1]:\n            merged_y.append(left_y[i]); i += 1\n        else:\n            merged_y.append(right_y[j]); j += 1\n    merged_y.extend(left_y[i:])\n    merged_y.extend(right_y[j:])\n\n    # build strip of points whose x is within sqrt(d2) of mid_x\n    strip = [p for p in merged_y if (p[0] - mid_x) ** 2 < d2]\n\n    # check each point against next up to 7 neighbours in the strip\n    m = len(strip)\n    for i in range(m):\n        for j in range(i + 1, min(i + 8, m)):\n            dy = strip[j][1] - strip[i][1]\n            if dy * dy >= d2:                 # further points in y will be even farther\n                break\n            d2 = min(d2, dist2(strip[i], strip[j]))\n\n    return d2, merged_y\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    coords = list(map(int, data[1:]))\n    points = [(coords[i], coords[i + 1]) for i in range(0, 2 * n, 2)]\n\n    answer = closest_pair(points)\n    print(f\"{answer:.6f}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s.\n\nOutput Format:\n- Output a single integer: the length of the longest substring with all unique characters.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- s contains only lowercase English letters\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}              # Stores the most recent index of each character\n    start = 0                  # Start of the current window\n    best = 0                   # Length of the best (longest) window so far\n    \n    for i, ch in enumerate(s):\n        # If we've seen this character in the current window, move start\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1        # Exclude the previous occurrence\n        last_pos[ch] = i                    # Update most recent index\n        best = max(best, i - start + 1)     # Update best length if needed\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])            # Length given (may be unused if inconsistent)\n    s = data[1] if len(data) > 1 else \"\"\n    \n    # Optional sanity trim if n > len(s) or vice-versa\n    s = s[:n]\n    \n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed acyclic graph (DAG) with N nodes and M edges. Determine the number of different topological orderings of the nodes modulo 10^9+7.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 16, 0 ≤ M ≤ N(N-1)/2).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), denoting an edge from u to v.\n\nOutput Format:\nOutput a single integer, the number of topological orderings modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                     # empty input guard\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # pre[i] – bitmask of immediate prerequisites of node i\n    pre = [0] * n                    # 0-based indexing\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        pre[v] |= 1 << u             # u must come before v\n\n    full_mask = 1 << n\n    dp = [0] * full_mask\n    dp[0] = 1                        # one way to place nothing\n\n    for mask in range(full_mask):\n        if dp[mask] == 0:\n            continue\n\n        remaining = (~mask) & (full_mask - 1)   # nodes not placed yet\n        for v in range(n):\n            if (remaining >> v) & 1:            # v not in mask\n                if (pre[v] & ~mask) == 0:       # all prerequisites already placed\n                    new_mask = mask | (1 << v)\n                    dp[new_mask] = (dp[new_mask] + dp[mask]) % MOD\n\n    print(dp[full_mask - 1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S can be rearranged to form a palindrome.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5), the length of S.\nThe second line contains the string S of length N.\n\nOutput:\nPrint \"YES\" if S can be rearranged into a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line: length (we don't actually need the value after reading the string)\n    # Second line: the string\n    if len(data) == 1:\n        # length and string might be on the same line (unlikely by problem statement)\n        n_and_s = data[0].split()\n        if len(n_and_s) == 1:\n            # Only length provided; no string\n            print(\"NO\")\n            return\n        n, s = n_and_s[0], n_and_s[1]\n    else:\n        _, s = data[0], data[1]\n\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine whether the graph is bipartite.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nThe following M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput Format:\nPrint \"YES\" if the graph is bipartite, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    # Fast input\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    \n    it = iter(data)\n    n = next(it)          # Number of nodes\n    m = next(it)          # Number of edges\n    \n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    \n    for _ in range(m):\n        u = next(it)\n        v = next(it)\n        \n        # A self-loop immediately breaks bipartiteness\n        if u == v:\n            print(\"NO\")\n            return\n        \n        adj[u].append(v)\n        adj[v].append(u)\n    \n    color = [0] * (n + 1)     # 0 = unvisited, 1 / -1 are the two colors\n    q = deque()\n    \n    for start in range(1, n + 1):\n        if color[start] != 0:\n            continue\n        \n        # Start BFS for this component\n        color[start] = 1\n        q.append(start)\n        \n        while q:\n            node = q.popleft()\n            for nei in adj[node]:\n                if color[nei] == 0:\n                    color[nei] = -color[node]\n                    q.append(nei)\n                elif color[nei] == color[node]:\n                    # Same color on both ends of an edge -> not bipartite\n                    print(\"NO\")\n                    return\n    \n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\n\nOutput:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    last_pos = {}\n    max_len = 0\n    left = 0          # left end of the current window\n    \n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Character repeats inside the current window -> move left pointer\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line is N (can be ignored except for validation)\n    if len(data) < 2:\n        return\n    # n = int(data[0])  # not strictly needed\n    s = data[1].rstrip('\\n')\n    print(longest_unique_substring(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer N, determine if it can be expressed as the sum of two prime numbers.\n\nInput:\nA single integer N (2 ≤ N ≤ 10^6).\n\nOutput:\nPrint \"YES\" if N can be expressed as the sum of two prime numbers, otherwise print \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef is_prime(x: int) -> bool:\n    \"\"\"Return True if x is a prime number, else False.\"\"\"\n    if x < 2:\n        return False\n    if x in (2, 3):\n        return True\n    if x % 2 == 0:\n        return False\n    limit = int(math.isqrt(x))\n    for i in range(3, limit + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef main() -> None:\n    # Read the single integer N\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    N = int(data)\n\n    # Handle the small cases explicitly\n    if N <= 3:\n        print(\"NO\")\n        return\n\n    # If N is even (and at least 4) Goldbach's conjecture guarantees\n    # it is the sum of two primes, and this is proven for numbers up\n    # to 10^6, well within our limit.\n    if N % 2 == 0:\n        print(\"YES\")\n        return\n\n    # For odd N, the only way to write it as sum of two primes is 2 + (N - 2)\n    # because 2 is the only even prime and odd + even = odd.\n    if is_prime(N - 2):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N positive integers. Find the minimal positive integer that cannot be represented as the sum of some subset of the given numbers.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N positive integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint the minimal positive integer that cannot be represented as a subset sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef minimal_unrepresentable(nums):\n    \"\"\"\n    Given a list of positive integers `nums`, returns the minimal positive\n    integer that cannot be expressed as the sum of some subset of `nums`.\n    \"\"\"\n    nums.sort()                      # sort ascending\n    smallest_missing = 1             # smallest value we cannot currently make\n    \n    for x in nums:\n        if x > smallest_missing:\n            # gap encountered; `smallest_missing` cannot be formed\n            break\n        smallest_missing += x        # we can now form everything up to this new limit\n    return smallest_missing\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(minimal_unrepresentable(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, determine if it is possible to partition the array into two subsets with equal sum.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 100).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 1000).\n\nOutput:\nPrint \"YES\" if it is possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    if total & 1:              # odd total cannot be split equally\n        return False\n    target = total // 2\n\n    # Classic subset–sum using a boolean list (bitset‐like)\n    reachable = [False] * (target + 1)\n    reachable[0] = True\n\n    for num in nums:\n        # iterate backwards to avoid using same item twice\n        for s in range(target, num - 1, -1):\n            if reachable[s - num]:\n                reachable[s] = True\n        if reachable[target]:   # early exit\n            return True\n\n    return reachable[target]\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Determine if there exists a pair of indices (i, j) such that i < j and a_i + a_j = x for a given integer x.\n\nInput:\nThe first line contains two integers n and x (1 ≤ n ≤ 2*10^5, 1 ≤ x ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint 'YES' if such a pair exists, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, x = data[0], data[1]\n    arr = data[2:2 + n]\n\n    seen = set()\n    for value in arr:\n        if x - value in seen:          # found complementary value -> pair exists\n            print('YES')\n            return\n        seen.add(value)                # remember current value for future pairs\n    print('NO')                        # no valid pair found\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Your task is to compute the sum of all even numbers in the array.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    # First value is N, but we actually don't need it after reading.\n    n = int(data[0])\n    numbers = map(int, data[1:1 + n])\n    even_sum = sum(x for x in numbers if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the largest sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the largest sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to compute the maximum sub-array sum.\n    Works in O(N) time and O(1) extra space.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # cur = max(x, cur+x)\n        if cur > best:\n            best = cur\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # When N = 0 (not expected per constraints), we'd handle gracefully,\n    # but per statement N ≥ 1\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj, n):\n    \"\"\"\n    Breadth-first search that returns the farthest node from `start`\n    together with the corresponding distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    farthest_node = start\n    max_dist = 0\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > max_dist:\n                    max_dist = dist[v]\n                    farthest_node = v\n    return farthest_node, max_dist\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1])\n        idx += 2\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS to find one endpoint of the diameter\n    node_a, _ = bfs(1, adj, n)\n    # Second BFS from that endpoint to get the diameter length\n    _, diameter = bfs(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string consisting of lowercase English letters, determine if it is a palindrome (it reads the same forward and backward).\n\nInput Format:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nOutput \"YES\" if the string is a palindrome, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(\"YES\" if s == s[::-1] else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a binary tree with n nodes, labeled 1 to n. Each node has a value. Find the sum of all node values at the maximum depth of the tree.\n\nInput Format:\nThe first line contains n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, ..., v_n (node values, |v_i| ≤ 10^4).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), indicating an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer, the sum of node values at the maximum depth.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    it = iter(sys.stdin.buffer.read().split())\n    try:\n        n = int(next(it))\n    except StopIteration:\n        return                                # no input\n\n    # read node values (1-based indexing)\n    vals = [0] * (n + 1)\n    for i in range(1, n + 1):\n        vals[i] = int(next(it))\n\n    # build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # BFS from root (node 1) to compute depths\n    depth = [-1] * (n + 1)\n    depth[1] = 0\n    q = deque([1])\n    max_depth = 0\n\n    while q:\n        cur = q.popleft()\n        d = depth[cur]\n        if d > max_depth:\n            max_depth = d\n        for nxt in adj[cur]:\n            if depth[nxt] == -1:\n                depth[nxt] = d + 1\n                q.append(nxt)\n\n    # sum values at maximum depth\n    ans = sum(vals[i] for i in range(1, n + 1) if depth[i] == max_depth)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes labeled from 1 to N, rooted at node 1, each edge has a weight. For each node, find the sum of weights on the path from the root to that node.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), denoting an edge between u and v with weight w.\n\nOutput:\nOutput N space-separated integers, where the i-th integer is the sum of the weights on the path from the root to node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Fast input\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n\n    n = int(next(it))                      # number of nodes\n    adj = [[] for _ in range(n + 1)]       # adjacency list (1-indexed)\n\n    # build the tree\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # distance (path-sum) array\n    dist = [0] * (n + 1)\n\n    # iterative DFS to avoid recursion-depth issues\n    stack = [1]            # nodes to visit\n    parent = [0] * (n + 1) # store parent to avoid revisits\n    parent[1] = -1         # root has no parent\n\n    while stack:\n        node = stack.pop()\n        for nbr, wt in adj[node]:\n            if nbr == parent[node]:\n                continue\n            parent[nbr] = node\n            dist[nbr] = dist[node] + wt\n            stack.append(nbr)\n\n    # output results\n    sys.stdout.write(' '.join(str(dist[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a connected undirected graph with N nodes and M edges. Each edge has a weight. Find the minimum spanning tree's total weight.\n\nInput: The first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5). Each of the next M lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^9), representing an edge between u and v with weight w.\n\nOutput: Output a single integer, the total weight of the minimum spanning tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# Disjoint Set Union (Union-Find) with path compression and union by size\nclass DSU:\n    __slots__ = ('parent', 'size')\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size   = [1] * n\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # Path compression\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    edges = [(int(next(it)), int(next(it)) - 1, int(next(it)) - 1)  # (weight, u, v)\n             for _ in range(m)]\n    # Sort edges by weight\n    edges.sort(key=lambda x: x[0])\n\n    dsu = DSU(n)\n    mst_weight = 0\n    edges_used = 0\n\n    for w, u, v in edges:\n        if dsu.union(u, v):\n            mst_weight += w\n            edges_used += 1\n            if edges_used == n - 1:   # MST complete\n                break\n\n    print(mst_weight)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_distinct_subarray(arr):\n    last_pos = {}                # value -> last index\n    start = 0                    # left end of current window\n    best = 0\n    for i, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= start:\n            # duplicate inside current window – move start right after its previous position\n            start = last_pos[val] + 1\n        last_pos[val] = i\n        best = max(best, i - start + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_distinct_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine whether it is possible to partition the list into two subsets with equal sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 1000).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nOutput:\nOutput \"YES\" if such a partition exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    total = sum(nums)\n\n    # If total sum is odd, equal partition is impossible\n    if total & 1:\n        print(\"NO\")\n        return\n\n    target = total // 2\n\n    # Bit-set where the i-th bit is 1  <=>  sum i is attainable\n    reachable = 1  # only sum 0 is reachable at start\n\n    # We will keep at most the first (target+1) bits to save time/memory\n    limit_mask = (1 << (target + 1)) - 1\n\n    for x in nums:\n        # Shift left by x and OR – adds x to every previously reachable sum\n        reachable |= reachable << x\n        # Keep only bits up to `target`\n        reachable &= limit_mask\n\n        # Early exit if target already reachable\n        if (reachable >> target) & 1:\n            print(\"YES\")\n            return\n\n    # After processing all numbers, check again\n    print(\"YES\" if (reachable >> target) & 1 else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine the number of connected components in the graph.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) denoting an edge between u and v.\n\nOutput Format:\n- Output a single integer: the number of connected components.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Disjoint Set Union (Union-Find)\n    parent = list(range(n + 1))\n    size   = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        # Path compression\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> None:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        # Union by size\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n\n    # Process edges\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        union(u, v)\n\n    # Count distinct roots\n    roots = set()\n    for node in range(1, n + 1):\n        roots.add(find(node))\n\n    sys.stdout.write(str(len(roots)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two integers n and k. Find the smallest integer x such that x ≥ n and x is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n, k ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the value of x.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    \n    # The ceiling of n/k multiplied back by k gives the smallest\n    # multiple of k that is >= n.\n    x = ((n + k - 1) // k) * k\n    print(x)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine whether it is possible to partition the list into two subsets with equal sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 100).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 1000).\n\nOutput:\nOutput \"YES\" if such a partition exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If the total sum is odd, it's impossible to split into two equal parts\n    if total % 2 == 1:\n        return False\n    target = total // 2\n\n    # Boolean DP: dp[s] is True if we can reach sum `s`\n    dp = [False] * (target + 1)\n    dp[0] = True   # Empty subset gives sum 0\n\n    for num in nums:\n        # Traverse backwards to avoid using the same number multiple times\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        # Early exit if we already reached the target\n        if dp[target]:\n            return True\n    return dp[target]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, where each edge has a weight, find the longest path between any two nodes in the tree (the diameter of the tree).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^4), representing an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer, the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Breadth-first traversal (works like DFS here because the graph is a tree).\n    Returns the node farthest from `start` and the whole distance array.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:               # not visited\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    try:\n        n = int(next(it))\n    except StopIteration:\n        return                                     # empty input\n\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First traversal: from an arbitrary node (1) find the farthest node `p`.\n    p, _ = farthest(1, adj, n)\n    # Second traversal: from `p` find the farthest distance (the diameter length).\n    _, dist_from_p = farthest(p, adj, n)\n    diameter = max(dist_from_p)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum that can be obtained by selecting non-adjacent elements. You cannot select two elements that are next to each other in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the maximum sum obtainable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_non_adjacent_sum(arr):\n    \"\"\"\n    Returns the maximum sum obtainable by selecting non-adjacent elements.\n    \"\"\"\n    incl = 0  # best sum that includes the previous element\n    excl = 0  # best sum that excludes the previous element\n\n    for x in arr:\n        new_excl = max(incl, excl)  # we may skip current element\n        incl = excl + x             # take current element, so add to previous excl\n        excl = new_excl             # update excl for next iteration\n\n    return max(incl, excl)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                   # no input found (defensive)\n\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    print(max_non_adjacent_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains a single integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm to find maximum sub-array sum.\"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x  # max(x, cur+x) without calling max()\n        best = best if best > cur else cur   # best = max(best, cur)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Assume there is exactly one solution, and each input has exactly one solution.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n space-separated integers, nums[i] (−10^9 ≤ nums[i] ≤ 10^9).\n- The third line contains an integer target (−10^9 ≤ target ≤ 10^9).\n\nOutput Format:\n- Output two space-separated integers, the indices (0-based) of the two numbers that add up to target.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef two_sum_indices(nums, target):\n    \"\"\"\n    Returns indices (0-based) of the two numbers in `nums`\n    that add up to `target`. Exactly one solution is assumed.\n    \"\"\"\n    seen = {}  # value -> index\n    for idx, num in enumerate(nums):\n        complement = target - num\n        if complement in seen:\n            return seen[complement], idx\n        seen[num] = idx\n    # The problem guarantees exactly one solution, so we should never get here.\n    return -1, -1\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    target = int(data[1 + n])\n\n    i, j = two_sum_indices(nums, target)\n    print(i, j)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer array of length N. Find the length of the longest contiguous subarray with all elements distinct.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer, the length of the longest contiguous subarray with all elements distinct.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n\n    last_pos = dict()          # value -> most recent index\n    left = 0                   # left boundary of current window\n    best = 0\n\n    for right, value in enumerate(arr):\n        if value in last_pos and last_pos[value] >= left:\n            # duplicate inside current window; move left past its previous occurrence\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        window_len = right - left + 1\n        if window_len > best:\n            best = window_len\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, determine whether it is a palindrome after removing all non-alphanumeric characters and converting all letters to lowercase.\n\nInput Format:\n- The first line contains the string s, consisting of up to 10^5 characters.\n\nOutput Format:\n- Print \"Yes\" if the cleaned string is a palindrome, otherwise print \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport string\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n\n    # Build cleaned version: keep alphanumeric, convert letters to lowercase\n    cleaned_chars = []\n    for ch in s:\n        if ch.isalnum():\n            cleaned_chars.append(ch.lower())\n    cleaned = ''.join(cleaned_chars)\n\n    # Check palindrome\n    is_pal = cleaned == cleaned[::-1]\n\n    print(\"Yes\" if is_pal else \"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array a of n positive integers. Find the length of the longest increasing subsequence in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n space-separated integers a[i] (1 ≤ a[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(sequence):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (strict).\n    Uses patience sorting / tails array in O(n log n) time.\n    \"\"\"\n    tails = []                           # tails[i] -> smallest tail of all LIS of length i+1\n    for x in sequence:\n        idx = bisect.bisect_left(tails, x)  # first tail >= x\n        if idx == len(tails):\n            tails.append(x)              # extend LIS length\n        else:\n            tails[idx] = x               # improve existing LIS tail\n    return len(tails)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:                        # no input\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1+n]))\n    print(lis_length(a))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities and m bidirectional roads between them, each road has a length. Find the shortest path from city 1 to city n.\n\nInput:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), representing a road between cities u and v of length w.\n\nOutput:\nPrint a single integer, the length of the shortest path from city 1 to city n. If no path exists, print -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    it = iter(data)\n    n = next(it)\n    m = next(it)\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n        if u == n:\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    print(dist[n] if dist[n] != INF else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the number of distinct ways to write n as the sum of positive integers, where the order of addends does not matter (i.e., partition number of n).\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 500).\n\nOutput Format:\nPrint a single integer: the number of integer partitions of n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    \"\"\"\n    Reads an integer n (1 ≤ n ≤ 500) and prints the partition number p(n),\n    i.e. the number of distinct ways to express n as a sum of positive\n    integers where order does not matter.\n    \"\"\"\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # dp[i] will hold the number of partitions of i\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There is exactly one way to partition 0 – the empty sum.\n\n    # Classic coin-change style DP: consider each possible addend (1..n)\n    for k in range(1, n + 1):\n        for total in range(k, n + 1):\n            dp[total] += dp[total - k]\n\n    print(dp[n])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the longest increasing subsequence in the array and output its length.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    tails = []  # tails[i] = smallest possible tail of an increasing subsequence of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)  # first tail >= x\n        if idx == len(tails):\n            tails.append(x)\n        else:\n            tails[idx] = x\n    print(len(tails))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 through n), find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains two integers u and v, indicating an edge between node u and node v (1 ≤ u, v ≤ n).\n\nOutput:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"Return (farthest_node, distance_to_it) starting from `start`.\"\"\"\n    n = len(adj)\n    dist = [-1] * n\n    dist[start] = 0\n    q = deque([start])\n    farthest = (start, 0)\n    while q:\n        u = q.popleft()\n        du = dist[u]\n        if du > farthest[1]:\n            farthest = (u, du)\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = du + 1\n                q.append(v)\n    return farthest\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    # adjacency list (0-based indices)\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # first BFS from an arbitrary node (0)\n    node_a, _ = bfs(0, adj)\n    # second BFS from the farthest node found\n    _, diameter = bfs(node_a, adj)\n\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with N nodes and M edges, determine the minimum number of edges you need to add to make the graph a tree.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nThe next M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v), denoting an edge.\n\nOutput:\nPrint a single integer: the minimum number of edges to add.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n    \n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n\n    # For an undirected graph to be a tree it must have exactly (n - 1) edges.\n    # The minimum number of edges we still need is therefore:\n    #     max(0, (n - 1) - m)\n    # (If the graph already has at least n-1 edges, we don’t need to add any.)\n    need = max(0, n - 1 - m)\n    print(need)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M consisting of '.' (empty cell) and '#' (blocked cell), determine the number of distinct paths from the top-left corner to the bottom-right corner, moving only right or down, and not passing through blocked cells.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 1000).\nEach of the next N lines contains a string of length M representing a row of the grid.\n\nOutput Format:\nPrint the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n    if len(grid) != n:\n        # Incomplete input\n        print(0)\n        return\n\n    # If start or end is blocked, no path exists\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # We only need two rows for DP (current and previous)\n    prev = [0] * m\n    curr = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                curr[j] = 0\n            else:\n                if i == 0 and j == 0:\n                    curr[j] = 1  # Starting cell\n                else:\n                    from_top = prev[j] if i > 0 else 0\n                    from_left = curr[j - 1] if j > 0 else 0\n                    curr[j] = (from_top + from_left) % MOD\n        # Prepare for next iteration\n        prev, curr = curr, prev  # reuse lists to save memory\n\n    # The result is in prev because of the last swap\n    print(prev[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Count the number of trailing zeros in N! (N factorial).\n\nInput:\nA single integer N (1 ≤ N ≤ 10^9).\n\nOutput:\nOutput the number of trailing zeros in N!.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef trailing_zeros_in_factorial(n: int) -> int:\n    \"\"\"\n    Return the number of trailing zeros in n! by counting\n    how many times 5 is a factor in the numbers 1..n.\n    \"\"\"\n    count = 0\n    while n:\n        n //= 5\n        count += n\n    return count\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    print(trailing_zeros_in_factorial(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, count the number of pairs (i, j) such that i < j and a_i + a_j is even.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    evens = sum(1 for x in nums if x % 2 == 0)\n    odds = n - evens\n\n    # Number of ways to pick 2 evens + number of ways to pick 2 odds\n    res = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. You can perform up to K operations. In one operation, you can increase any element by 1. What is the maximum possible minimum value in the array after all operations are used?\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 2×10^5, 0 ≤ K ≤ 10^9).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the maximum possible minimum value of the array after at most K operations.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, K = map(int, data[:2])\n    a = list(map(int, data[2:]))\n\n    mn = min(a)\n    lo, hi = mn, mn + K  # the min value can never exceed mn + K\n    best = mn\n\n    def can(target: int) -> bool:\n        \"\"\"Return True if we can raise every element to at least `target`\n        using at most K increments.\"\"\"\n        need = 0\n        for v in a:\n            if v < target:\n                need += target - v\n                if need > K:           # early exit – already impossible\n                    return False\n        return need <= K\n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if can(mid):\n            best = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of elements whose sum is equal to a given target value.\n\nInput:\nThe first line contains two integers n and t (1 ≤ n ≤ 10^5, 1 ≤ t ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, target = data[0], data[1]\n    arr = data[2:2 + n]\n\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the minimum number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum up to n.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^4).\n\nOutput:\nPrint a single integer, the minimum number of perfect square numbers that sum to n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef min_num_squares(n: int) -> int:\n    \"\"\"\n    Returns the minimum number of perfect squares that sum to n.\n    DP approach: dp[i] = 1 + min(dp[i - j*j]) for all j*j <= i\n    \"\"\"\n    dp = [0] + [float('inf')] * n\n    for i in range(1, n + 1):\n        # iterate through all squares <= i\n        j = 1\n        while j * j <= i:\n            square = j * j\n            if dp[i - square] + 1 < dp[i]:\n                dp[i] = dp[i - square] + 1\n            j += 1\n    return dp[n]\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n    print(min_num_squares(n))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers L and R, count how many numbers between L and R (inclusive) are palindromic in their decimal representation.\n\nInput Format:\n- The first line contains two integers L and R (1 ≤ L ≤ R ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the count of palindromic numbers between L and R.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef is_palindrome(n: int) -> bool:\n    s = str(n)\n    return s == s[::-1]\n\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    L, R = map(int, data.split())\n\n    count = 0\n    for num in range(L, R + 1):\n        if is_palindrome(num):\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Your task is to rearrange the elements such that no two adjacent elements are equal. If such an arrangement is not possible, output -1.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5).\n\nOutput Format:\n- If possible, output any valid rearrangement as n space-separated integers. Otherwise, print -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef rearrange_no_adjacent(arr):\n    n = len(arr)\n    freq = Counter(arr)\n    \n    # If any element appears more than ceil(n/2) times, impossible\n    max_allowed = (n + 1) // 2\n    if max(freq.values()) > max_allowed:\n        return None\n    \n    # Sort values by frequency descending\n    items = sorted(freq.items(), key=lambda x: -x[1])   # (value, freq)\n    \n    res = [None] * n\n    idx = 0                       # current position to fill\n    \n    for val, cnt in items:\n        for _ in range(cnt):\n            if idx >= n:          # switch to odd indices after even ones are filled\n                idx = 1\n            res[idx] = val\n            idx += 2\n    \n    # Final safety check (can be omitted in production)\n    for i in range(1, n):\n        if res[i] == res[i-1]:\n            return None\n    return res\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    result = rearrange_no_adjacent(arr)\n    if result is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n × n grid consisting of characters '.' (empty) and '#' (blocked), determine the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (n,n) by moving only right or down and not passing through any blocked cells. Return the answer modulo 10^9+7.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000).\n- The next n lines each contain a string of length n consisting of '.' and '#'.\n\nOutput Format:\n- Output a single integer: the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    grid = [line.strip() for line in data[1:1+n]]\n\n    # One-dimensional DP: dp[j] = number of ways to reach current row, column j\n    dp = [0] * n\n\n    # Initialize first cell\n    if grid[0][0] == '.':\n        dp[0] = 1\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(n):\n            if row[j] == '#':\n                dp[j] = 0                   # Blocked cell\n            else:\n                if j > 0:\n                    dp[j] = (dp[j] + dp[j-1]) % MOD  # From left + from top (already in dp[j])\n                # For j == 0 we can only come from top, which is already in dp[0]\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer N, find the number of distinct ordered pairs of positive integers (a, b) such that a × b = N.\n\nInput:\nA single integer N (1 ≤ N ≤ 10^{12}).\n\nOutput:\nOutput a single integer: the number of ordered pairs (a, b) where a × b = N.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef count_divisors(n: int) -> int:\n    \"\"\"Return the number of positive divisors of n (tau function).\"\"\"\n    if n == 1:\n        return 1\n    cnt = 1\n    # factor out 2\n    power = 0\n    while n % 2 == 0:\n        n //= 2\n        power += 1\n    if power:\n        cnt *= (power + 1)\n\n    # factor odd numbers\n    i = 3\n    limit = int(math.isqrt(n)) + 1\n    while i <= limit and n > 1:\n        power = 0\n        while n % i == 0:\n            n //= i\n            power += 1\n        if power:\n            cnt *= (power + 1)\n            limit = int(math.isqrt(n)) + 1  # update the limit because n shrunk\n        i += 2\n\n    # if leftover n is prime > 1\n    if n > 1:\n        cnt *= 2\n    return cnt\n\ndef main():\n    n_str = sys.stdin.readline().strip()\n    if not n_str:\n        return\n    n = int(n_str)\n    print(count_divisors(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum difference between any two elements in the array. Output the minimum absolute difference found.\n\nInput Format:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the minimum absolute difference between any two elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Sort the array to bring closest numbers together\n    nums.sort()\n    \n    # Initialize minimum difference with the first adjacent pair\n    min_diff = abs(nums[1] - nums[0])\n    \n    # Scan adjacent pairs to find the minimum absolute difference\n    for i in range(2, n):\n        diff = nums[i] - nums[i - 1]  # non-negative since sorted\n        if diff < min_diff:\n            min_diff = diff\n            if min_diff == 0:          # cannot get smaller than 0\n                break\n    \n    print(min_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition it into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible difference.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 20).\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6).\n\nOutput:\nPrint a single integer: the minimum absolute difference between the sums of the two subsets.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    total = sum(nums)\n    best = total                      # worst-case difference\n    size = 1 << n                     # 2^n subsets\n\n    # Pre-allocate array to keep subset sums so we can build each\n    # value from a previously computed one in O(1) time.\n    subset_sum = [0] * size\n\n    for mask in range(1, size):\n        lsb = mask & -mask            # least significant set bit\n        idx = lsb.bit_length() - 1    # its position (0-based)\n        subset_sum[mask] = subset_sum[mask ^ lsb] + nums[idx]\n\n        diff = abs(total - 2 * subset_sum[mask])\n        if diff < best:\n            best = diff\n            if best == 0:             # cannot do better\n                break\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s of length n consisting of lowercase English letters. Find the length of the longest substring with all unique characters.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains a string s of length n.\n\nOutput:\nPrint a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_seen = {}\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # In case the provided n is inconsistent, truncate/pad to be safe\n    s = s[:n]\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the shortest substring which contains all the distinct characters present in s.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains a string s of length n.\n\nOutput:\nPrint a single integer, the length of the shortest such substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    \n    # All distinct characters of the whole string\n    distinct = set(s)\n    need = len(distinct)\n    \n    # Sliding window\n    freq = defaultdict(int)\n    have = 0                     # how many distinct chars we currently have in window\n    best = n + 1                # answer to minimise\n    left = 0\n    \n    for right, ch in enumerate(s):\n        # Add current character to the window\n        freq[ch] += 1\n        if freq[ch] == 1:        # new distinct char in window\n            have += 1\n        \n        # When current window contains all needed distinct chars\n        while have == need:\n            best = min(best, right - left + 1)\n            # Try to shrink from the left\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                have -= 1\n            left += 1\n    \n    print(best if best <= n else 0)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers of length n, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer — the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = x if max_ending_here + x < x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the minimal number of elements you need to remove so that the greatest common divisor (GCD) of the remaining elements is greater than 1. If it is not possible, output -1.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the minimum number of elements to remove, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom collections import defaultdict\n\n# ---------  core  ------------------------------------------------------------\ndef build_spf(limit: int) -> list:\n    \"\"\"Return array ‘spf’ where spf[x] is the smallest prime factor of x.\"\"\"\n    spf = [0] * (limit + 1)\n    for i in range(2, limit + 1):\n        if spf[i] == 0:                # i is prime\n            spf[i] = i\n            if i * i <= limit:         # mark its multiples\n                step = i\n                start = i * i\n                for j in range(start, limit + 1, step):\n                    if spf[j] == 0:\n                        spf[j] = i\n    return spf\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    a = data[1:1 + n]\n\n    # 1. quick impossible case: every value is 1\n    if all(x == 1 for x in a):\n        print(-1)\n        return\n\n    # 2. if gcd of the whole array already > 1, no removals are needed\n    g = 0\n    for x in a:\n        g = math.gcd(g, x)\n    if g > 1:\n        print(0)\n        return\n\n    # 3. build smallest-prime-factor table up to max(a)\n    mx = max(a)\n    spf = build_spf(mx)\n\n    # 4. count how many numbers are divisible by each prime\n    cnt = defaultdict(int)\n    for num in a:\n        x = num\n        last = 0                      # make sure we count each prime only once per number\n        while x > 1:\n            p = spf[x]\n            if p != last:\n                cnt[p] += 1\n                last = p\n            while x % p == 0:\n                x //= p\n\n    best = max(cnt.values(), default=0)\n\n    # 5. answer\n    if best == 0:                     # should not happen because we filtered all-1’s earlier\n        print(-1)\n    else:\n        print(n - best)\n\n\n# ---------------------------------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, each node has a value. For each node, compute the sum of values in its subtree (including itself).\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line has N integers v_1, v_2, ..., v_N (1 ≤ v_i ≤ 10^4), the values.\nEach of the next N-1 lines contains two integers u and v, denoting an edge between nodes u and v (1 ≤ u, v ≤ N).\n\nOutput Format:\nPrint N integers, the subtree sums for nodes 1 to N.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    values = [0] + data[1:n+1]            # 1-based indexing\n    edges_data = data[n+1:]\n    \n    adj = [[] for _ in range(n + 1)]\n    for i in range(0, len(edges_data), 2):\n        u, v = edges_data[i], edges_data[i + 1]\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    subtree_sum = [0] * (n + 1)\n    \n    # iterative DFS: (node, parent, processed_flag)\n    stack = [(1, 0, 0)]          # start from root 1\n    while stack:\n        node, parent, processed = stack.pop()\n        if processed == 0:\n            # first time: push back for post-processing, then children\n            stack.append((node, parent, 1))\n            for nei in adj[node]:\n                if nei != parent:\n                    stack.append((nei, node, 0))\n        else:\n            s = values[node]\n            for nei in adj[node]:\n                if nei != parent:\n                    s += subtree_sum[nei]\n            subtree_sum[node] = s\n    \n    # output answers for nodes 1..N\n    out = ' '.join(str(subtree_sum[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. If the array contains only negative numbers, return the largest single element.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm:\n    Keeps track of the maximum sub-array sum ending at the current position\n    and the overall maximum found so far.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at x\n        max_ending_here = max(x, max_ending_here + x)\n        # Update global maximum if needed\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Directly slice the next n integers\n    arr = list(map(int, data[1:1 + n]))\n    # Edge case: if input line was shorter than advertised (shouldn't happen),\n    # fall back to reading remaining items\n    if len(arr) < n:\n        arr.extend(map(int, data[1 + len(arr):]))\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the minimum number of moves required to make all elements equal, where in one move you can increment or decrement any element by 1.\n\nInput Format:\n- The first line contains a single integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers (−10^9 ≤ A_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the minimum number of moves.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    arr.sort()\n    median = arr[n // 2]  # lower median works for both even and odd n\n\n    moves = sum(abs(x - median) for x in arr)\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if it is possible to rearrange the letters of S to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput YES or NO.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines if the string `s` can be rearranged into a palindrome.\n    A string can be permuted into a palindrome iff at most one character\n    occurs an odd number of times.\n\n    Args:\n        s (str): input string consisting of lowercase English letters\n\n    Returns:\n        bool: True if a palindrome permutation exists, else False\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for cnt in freq.values() if cnt % 2)\n    # For palindromes, at most one char may have an odd count\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Determine the length of the longest substring with all distinct characters.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Print a single integer: the length of the longest substring of s with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_seen = {}           # character -> last position\n    left = 0                 # left boundary of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # character repeated inside the current window\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    # Defensive: truncate/extend if lengths mismatch, but assume valid.\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n intervals [l_i, r_i]. Find the minimum number of points you need to select such that each interval contains at least one selected point.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nEach of the next n lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the minimal number of points required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    intervals = []\n    idx = 1\n    for _ in range(n):\n        l = int(data[idx]); r = int(data[idx + 1]); idx += 2\n        intervals.append((l, r))\n\n    # Sort by right endpoints (ascending)\n    intervals.sort(key=lambda x: x[1])\n\n    points_needed = 0\n    last_point = -10**18  # smaller than any possible l_i\n\n    for l, r in intervals:\n        if last_point < l:          # current interval not covered\n            last_point = r          # pick the right endpoint\n            points_needed += 1\n\n    print(points_needed)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring that contains no repeating characters.\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer — the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the latest index (+1) where each character appeared\n    last_pos = {}\n    max_len = 0\n    left = 0  # Left bound of the current window\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] > left:\n            # If character is repeated inside current window,\n            # move left pointer just after the previous occurrence\n            left = last_pos[ch]\n        # Update/insert the character's next position (right + 1)\n        last_pos[ch] = right + 1\n        # Update maximum window length found so far\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    result = longest_unique_substring_length(s)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exists a pair of elements that sum up to a given integer k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\nThe second line contains n integers, each between -10^9 and 10^9.\n\nOutput Format:\nOutput \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    seen = set()\n    for x in nums:\n        if k - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Find the minimum number of operations required to make all elements equal, where in one operation you can increment or decrement any element by 1.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of operations needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    arr.sort()\n    mid = arr[n // 2]              # lower median (works for both even and odd)\n    \n    total_moves = sum(abs(x - mid) for x in arr)\n    print(total_moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum sum over all contiguous sub-arrays.\n    \"\"\"\n    current = best = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    # Guard in case fewer than n numbers were actually provided\n    if len(arr) < n:\n        raise ValueError(\"Insufficient number of integers provided.\")\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the minimum number of characters you need to delete to make s a palindrome.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2*10^3), the length of the string.\nThe second line contains the string s of length n.\n\nOutput:\nPrint a single integer: the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_palindromic_subsequence_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in s\n    using an LCS (Longest Common Subsequence) DP between s and reversed(s).\n    Memory usage is reduced to O(n) by keeping only two rows.\n    \"\"\"\n    n = len(s)\n    rev = s[::-1]\n\n    prev = [0] * (n + 1)          # dp for previous row (i-1)\n    for i in range(1, n + 1):\n        cur = [0] * (n + 1)       # dp for current row (i)\n        si = s[i - 1]\n        for j in range(1, n + 1):\n            if si == rev[j - 1]:\n                cur[j] = prev[j - 1] + 1\n            else:\n                cur[j] = max(prev[j], cur[j - 1])\n        prev = cur\n    return prev[n]\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else ''\n    # Safety: in case of trailing spaces / newlines\n    s = s[:n]\n\n    lps_len = longest_palindromic_subsequence_length(s)\n    min_deletions = n - lps_len\n    print(min_deletions)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether it is possible to rearrange the characters of S to form a palindrome. Output 'YES' if possible, otherwise 'NO'.\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of string `s` can be rearranged\n    to form a palindrome, otherwise False.\n    \"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for c in freq.values() if c % 2)\n    # For a palindrome, at most one character may have an odd frequency\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points on a 2D grid, determine the number of pairs of points that have the same x-coordinate or the same y-coordinate.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nEach of the next n lines contains two integers xi and yi (1 ≤ xi, yi ≤ 10^9), the coordinates of the i-th point.\n\nOutput:\nPrint a single integer, the number of pairs of distinct points that share either the same x-coordinate or the same y-coordinate.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    count_x = defaultdict(int)       # frequency of each x\n    count_y = defaultdict(int)       # frequency of each y\n    count_xy = defaultdict(int)      # frequency of each (x, y) pair\n    \n    for _ in range(n):\n        x = int(next(it))\n        y = int(next(it))\n        count_x[x]  += 1\n        count_y[y]  += 1\n        count_xy[(x, y)] += 1\n    \n    # Helper: number of unordered pairs in a multiset of size k  -> C(k,2)\n    def pairs(k: int) -> int:\n        return k * (k - 1) // 2\n    \n    result = 0\n    \n    # Pairs sharing the same x\n    for k in count_x.values():\n        result += pairs(k)\n    \n    # Pairs sharing the same y\n    for k in count_y.values():\n        result += pairs(k)\n    \n    # Pairs counted twice (identical points) — subtract once\n    for k in count_xy.values():\n        result -= pairs(k)\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers, where each integer nums[i] satisfies -10^4 ≤ nums[i] ≤ 10^4.\n\nOutput Format:\nOutput a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm – O(n) time, O(1) extra space.\n    \"\"\"\n    best = cur = nums[0]\n    for x in nums[1:]:\n        cur = x if cur < 0 else cur + x\n        if cur > best:\n            best = cur\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer N, find the number of ways to write N as a sum of consecutive positive integers (with at least two terms).\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^{12}).\n\nOutput Format:\nPrint a single integer, the number of ways.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef count_odd_divisors(n: int) -> int:\n    \"\"\"\n    Return the total number of odd divisors of n.\n    \"\"\"\n    # Remove all factors of 2 – they do not affect odd divisors\n    while n % 2 == 0:\n        n //= 2\n\n    # Now n is odd\n    divisors = 1\n    p = 3\n    # Trial-divide up to sqrt(n)\n    while p * p <= n:\n        if n % p == 0:\n            exp = 0\n            while n % p == 0:\n                n //= p\n                exp += 1\n            divisors *= (exp + 1)\n        p += 2\n    # Any remaining n > 1 is an odd prime factor\n    if n > 1:\n        divisors *= 2\n    return divisors\n\n\ndef main() -> None:\n    n_str = sys.stdin.readline().strip()\n    if not n_str:\n        return\n    n = int(n_str)\n\n    # Number of ways = (# odd divisors) − 1  (exclude the single-term representation)\n    ways = count_odd_divisors(n) - 1\n    # For n = 0 or n = 1, ensure we don't print negative\n    if ways < 0:\n        ways = 0\n    print(ways)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Your task is to compute the length of the longest substring in which no character repeats.\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\nOutput Format:\n- Output a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    last_occurrence = {}\n    left = 0           # left boundary of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        # if character seen in current window, move left boundary\n        if ch in last_occurrence and last_occurrence[ch] >= left:\n            left = last_occurrence[ch] + 1\n\n        last_occurrence[ch] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine whether it is possible to rearrange the characters of s to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput Format:\nThe first line contains a single string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters.\n\nOutput Format:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if some permutation of `s` can be a palindrome,\n    otherwise False.\n    \"\"\"\n    freq = Counter(s)\n    # Count characters with odd frequency\n    odd_count = sum(1 for count in freq.values() if count % 2)\n    # For a string of length n, at most one char may have odd frequency\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray that contains at most K distinct numbers.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ N).\nThe second line contains N space-separated integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_subarray_at_most_k_distinct(arr, k):\n    count = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, value in enumerate(arr):\n        count[value] += 1\n\n        # Shrink window if too many distinct numbers\n        while len(count) > k:\n            left_val = arr[left]\n            count[left_val] -= 1\n            if count[left_val] == 0:\n                del count[left_val]\n            left += 1\n\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n    result = longest_subarray_at_most_k_distinct(nums, k)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, return the smallest positive integer that does not appear in nums.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums_i (−10^6 ≤ nums_i ≤ 10^6).\n\nOutput Format:\n- Output a single integer: the smallest positive integer not present in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Boolean presence array for values 1 .. n+1\n    present = [False] * (n + 2)   # index 0 unused\n\n    for x in nums:\n        if 1 <= x <= n + 1:\n            present[x] = True\n\n    # Find the first index (smallest positive) that is not present\n    for i in range(1, n + 2):\n        if not present[i]:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the minimum number of elements you need to remove so that the remaining array contains no two identical numbers.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer, the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])               # number of elements (not actually needed for logic)\n    nums = map(int, data[1:])      # the array elements\n    distinct_count = len(set(nums))\n    removals = n - distinct_count  # elements to remove so all remaining are unique\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    # Read the input string\n    s = sys.stdin.readline().rstrip('\\n')\n\n    # Sliding-window / two-pointer approach\n    last_pos = {}          # Stores the most recent index of each character\n    left = 0               # Left bound of the current window\n    max_len = 0            # Answer to keep track of the maximum length found\n\n    for right, ch in enumerate(s):\n        # If character seen before and inside current window, move the left bound\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        # Update (or add) the last position for this character\n        last_pos[ch] = right\n        # Update maximum window length\n        max_len = max(max_len, right - left + 1)\n\n    print(max_len)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, determine if it can be expressed as the sum of two prime numbers.\n\nInput:\nThe first line contains an integer n (4 ≤ n ≤ 10^6).\n\nOutput:\nPrint \"YES\" if n can be written as the sum of two primes, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef sieve(limit: int) -> list:\n    \"\"\"Return a boolean list `is_prime` where is_prime[i] is True iff i is prime.\"\"\"\n    is_prime = [True] * (limit + 1)\n    if limit >= 0:\n        is_prime[0] = False\n    if limit >= 1:\n        is_prime[1] = False\n    for p in range(2, int(math.isqrt(limit)) + 1):\n        if is_prime[p]:\n            for multiple in range(p * p, limit + 1, p):\n                is_prime[multiple] = False\n    return is_prime\n\n\ndef main() -> None:\n    data = sys.stdin.readline()\n    if not data:\n        return\n    n = int(data.strip())\n\n    # Build the sieve up to n\n    prime = sieve(n)\n\n    # Check if n can be expressed as sum of two primes\n    possible = False\n    for p in range(2, n // 2 + 1):          # only need to check up to n//2\n        if prime[p] and prime[n - p]:\n            possible = True\n            break\n\n    print(\"YES\" if possible else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes numbered from 1 to n. Each edge has a positive integer weight. For all nodes, compute the sum of distances from that node to all other nodes in the tree.\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 2*10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v of weight w.\n\nOutput:\nPrint n integers, where the i-th integer is the sum of distances from node i to all other nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    it = iter(data[1:])\n\n    adj = [[] for _ in range(n + 1)]\n    for u_str, v_str, w_str in zip(it, it, it):\n        u = int(u_str)\n        v = int(v_str)\n        w = int(w_str)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    parent = [0] * (n + 1)          # parent[node]  (root's parent stays 0/-1)\n    dist   = [0] * (n + 1)          # distance from root (node 1)\n    size   = [1] * (n + 1)          # subtree sizes, initial 1 for each node\n    order  = []                     # DFS order (pre-order)\n\n    # ---------- 1st pass: iterative DFS to get order, parents and distances ----------\n    stack = [1]\n    parent[1] = -1                  # mark root\n    while stack:\n        u = stack.pop()\n        order.append(u)\n        for v, w in adj[u]:\n            if v == parent[u]:\n                continue\n            parent[v] = u\n            dist[v] = dist[u] + w\n            stack.append(v)\n\n    # ---------- 2nd pass: compute subtree sizes (post-order using reversed order) -----\n    for u in reversed(order):\n        for v, _ in adj[u]:\n            if parent[v] == u:      # v is a child of u\n                size[u] += size[v]\n\n    # ---------- 3rd pass: rerooting to obtain answers for every node ------------------\n    ans = [0] * (n + 1)\n    ans[1] = sum(dist[1:])          # sum of distances from root to every node\n\n    for u in order:                 # pre-order ensures parent answer ready\n        for v, w in adj[u]:\n            if parent[v] == u:      # child edge u-v with weight w\n                # when moving root from u to v:\n                #   nodes in v's subtree become w closer  -> decrease total by size[v]*w\n                #   the rest become w farther            -> increase total by (n-size[v])*w\n                ans[v] = ans[u] + (n - 2 * size[v]) * w\n    # ---------- output ----------------------------------------------------------------\n    sys.stdout.write(' '.join(str(ans[i]) for i in range(1, n + 1)))\n\n# --------------------------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the index of the first occurrence of the maximum value. If there are multiple occurrences, return the smallest index.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 1000), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^5 ≤ a_i ≤ 10^5).\n\nOutput Format:\nOutput a single integer, the index (1-based) of the first occurrence of the maximum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # In case the input has fewer numbers than specified, slicing prevents IndexError\n    nums = list(map(int, data[1:1 + n]))\n\n    # Initialize with the first element's value and index\n    max_val = nums[0]\n    max_idx = 0  # 0-based\n\n    for idx in range(1, n):\n        if nums[idx] > max_val:\n            max_val = nums[idx]\n            max_idx = idx\n\n    # Convert to 1-based index for output\n    print(max_idx + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers and an integer k, find the number of subarrays whose sum is exactly k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer — the number of subarrays whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    # the next n integers are the array elements\n    arr = list(map(int, data[2:2 + n]))\n\n    prefix_counts = defaultdict(int)\n    prefix_counts[0] = 1          # empty prefix\n    current_sum = 0\n    result = 0\n\n    for value in arr:\n        current_sum += value\n        # how many times have we seen (current_sum - k) as a prefix?\n        result += prefix_counts[current_sum - k]\n        prefix_counts[current_sum] += 1\n\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a connected, undirected graph with n nodes and m edges. Each edge has a positive integer weight. Find the length of the shortest path from node 1 to node n.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the minimum total weight from node 1 to node n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10 ** 20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n        if u == n:          # early exit when we reach target\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    print(dist[n])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with N nodes and M edges, determine whether there exists a cycle in the graph.\n\nInput:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), indicating a directed edge from u to v.\n\nOutput:\nPrint \"YES\" if there is at least one cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef has_cycle(n, adj):\n    WHITE, GRAY, BLACK = 0, 1, 2\n    color = [WHITE] * n\n\n    for start in range(n):\n        if color[start] != WHITE:\n            continue\n\n        # iterative DFS with explicit stack (node, next_child_index)\n        stack = [(start, 0)]\n        color[start] = GRAY\n\n        while stack:\n            node, idx = stack[-1]\n\n            if idx < len(adj[node]):          # still have neighbours to process\n                nxt = adj[node][idx]\n                stack[-1] = (node, idx + 1)   # increment edge index for current node\n\n                if color[nxt] == WHITE:\n                    color[nxt] = GRAY\n                    stack.append((nxt, 0))\n                elif color[nxt] == GRAY:      # back-edge ⇒ cycle\n                    return True\n                # if BLACK, ignore\n            else:                             # all neighbours done\n                color[node] = BLACK\n                stack.pop()\n\n    return False\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        adj[u].append(v)\n\n    print(\"YES\" if has_cycle(n, adj) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a positive integer N. Find the smallest integer greater than N that is a palindrome.\n\nInput Format:\nA single line containing the integer N (1 ≤ N ≤ 10^6).\n\nOutput Format:\nPrint a single integer: the smallest palindrome strictly greater than N.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef next_palindrome(num_str: str) -> str:\n    \"\"\"\n    Returns the smallest palindrome that is >= num_str.\n    If the palindrome equals num_str itself we will later\n    force moving to the next one (so the final answer is > original N).\n    \"\"\"\n    s = list(num_str)\n    n = len(s)\n\n    # Step 1: mirror the left half onto the right half\n    for i in range(n // 2):\n        s[-1 - i] = s[i]\n    mirrored = ''.join(s)\n\n    # If mirrored already > original, it's a valid candidate\n    if mirrored > num_str:\n        return mirrored\n\n    # Step 2: we need to increment the middle part and then mirror again\n    carry = 1\n    mid_left = n // 2 - 1\n    mid_right = n // 2 if n % 2 == 0 else n // 2  # start position to increment\n    i = mid_right if n % 2 else mid_left\n\n    while i >= 0 and carry:\n        new_digit = int(s[i]) + carry\n        carry = new_digit // 10\n        s[i] = str(new_digit % 10)\n        i -= 1\n\n    # Propagate the carried increment to the right place for even/odd lengths\n    # After increment on left side, re-mirror it to the right side\n    if carry:  # this happens when original number was 999..9\n        # example: 999 -> 1001, length increases by 1\n        return '1' + ('0' * (n - 1)) + '1'\n\n    for i in range(n // 2):\n        s[-1 - i] = s[i]\n\n    return ''.join(s)\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:   # empty input guard\n        return\n\n    N = int(data)\n    # obtain palindrome >= current number\n    candidate = next_palindrome(str(N))\n    # if candidate is not strictly greater, compute again starting from N+1\n    if int(candidate) <= N:\n        candidate = next_palindrome(str(N + 1))\n\n    print(int(candidate))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    s = sys.stdin.readline().rstrip()       # read the input string\n\n    last_pos = {}        # stores last seen index of each character\n    start = 0            # left boundary of current window\n    best = 0             # length of longest valid substring seen so far\n\n    for i, ch in enumerate(s):\n        # If we've seen this character in the current window, move start\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n\n        last_pos[ch] = i                     # update last seen position\n        best = max(best, i - start + 1)      # update best length\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum that can be obtained by selecting non-adjacent elements. You cannot pick two consecutive elements.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_non_adjacent_sum(arr):\n    \"\"\"\n    Returns the maximum sum obtainable from a list `arr`\n    by picking any subset of non-adjacent elements.\n    An empty subset is allowed (sum = 0).\n    \"\"\"\n    prev = 0      # best sum up to the previous index\n    prev2 = 0     # best sum up to the index before previous\n\n    for value in arr:\n        # If we take current element, total = prev2 + value\n        # If we skip it, total = prev\n        curr = max(prev, prev2 + value, 0)  # 0 allows picking nothing at all\n        prev2, prev = prev, curr\n\n    return prev\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    result = max_non_adjacent_sum(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the number of pairs (i, j) such that i < j and a_i + a_j is divisible by a given integer K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 2 × 10^5, 1 ≤ K ≤ 10^5).\nThe second line contains N space-separated integers a_1, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n\n    nums = [int(next(it)) for _ in range(N)]\n\n    # Count remainders modulo K\n    cnt = Counter()\n    for x in nums:\n        cnt[x % K] += 1\n\n    ans = 0\n\n    # Remainder 0 pairs with itself\n    z = cnt.get(0, 0)\n    ans += z * (z - 1) // 2\n\n    # When K is even, remainder K/2 pairs with itself\n    if K % 2 == 0:\n        m = cnt.get(K // 2, 0)\n        ans += m * (m - 1) // 2\n        upper = K // 2  # we will iterate only up to K//2 -1 below\n    else:\n        upper = (K + 1) // 2  # iterate up to floor(K/2)\n\n    # Handle other complementary remainder pairs\n    for r in range(1, upper):\n        ans += cnt.get(r, 0) * cnt.get(K - r, 0)\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the maximum sum of a non-empty subsequence such that no two chosen elements are adjacent in the original array.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint the maximum sum possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    if n == 1:\n        print(a[0])\n        return\n\n    prev2 = 0          # dp[i-2]\n    prev1 = a[0]       # dp[i-1], where i = 1 (1-based)\n    for i in range(1, n):\n        curr = max(prev1, prev2 + a[i])\n        prev2, prev1 = prev1, curr\n\n    print(prev1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m with each cell either empty ('.') or blocked ('#'), find the number of distinct paths from the top-left corner to the bottom-right corner, moving only right or down, and never stepping on a blocked cell. Output the answer modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of length m consisting only of '.' and '#'.\n\nOutput:\nPrint a single integer: the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid_chars = data[2:]\n    # grid_chars should contain n strings of length m\n    # Convert to list of strings for easy indexing\n    grid = grid_chars[:n]\n\n    # If either start or end cell is blocked, no path exists\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # We can keep only previous row to save memory, but 1000x1000 is small\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = 1  # starting position\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '#':\n                dp[i][j] = 0\n                continue\n            if i == 0 and j == 0:\n                continue  # already set\n            from_up = dp[i - 1][j] if i > 0 else 0\n            from_left = dp[i][j - 1] if j > 0 else 0\n            dp[i][j] = (from_up + from_left) % MOD\n\n    print(dp[-1][-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_i (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray of the input array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm to find maximum subarray sum.\"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x  # faster than using max() in tight loops\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 through n). Each edge has a weight. Find the length of the longest path in the tree (the diameter of the tree).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^6), representing an edge between node u and node v with weight w.\n\nOutput Format:\n- Output a single integer: the length of the longest path in the tree.\n\nConstraints:\n- 2 ≤ n ≤ 10^5\n- 1 ≤ w ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef read_ints():\n    return map(int, sys.stdin.buffer.read().split())\n\ndef farthest(start, adj, n):\n    \"\"\"Return (node, distance) farthest from `start` in the tree.\"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n    far_node = start\n    max_dist = 0\n\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if dist[v] == -1:            # not visited yet\n                dist[v] = dist[u] + w\n                stack.append(v)\n                if dist[v] > max_dist:\n                    max_dist = dist[v]\n                    far_node = v\n    return far_node, max_dist\n\ndef main():\n    data = list(read_ints())\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS/BFS to find one endpoint of the diameter\n    node_a, _ = farthest(1, adj, n)\n\n    # Second DFS/BFS from that endpoint to find the diameter length\n    _, diameter = farthest(node_a, adj, n)\n\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, where each edge has a weight, compute the longest path length (diameter) in the tree.\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w, denoting an undirected edge between nodes u and v with weight w (1 ≤ u,v ≤ N; 1 ≤ w ≤ 10^4).\n\nOutput Format:\nOutput a single integer representing the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict, deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns (node, distance) that is farthest from 'start'\n    using an iterative DFS (stack) – safe for deep trees.\n    \"\"\"\n    stack = [(start, -1, 0)]          # (current, parent, distance_so_far)\n    far_node = start\n    max_dist = 0\n\n    while stack:\n        u, parent, dist = stack.pop()\n        if dist > max_dist:\n            max_dist = dist\n            far_node = u\n        for v, w in adj[u]:\n            if v != parent:\n                stack.append((v, u, dist + w))\n\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First traversal: from arbitrary node (1) find farthest node\n    node_a, _ = farthest_node(1, adj, n)\n\n    # Second traversal: from node_a find the actual diameter length\n    _, diameter = farthest_node(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), find the diameter of the tree (the length of the longest path between any two nodes).\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating an edge between nodes u and v.\nOutput Format:\n- Output a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"Return (farthest_node, farthest_distance) from start using BFS.\"\"\"\n    n = len(adj) - 1\n    dist = [-1] * (n + 1)\n    q = deque([start])\n    dist[start] = 0\n    farthest_node = start\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > dist[farthest_node]:\n                    farthest_node = v\n    return farthest_node, dist[farthest_node]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS to find one endpoint of the diameter\n    start_node, _ = bfs(1, adj)\n    # Second BFS from that endpoint to get the diameter length\n    _, diameter = bfs(start_node, adj)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find the minimum number of characters you need to change in S to make it a palindrome.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\n\nOutput:\nOutput a single integer: the minimum number of character changes required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line: length (we don't actually need it, but read it to respect the format)\n    # We still convert it to int to guarantee the caller supplied an integer.\n    n = int(data[0].strip())\n    # Second line: the string\n    s = data[1].strip() if len(data) > 1 else \"\"\n\n    # Ensure length consistency (if the supplied N is wrong, we just rely on real length)\n    n = min(n, len(s))\n\n    changes = 0\n    # Only need to compare up to the middle\n    for i in range(n // 2):\n        if s[i] != s[-1 - i]:\n            changes += 1\n\n    print(changes)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S containing only lowercase English letters. Find the length of the longest substring with all distinct characters.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5), the length of the string.\n- The second line contains the string S.\n\nOutput Format:\n- Output a single integer: the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    \n    last_seen = {}            # maps character -> last index it appeared\n    left = 0                  # left boundary of current window\n    best = 0                  # length of the longest distinct-character substring found\n    \n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # duplicate inside current window; move left past its previous occurrence\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the minimum value in the array and print its index (0-based). If there are multiple occurrences of the minimum value, output the smallest index.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 100).\nThe second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000).\n\nOutput:\nPrint a single integer: the index of the minimum value in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return                     # No input, nothing to do (safety).\n    \n    n = int(data[0])              # Number of elements\n    nums = list(map(int, data[1:1 + n]))  # Read exactly n numbers\n    \n    # Find minimum value and its first occurrence index\n    min_val = nums[0]\n    min_idx = 0\n    for idx in range(1, n):\n        if nums[idx] < min_val:\n            min_val = nums[idx]\n            min_idx = idx\n    \n    print(min_idx)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value ai. For each node, compute the sum of values in its subtree (including itself).\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v.\n\nOutput Format:\nPrint n integers: the i-th integer is the sum of values in the subtree rooted at node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(300000)          # allow deep recursion\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n\n    n = int(next(it))\n    a = [0] + [int(next(it)) for _ in range(n)]   # 1-indexed\n\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        g[u].append(v)\n        g[v].append(u)\n\n    ans = [0] * (n + 1)\n\n    # iterative post-order DFS to avoid Python's call stack limits\n    stack = [(1, 0, False)]    # (node, parent, processed_flag)\n    while stack:\n        node, par, done = stack.pop()\n        if done:\n            total = a[node]\n            for child in g[node]:\n                if child != par:\n                    total += ans[child]\n            ans[node] = total\n        else:\n            stack.append((node, par, True))          # process after children\n            for child in g[node]:\n                if child != par:\n                    stack.append((child, node, False))\n\n    sys.stdout.write(' '.join(str(ans[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities and m direct roads connecting pairs of cities, determine the minimum number of roads you must add so that there is a path between every pair of cities (i.e., the graph is connected).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\nThe next m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing a direct road between cities u and v.\n\nOutput:\nPrint a single integer, the minimum number of roads to add.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Disjoint Set Union (Union-Find)\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # Path compression (two-step jump)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> None:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return\n        if size[ra] < size[rb]:  # Union by size\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        union(u, v)\n\n    # Count distinct connected components\n    roots = set(find(i) for i in range(1, n + 1))\n    # To connect k components we need k-1 additional roads\n    print(len(roots) - 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting only of lowercase English letters, determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first and only line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window approach to compute the length of the longest substring\n    without repeating characters in O(n) time and O( min(n, alphabet) ) space.\n    \"\"\"\n    last_seen = {}                 # char -> last index where it appeared\n    start = 0                      # left border of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= start:\n            # Character repeated inside current window; move start right after its previous position\n            start = last_seen[ch] + 1\n        last_seen[ch] = i          # update last seen position\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n × m containing only '.' (empty) and '#' (blocked) cells. Starting at the top-left cell (1,1), you can move only right or down and cannot pass through blocked cells. Count the number of distinct paths to the bottom-right cell (n,m). Output the result modulo 10^9+7.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n,m ≤ 1000).\nEach of the next n lines contains m characters (either '.' or '#').\n\nOutput Format:\nPrint a single integer: the number of possible paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    input_data = sys.stdin.readline\n    n, m = map(int, input_data().split())\n    \n    # dp[j] will hold number of ways to reach cell currently processed in column j (1-indexed)\n    dp = [0] * (m + 1)         \n\n    for i in range(1, n + 1):\n        row = input_data().strip()\n        for j, cell in enumerate(row, 1):\n            if cell == '#':          # Blocked cell → no paths can end here\n                dp[j] = 0\n            else:                    # Empty cell\n                if i == 1 and j == 1:\n                    dp[j] = 1        # Starting position\n                else:\n                    # dp[j] is ways from above (already stored),\n                    # dp[j-1] is ways from left (just computed/updated in this row)\n                    dp[j] = (dp[j] + dp[j - 1]) % MOD\n\n    print(dp[m])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n x m consisting of '.' and '#' characters. A cell containing a '.' is empty, and a cell containing a '#' is blocked. Starting from the top-left cell (1,1), determine the number of distinct paths to the bottom-right cell (n,m), moving only right or down, and never stepping on a blocked cell. Output the answer modulo 10^9+7.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of length m consisting of '.' and '#'.\n\nOutput Format:\nOutput a single integer: the number of possible paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid = data[2:]\n    # dp[j] is number of ways to reach current row, column j\n    dp = [0] * m\n\n    if grid[0][0] == '.':\n        dp[0] = 1  # start position\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                dp[j] = 0  # cannot stand on a blocked cell\n                continue\n            if j:\n                dp[j] = (dp[j] + dp[j - 1]) % MOD\n            # when j == 0 and cell is '.', dp[j] is already the value coming\n            # from the previous row (down move); no update needed.\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N - 1 lines contains three integers u, v, w, denoting an edge between nodes u and v with weight w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the node that is farthest from `start` together with the distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First BFS/DFS: from any node (1) find farthest node A\n    node_a, _ = farthest(1, adj, n)\n    # Second BFS/DFS: from node A find farthest node B and its distance (the diameter)\n    _, diameter = farthest(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two strings S and T, determine if T is an anagram of S. An anagram is a word formed by rearranging the letters of another word.\n\nInput Format:\nThe first line contains string S (1 ≤ |S| ≤ 10^5).\nThe second line contains string T (1 ≤ |T| ≤ 10^5).\n\nOutput Format:\nOutput \"YES\" if T is an anagram of S, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    # Read the two strings (keep any internal whitespace, strip only the trailing newline)\n    s = sys.stdin.readline().rstrip('\\n')\n    t = sys.stdin.readline().rstrip('\\n')\n\n    # Quick length check\n    if len(s) != len(t):\n        print(\"NO\")\n        return\n\n    # Compare character frequencies\n    print(\"YES\" if Counter(s) == Counter(t) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine if the string is a palindrome (it reads the same forwards and backwards). Output \"YES\" if it is a palindrome, otherwise output \"NO\".\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string.\nThe second line contains the string s.\n\nOutput:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    if len(data) < 2:\n        s = ''\n    else:\n        s = data[1].strip()\n\n    # Ensure we only consider the first n characters in case of extra input\n    s = s[:n]\n\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimum number of operations needed to make all elements equal. In one operation, you can choose any element and increment or decrement it by 1.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, *a = data\n    a.sort()\n    \n    # Choose the median (for even n either median works).\n    median = a[n // 2]\n    \n    # Sum of absolute differences to the median\n    total_ops = sum(abs(x - median) for x in a)\n    \n    print(total_ops)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the length of the longest increasing subsequence in the array.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2000).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint a single integer: the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n\n    # dp[i] will store the length of the LIS ending at position i\n    dp = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine if it is possible to rearrange them so that no two adjacent numbers are the same. If possible, print \"YES\", otherwise print \"NO\".\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print \"YES\" if such an arrangement is possible, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    \n    # Count occurrences of each number\n    freq = Counter(nums)\n    \n    # The arrangement is possible iff the maximum frequency\n    # does not exceed ceil(n/2)\n    max_allowed = (n + 1) // 2\n    if max(freq.values()) <= max_allowed:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 to n). The tree is rooted at node 1. Each node has a value. For each node, compute the sum of all values in its subtree (including itself).\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4), where v_i is the value of node i.\nEach of the next n−1 lines contains two integers u and v (1 ≤ u,v ≤ n), indicating an edge between nodes u and v.\n\nOutput:\nOutput n integers, where the i-th integer is the sum of the values in the subtree rooted at node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [int(next(it)) for _ in range(n)]\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)\n    stack = [(1, 0, False)]          # (node, parent, processed_children_flag)\n\n    while stack:\n        node, parent, visited = stack.pop()\n        if not visited:\n            # first time we see this node: push it back as visited\n            stack.append((node, parent, True))\n            # push children\n            for nei in adj[node]:\n                if nei != parent:\n                    stack.append((nei, node, False))\n        else:\n            # children already processed, compute subtree sum\n            total = values[node - 1]          # own value\n            for nei in adj[node]:\n                if nei != parent:\n                    total += subtree_sum[nei]\n            subtree_sum[node] = total\n\n    # Output results for nodes 1..n\n    out = ' '.join(str(subtree_sum[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find the maximum subarray sum.\n    \"\"\"\n    current_sum = max_sum = arr[0]\n    for x in arr[1:]:\n        current_sum = x if current_sum + x < x else current_sum + x\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    result = max_subarray_sum(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine whether it is possible to partition the array into two subsets such that the sum of the elements in both subsets is equal.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100).\n\nOutput Format:\n- Output \"YES\" if such a partition exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, cannot be split into two equal subsets\n    if total % 2 == 1:\n        return False\n    target = total // 2\n\n    # DP bitset: dp[s] is True if some subset sums to s\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for num in nums:\n        # Traverse backwards to avoid using the same number multiple times\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        # Early exit if we've already reached target\n        if dp[target]:\n            return True\n    return dp[target]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of a contiguous subarray. Output the sum.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Kadane's algorithm\n    current_sum = max_sum = arr[0]\n    for value in arr[1:]:\n        current_sum = max(value, current_sum + value)\n        max_sum = max(max_sum, current_sum)\n\n    print(max_sum)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the length of the longest increasing subsequence (not necessarily contiguous) in the list.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef length_of_LIS(sequence):\n    \"\"\"\n    Returns the length of the longest strictly increasing subsequence\n    in `sequence` using an O(n log n) algorithm.\n    \"\"\"\n    tails = []                              # tails[i] = minimum possible tail of an IS of length i+1\n    for num in sequence:\n        idx = bisect.bisect_left(tails, num)  # first pos >= num\n        if idx == len(tails):\n            tails.append(num)               # extend LIS\n        else:\n            tails[idx] = num                # improve existing subsequence\n    return len(tails)\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))     # in case extra numbers follow, ignore them\n    print(length_of_LIS(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring where all characters are unique.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5), the length of S.\n- The second line contains the string S.\n\nOutput Format:\n- Print a single integer, the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains only unique characters.\n    Uses a sliding-window technique with a hash map that stores the most recent position of\n    every character seen so far.\n    \"\"\"\n    last_pos = {}          # char -> last index where the char appeared\n    left = 0               # left boundary of the current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        # If `ch` appeared inside the current window, move `left`\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        # Update / insert the last position of the current character\n        last_pos[ch] = right\n        # Update the best length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line is N; second line is the string.\n    # The length N is not strictly needed, but we read it to match input format.\n    n = int(data[0].strip())\n    s = data[1] if len(data) > 1 else \"\"\n    # Safety check in case the provided length does not match the given string\n    s = s[:n]\n\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, find the number of sequences of length n consisting of integers from 1 to k, such that no two consecutive integers are equal. Output the answer modulo 10^9+7.\n\nInput:\nA single line with two integers n and k (1 ≤ n ≤ 10^5, 2 ≤ k ≤ 10^5).\n\nOutput:\nA single integer: the number of valid sequences modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main():\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, k = map(int, data)\n    \n    # For n == 1, any of the k numbers can be chosen.\n    if n == 1:\n        print(k % MOD)\n        return\n    \n    # First element: k choices.\n    # Each subsequent element: (k-1) choices (must differ from its predecessor).\n    ans = k * pow(k - 1, n - 1, MOD)\n    print(ans % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value assigned to it. For each node, output the sum of values in its subtree (including itself).\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 2 × 10^5).\nThe second line contains N integers v_1, v_2, ..., v_N (1 ≤ v_i ≤ 10^4).\nEach of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput:\nOutput N integers: the i-th integer is the sum for node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n    values = [0] + [next(it) for _ in range(n)]          # 1-indexed\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = next(it)\n        v = next(it)\n        adj[u].append(v)\n        adj[v].append(u)\n\n    sys.setrecursionlimit(1 << 25)\n    subtree = [0] * (n + 1)\n\n    def dfs(u: int, p: int) -> int:\n        total = values[u]\n        for v in adj[u]:\n            if v != p:\n                total += dfs(v, u)\n        subtree[u] = total\n        return total\n\n    dfs(1, 0)\n    sys.stdout.write(' '.join(str(subtree[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine if the graph is bipartite.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v.\n\nOutput:\nOutput \"YES\" if the graph is bipartite, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, adj):\n    color = [0] * (n + 1)          # 0 = unvisited, 1 / -1 = two colors\n    for start in range(1, n + 1):\n        if color[start] != 0:      # already visited in previous component\n            continue\n        color[start] = 1\n        q = deque([start])\n        while q:\n            u = q.popleft()\n            for v in adj[u]:\n                if color[v] == 0:          # not colored yet\n                    color[v] = -color[u]\n                    q.append(v)\n                elif color[v] == color[u]: # same color on both ends → not bipartite\n                    return False\n    return True\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if u == v:          # self-loop breaks bipartiteness immediately\n            print(\"NO\")\n            return\n        adj[u].append(v)\n        adj[v].append(u)\n\n    print(\"YES\" if is_bipartite(n, adj) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n x m filled with '.' (empty cell) and '#' (blocked cell). Starting from the top-left cell (1,1), you can move right or down only. Find the number of distinct paths to reach the bottom-right cell (n,m) without passing through blocked cells. Output the answer modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of length m, consisting of '.' and '#'.\n\nOutput:\nPrint a single integer: the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid = data[2:]                          # list of n strings\n\n    # dp[i][j] – number of ways to reach cell (i, j) (0-indexed)\n    dp = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '#':\n                dp[i][j] = 0\n                continue\n            if i == 0 and j == 0:\n                dp[i][j] = 1                 # starting cell\n            else:\n                from_top = dp[i - 1][j] if i > 0 else 0\n                from_left = dp[i][j - 1] if j > 0 else 0\n                dp[i][j] = (from_top + from_left) % MOD\n\n    print(dp[-1][-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the maximum sum of weights along a path between any two nodes in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the maximum sum of weights along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(node, graph, n):\n    \"\"\"\n    Return the farthest vertex from `node` and its distance\n    using an iterative DFS (stack) – safe for deep trees.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[node] = 0\n    stack = [node]\n    far_node = node\n\n    while stack:\n        cur = stack.pop()\n        for nxt, w in graph[cur]:\n            if dist[nxt] == -1:                 # not visited\n                dist[nxt] = dist[cur] + w\n                stack.append(nxt)\n                if dist[nxt] > dist[far_node]:\n                    far_node = nxt\n    return far_node, dist[far_node]\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # First pass: from an arbitrary node (1) find farthest\n    u, _ = farthest(1, graph, n)\n\n    # Second pass: from that farthest node find the maximum distance\n    _, diameter = farthest(u, graph, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Returns the maximum subarray sum using Kadane's algorithm.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Maximum sum of subarray ending at current position\n        max_ending_here = max(x, max_ending_here + x)\n        # Update overall maximum\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Safe guard: if fewer numbers than declared appear, slice accordingly\n    arr = list(map(int, data[1:1+n]))\n    result = kadane_max_subarray(arr)\n    sys.stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, partition them into two subsets such that the absolute difference between the subset sums is minimized. Output the minimum possible difference.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the minimum absolute difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_partition_difference(nums):\n    total = sum(nums)\n    # bitset where the i-th bit tells if sum i is achievable\n    reachable = 1  # only sum 0 is reachable at start\n    for x in nums:\n        reachable |= reachable << x\n\n    half = total // 2\n    # keep only bits up to 'half'\n    mask = reachable & ((1 << (half + 1)) - 1)\n    best = mask.bit_length() - 1          # largest achievable sum ≤ half\n    return total - 2 * best               # minimal difference\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(min_partition_difference(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered from 1 to n). Each edge has a weight. Find the longest simple path in the tree (the tree's diameter).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), representing an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer, the length of the tree's diameter.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: adj[u] = list of (v, w)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    def farthest(start: int):\n        \"\"\"Return (node, distance) farthest from `start`.\"\"\"\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        q = deque([start])\n        while q:\n            u = q.popleft()\n            for v, w in adj[u]:\n                if dist[v] == -1:\n                    dist[v] = dist[u] + w\n                    q.append(v)\n        # locate the node with the maximum distance\n        max_node, max_dist = 1, 0\n        for i in range(1, n + 1):\n            if dist[i] > max_dist:\n                max_dist = dist[i]\n                max_node = i\n        return max_node, max_dist\n    \n    # 1st pass: farthest from an arbitrary node (1)\n    endpoint, _ = farthest(1)\n    # 2nd pass: farthest from the found endpoint\n    _, diameter = farthest(endpoint)\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers arr[1], arr[2], ..., arr[n] (1 ≤ arr[i] ≤ 10^9).\n\nOutput:\nPrint a single integer, the number of pairs with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, count the number of pairs (i, j) such that i < j and a[i] + a[j] is even.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the total number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    even_count = 0\n    odd_count = 0\n\n    for num in nums:\n        if num & 1:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # number of ways to choose 2 items from k items: k*(k-1)//2\n    pairs_even_sum = even_count * (even_count - 1) // 2\n    pairs_even_sum += odd_count * (odd_count - 1) // 2\n\n    print(pairs_even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the smallest subarray whose sum is greater than or equal to a given integer S. If there is no such subarray, output 0.\n\nInput:\nThe first line contains two integers n and S (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the minimal length of a qualifying subarray, or 0 if none exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    S = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    left = 0\n    cur_sum = 0\n    best = n + 1  # impossible high value\n\n    for right, val in enumerate(arr):\n        cur_sum += val\n        while cur_sum >= S:\n            best = min(best, right - left + 1)\n            cur_sum -= arr[left]\n            left += 1\n\n    print(best if best <= n else 0)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points in a 2D plane, determine the maximum number of points that lie on a single straight line.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 300).\nEach of the next n lines contains two integers x_i and y_i (|x_i|, |y_i| ≤ 10^4), representing the coordinates of the i-th point.\n\nOutput:\nOutput a single integer — the maximum number of collinear points.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom collections import defaultdict\n\ndef normalize(dy: int, dx: int) -> tuple:\n    \"\"\"\n    Return a reduced (dy, dx) pair that uniquely represents the slope.\n    \"\"\"\n    if dx == 0:           # vertical line\n        return (1, 0)\n    if dy == 0:           # horizontal line\n        return (0, 1)\n    \n    # Make dx positive\n    if dx < 0:\n        dy, dx = -dy, -dx\n    \n    g = math.gcd(dy, dx)\n    return (dy // g, dx // g)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    points = [(int(next(it)), int(next(it))) for _ in range(n)]\n\n    if n == 1:\n        print(1)\n        return\n    \n    global_max = 1\n    \n    for i in range(n):\n        slopes = defaultdict(int)\n        duplicates = 1  # count the point itself\n        xi, yi = points[i]\n        \n        for j in range(i + 1, n):\n            xj, yj = points[j]\n            \n            if xi == xj and yi == yj:\n                duplicates += 1\n            else:\n                dy = yj - yi\n                dx = xj - xi\n                key = normalize(dy, dx)\n                slopes[key] += 1\n        \n        local_max = duplicates  # case when all are duplicates\n        for count in slopes.values():\n            local_max = max(local_max, count + duplicates)\n        \n        global_max = max(global_max, local_max)\n    \n    print(global_max)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the number of pairs (i, j) such that i < j and a_i + a_j is even.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the number of pairs with even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes, each node has a value. Find the maximum sum of values on any path in the tree. The path can start and end at any two nodes.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4), the values of the nodes.\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput:\nPrint a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]          # 1-based indexing\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    best = -10**18                                              # global maximum\n\n    def dfs(u: int, p: int) -> int:\n        \"\"\"\n        Returns the maximum sum of a path that starts at `u` and goes\n        down to some descendant (including only one direction).\n        While unwinding, updates global `best` with any path that\n        passes through `u` and possibly combines two child branches.\n        \"\"\"\n        nonlocal best\n        # Two highest positive downward contributions among children\n        max1 = max2 = 0\n\n        for v in adj[u]:\n            if v == p:\n                continue\n            down = dfs(v, u)\n            if down > 0:                      # only positive contributes\n                if down > max1:\n                    max2 = max1\n                    max1 = down\n                elif down > max2:\n                    max2 = down\n\n        # Path that passes through current node (may join two branches)\n        best = max(best, values[u] + max1 + max2)\n\n        # Return the best downward path starting from u\n        return values[u] + max1\n\n    dfs(1, 0)                                 # tree is connected; start anywhere\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput a single integer representing the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters.\n    Uses a sliding-window with a dictionary that keeps the latest position of\n    every character seen so far.\n    \"\"\"\n    last_pos = {}           # char -> latest index\n    left = 0                # left boundary of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # 'ch' is repeated inside the current window — move left boundary\n            left = last_pos[ch] + 1\n\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the number of pairs (i, j) such that i < j and a_i + a_j is even.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe next line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1+n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to pick 2 evens + 2 odds\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the smallest positive integer that does not appear in the array.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^6 ≤ a_i ≤ 10^6).\n\nOutput:\nOutput the smallest positive integer not present in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_missing_positive(nums):\n    # Keep only positive numbers in a set for O(1) look-ups\n    positives = {x for x in nums if x > 0}\n    \n    # The answer is at most len(positives) + 1\n    candidate = 1\n    while candidate in positives:\n        candidate += 1\n    return candidate\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    result = smallest_missing_positive(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points on a 2D plane, determine if any three points form a right-angled triangle.\n\nInput:\nThe first line contains an integer n (3 ≤ n ≤ 1000).\nEach of the following n lines contains two integers xi and yi (−10^4 ≤ xi, yi ≤ 10^4), the coordinates of the i-th point.\n\nOutput:\nPrint 'YES' if there exists a set of three points that form a right-angled triangle, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\n# -------- helper ----------\ndef normalize(dx: int, dy: int) -> tuple:\n    \"\"\"\n    Return a reduced, canonical representation of the direction (dx, dy).\n    Two vectors that are positive multiples of each other map to the same\n    pair, and the first non-zero component is always positive.\n    \"\"\"\n    g = math.gcd(abs(dx), abs(dy))\n    dx //= g\n    dy //= g\n    if dx < 0 or (dx == 0 and dy < 0):\n        dx, dy = -dx, -dy\n    return (dx, dy)\n\n\n# -------- main ----------\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    coords = list(map(int, data[1:]))\n    points = [(coords[i], coords[i + 1]) for i in range(0, 2 * n, 2)]\n\n    for i in range(n):\n        dirs = set()\n        xi, yi = points[i]\n\n        # collect all directions from point i to every other point\n        for j in range(n):\n            if i == j:\n                continue\n            xj, yj = points[j]\n            dx, dy = xj - xi, yj - yi\n            dirs.add(normalize(dx, dy))\n\n        # check for a perpendicular pair of directions\n        for dx, dy in dirs:\n            perp = normalize(dy, -dx)   # (dx,dy) · (dy,-dx) == 0\n            if perp in dirs:\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes numbered 1 to N. Each edge has an associated positive integer weight. Find the maximum sum of weights along any simple path in the tree.\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N - 1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the maximum sum of weights along any simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: adj[u] -> list of (v, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # ------------------------------------------------------------------ #\n    # Helper that returns the farthest node and its distance from `src`  #\n    # ------------------------------------------------------------------ #\n    def farthest(src: int):\n        dist = [-1] * (n + 1)\n        dist[src] = 0\n        stack = [src]\n\n        far_node = src\n        while stack:\n            node = stack.pop()\n            if dist[node] > dist[far_node]:\n                far_node = node\n            for nxt, w in adj[node]:\n                if dist[nxt] == -1:          # not visited yet\n                    dist[nxt] = dist[node] + w\n                    stack.append(nxt)\n        return far_node, dist[far_node]      # (vertex, distance)\n\n    # First DFS/BFS: from any node (say 1) find one end of the diameter\n    end1, _ = farthest(1)\n    # Second DFS/BFS: from that end find the actual diameter length\n    _, diameter = farthest(end1)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine whether it is possible to rearrange the characters of s to form a palindrome. If possible, output \"YES\"; otherwise, output \"NO\".\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nA single line: \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s can be a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count & 1)\n    # For a palindrome, at most one character may have an odd frequency.\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the length of the longest contiguous subarray that contains at most two distinct integers.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    left = 0\n    freq = defaultdict(int)\n    best = 0\n\n    for right, val in enumerate(nums):\n        freq[val] += 1\n\n        # shrink window until we have at most 2 distinct numbers\n        while len(freq) > 2:\n            freq[nums[left]] -= 1\n            if freq[nums[left]] == 0:\n                del freq[nums[left]]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, count the number of pairs (i, j) such that i < j and a_i + a_j is divisible by k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 2·10^5, 1 ≤ k ≤ 10^4).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = map(int, data[2:2 + n])\n\n    # Frequency of each remainder\n    freq = [0] * k\n    for x in nums:\n        freq[x % k] += 1\n\n    # Pairs whose both elements give remainder 0\n    ans = freq[0] * (freq[0] - 1) // 2\n\n    # Pairs with complementary remainders r and k - r\n    # We only need to iterate up to k//2 (exclusive) to avoid double-counting\n    for r in range(1, (k + 1) // 2):\n        ans += freq[r] * freq[k - r]\n\n    # If k is even, handle the exact middle remainder k/2 separately\n    if k % 2 == 0:\n        r = k // 2\n        ans += freq[r] * (freq[r] - 1) // 2\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes, each node has a value. Find the maximum sum of values on a simple path in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4).\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput:\nOutput a single integer – the maximum sum on a simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Make recursion safe for deep trees\n    sys.setrecursionlimit(300_000)\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    it = iter(data)\n    n = next(it)                      # number of nodes\n    value = [0] * (n + 1)             # 1-based values\n    for i in range(1, n + 1):\n        value[i] = next(it)\n\n    # build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = next(it)\n        v = next(it)\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # global answer – start with very small number\n    best_path_sum = -10**18\n\n    def dfs(u: int, parent: int) -> int:\n        \"\"\"\n        Returns the maximum sum of a path that starts at u and goes\n        downwards into its subtree (can stop at u itself).\n        While unwinding, updates best_path_sum with every candidate\n        path that (a) ends at u, or (b) passes through u and two of its\n        children.\n        \"\"\"\n        nonlocal best_path_sum\n\n        # two largest positive downward contributions from children\n        best1 = 0   # largest\n        best2 = 0   # second largest\n\n        for v in adj[u]:\n            if v == parent:\n                continue\n            down_child = dfs(v, u)    # best downward sum from child\n            if down_child > best1:\n                best2 = best1\n                best1 = down_child\n            elif down_child > best2:\n                best2 = down_child\n\n        # best downward path starting at u (take one positive branch at most)\n        down_here = value[u] + (best1 if best1 > 0 else 0)\n\n        # best path that goes through u (maybe connects two branches)\n        through_here = value[u]\n        if best1 > 0:\n            through_here += best1\n        if best2 > 0:\n            through_here += best2\n\n        # update global answer\n        best_path_sum = max(best_path_sum, down_here, through_here, value[u])\n\n        return down_here\n\n    dfs(1, 0)\n    print(best_path_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the length of the longest contiguous subarray where the sum of its elements is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n\n    # Dictionary to store the first position each remainder appears.\n    # Start with remainder 0 occurring at index -1 (empty prefix).\n    first_pos = {0: -1}\n\n    prefix = 0\n    best = 0\n\n    for idx, val in enumerate(arr):\n        prefix += val\n        rem = prefix % k\n\n        if rem in first_pos:\n            # length of subarray ending at idx whose sum % k == 0\n            best = max(best, idx - first_pos[rem])\n        else:\n            # remember the earliest position this remainder occurs\n            first_pos[rem] = idx\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n integers, determine the greatest common divisor (GCD) of all the numbers.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 100).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer — the GCD of the n numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom functools import reduce\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # Ensure we only take exactly n numbers even if extra data exists\n    gcd_all = reduce(math.gcd, nums)\n    print(gcd_all)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 to n). Each edge has a weight. Find the length of the longest path in the tree (the diameter of the tree).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\nOutput a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj):\n    \"\"\"\n    Returns (node, dist) that is the farthest from `start`\n    using a simple BFS/DFS on the tree stored in `adj`.\n    \"\"\"\n    n = len(adj)\n    dist = [-1] * n\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n    while q:\n        u = q.pop()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]              # 1-based indexing\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: pick arbitrary node (1) and find farthest from it\n    a, _ = farthest(1, adj)\n\n    # 2nd pass: farthest from `a` is one end of the diameter; its distance is the answer\n    _, diameter = farthest(a, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    sys.setrecursionlimit(1 << 25)\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers and an integer d. For each element, count the number of elements to its right that are at least d greater than it.\n\nInput Format:\nThe first line contains two integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^9).\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the total count over all elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\n# Fenwick Tree (Binary Indexed Tree) implementation\nclass Fenwick:\n    def __init__(self, size: int):\n        self.n = size\n        self.bit = [0] * (self.n + 1)\n\n    def add(self, index: int, value: int = 1):\n        i = index\n        while i <= self.n:\n            self.bit[i] += value\n            i += i & -i\n\n    def sum(self, index: int) -> int:\n        s = 0\n        i = index\n        while i > 0:\n            s += self.bit[i]\n            i -= i & -i\n        return s\n\n    def range_sum(self, l: int, r: int) -> int:\n        return self.sum(r) - self.sum(l - 1)\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    d = int(data[1])\n    a = list(map(int, data[2:]))\n\n    # Coordinate compression for all ai and ai + d\n    coords = sorted(set(a + [x + d for x in a]))\n    # 1-based indices for Fenwick\n    get_idx = lambda x: bisect_left(coords, x) + 1\n\n    fenwick = Fenwick(len(coords))\n    total_seen = 0\n    answer = 0\n\n    # Traverse from right to left\n    for value in reversed(a):\n        threshold = value + d\n        idx_thr = get_idx(threshold)\n        # count of elements with value >= threshold\n        count_ge = total_seen - fenwick.sum(idx_thr - 1)\n        answer += count_ge\n\n        # insert current value into Fenwick\n        fenwick.add(get_idx(value), 1)\n        total_seen += 1\n\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum possible sum of a contiguous sub-array.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, partition the array into two subsets such that the absolute difference between the sums of the subsets is minimized. Output the minimum possible difference.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 20).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\nOutput a single integer, the minimum possible difference between the subset sums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    total_sum = sum(nums)\n    min_diff = total_sum\n    \n    # Enumerate all subset sums using bit masks\n    # Since n ≤ 20, 2^n ≤ 1,048,576 – easily manageable.\n    for mask in range(1 << n):\n        subset_sum = 0\n        # accumulate elements that are in the current subset\n        for i in range(n):\n            if mask & (1 << i):\n                subset_sum += nums[i]\n        # difference between two subset sums is |total - 2*subset_sum|\n        diff = abs(total_sum - 2 * subset_sum)\n        if diff < min_diff:\n            min_diff = diff\n            # early exit if perfect split found\n            if min_diff == 0:\n                break\n    \n    print(min_diff)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring of s that contains at most two distinct characters.\n\nInput:\n- The first line contains a single string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\n- Print a single integer, the length of the longest substring with at most two distinct characters.\n\nConstraints:\n- 1 ≤ |s| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()          # read the string\n    \n    left = 0                                  # left end of sliding window\n    freq = defaultdict(int)                   # counts of chars in window\n    max_len = 0\n    \n    for right, ch in enumerate(s):\n        freq[ch] += 1                         # include current char\n        \n        while len(freq) > 2:                  # shrink window if >2 distinct\n            left_char = s[left]\n            freq[left_char] -= 1\n            if freq[left_char] == 0:\n                del freq[left_char]\n            left += 1\n        \n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target.\n\nInput:\n- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).\n- The second line contains n integers nums[i] (-10^9 ≤ nums[i] ≤ 10^9).\n\nOutput:\n- Output a single integer, the number of valid pairs.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^9 ≤ nums[i], target ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, target = data[0], data[1]\n    nums = data[2:2 + n]\n\n    freq = {}\n    pairs = 0\n\n    for num in nums:\n        complement = target - num\n        pairs += freq.get(complement, 0)\n        freq[num] = freq.get(num, 0) + 1\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers A and B, find the number of integers between A and B (inclusive) that are divisible by 5 or 7.\n\nInput Format:\n- The first line contains two integers A and B (1 ≤ A ≤ B ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the count of numbers between A and B divisible by 5 or 7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef count_multiples_up_to(n: int, d: int) -> int:\n    \"\"\"Return how many positive integers ≤ n are divisible by d.\"\"\"\n    return n // d\n\ndef numbers_divisible_by_5_or_7(a: int, b: int) -> int:\n    \"\"\"\n    Counts integers in the closed interval [a, b] that are divisible by 5 or 7.\n    Uses inclusion–exclusion principle.\n    \"\"\"\n    def upto(x: int, d: int) -> int:\n        return x // d\n    \n    div5  = upto(b, 5)  - upto(a - 1, 5)\n    div7  = upto(b, 7)  - upto(a - 1, 7)\n    div35 = upto(b, 35) - upto(a - 1, 35)  # numbers divisible by both 5 and 7\n    \n    return div5 + div7 - div35\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    a, b = map(int, data[:2])\n    result = numbers_divisible_by_5_or_7(a, b)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).\n\nOutput Format:\n- Print a single integer: the maximum sum of a contiguous subarray in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm.\n    \"\"\"\n    current = best = nums[0]\n    for x in nums[1:]:\n        current = x if current + x < x else current + x  # equivalent to max(x, current+x)\n        if current > best:\n            best = current\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou have a string s consisting of lowercase English letters. Find the length of the longest substring of s that contains no repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s.\n\nOutput:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring without repeating characters in s.\n    \"\"\"\n    last_pos = {}         # char -> last index seen\n    start = 0             # start index of current window\n    best = 0              # best window length found\n    \n    for i, ch in enumerate(s):\n        # If character seen and inside current window, move window start\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        # Update last seen position\n        last_pos[ch] = i\n        # Update best length\n        best = max(best, i - start + 1)\n        \n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    # Second line might contain spaces or be longer; use exactly first n characters\n    s = data[1].rstrip('\\n')\n    if len(s) > n:\n        s = s[:n]\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the indices of the two numbers such that they add up to a specific target. Assume that each input would have exactly one solution, and you may not use the same element twice.\n\nInput Format:\n- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output two integers, the indices (1-based) of the two numbers in ascending order.\n\nConstraints:\n- 2 ≤ n ≤ 10^5\n- Each input has exactly one solution.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, target = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = {}  # value -> 1-based index\n    for idx, num in enumerate(nums, 1):\n        complement = target - num\n        if complement in seen:\n            i, j = seen[complement], idx\n            if i > j:\n                i, j = j, i\n            print(i, j)\n            return\n        seen[num] = idx\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Print a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the last index at which each character appeared\n    last_occurrence = {}\n    \n    max_len = 0       # Length of the longest unique-char substring found so far\n    start = 0         # Left boundary of the current window\n    \n    for i, ch in enumerate(s):\n        # If the character has appeared and lies inside the current window,\n        # move the left boundary just after its last occurrence\n        if ch in last_occurrence and last_occurrence[ch] >= start:\n            start = last_occurrence[ch] + 1\n        \n        # Update / record last seen index of the current character\n        last_occurrence[ch] = i\n        \n        # Update maximum length\n        max_len = max(max_len, i - start + 1)\n    \n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given n cities and m bidirectional roads between them. Each road has a length. Find the length of the shortest path from city 1 to city n.\n\nInput:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) representing a road between cities u and v of length w.\n\nOutput:\n- Output a single integer: the length of the shortest path from city 1 to city n, or -1 if no path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nINF = 10 ** 20  # larger than any possible path length\n\n\ndef dijkstra(n, adj):\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue  # stale entry\n        if u == n:    # early exit, shortest distance to n found\n            return d\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n    return -1 if dist[n] == INF else dist[n]\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    result = dijkstra(n, adj)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- A single line containing string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer representing the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window approach to find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_idx = {}           # maps character -> last index seen\n    start = 0               # left bound of current window\n    res = 0                 # best length found so far\n\n    for i, ch in enumerate(s):\n        if ch in last_idx and last_idx[ch] >= start:\n            # character repeated inside current window – move the window start\n            start = last_idx[ch] + 1\n        last_idx[ch] = i\n        res = max(res, i - start + 1)\n\n    return res\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two arrays of integers A and B, each of length n. Find the number of pairs (i, j) such that i < j and A[i] + A[j] > B[i] + B[j].\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 2×10^5).\n- The second line contains n integers A[i] (1 ≤ A[i] ≤ 10^9).\n- The third line contains n integers B[i] (1 ≤ B[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of valid pairs (i, j).\n\nConstraints:\n- 2 ≤ n ≤ 2×10^5\n- 1 ≤ A[i], B[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    A = data[1:1 + n]\n    B = data[1 + n:1 + 2 * n]\n\n    # Difference array C[i] = A[i] - B[i]\n    C = [a - b for a, b in zip(A, B)]\n    C.sort()\n\n    ans = 0\n    for i, c in enumerate(C):\n        # first index where value > -c\n        pos = bisect.bisect_right(C, -c)\n        start = max(pos, i + 1)  # j must be > i\n        ans += len(C) - start\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, determine whether it is a palindrome (reads the same forwards and backwards).\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 1000), consisting of lowercase English letters.\nOutput Format:\n- Output 'YES' if the string is a palindrome, else output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print('YES' if s == s[::-1] else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a 2D grid of size n x m consisting of only 0s and 1s. Find the size of the largest rectangle containing only 1s.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 200).\n- The next n lines each contain m characters (each is '0' or '1'), representing the grid.\n\nOutput Format:\n- Output a single integer: the area of the largest rectangle containing only 1s.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef largest_rectangle_in_histogram(heights):\n    \"\"\"\n    Classic largest rectangle in histogram using a monotonic stack.\n    heights: List[int]\n    Returns maximum area.\n    \"\"\"\n    stack = []  # will store indices\n    max_area = 0\n    # Append a sentinel height 0 to flush the stack at the end\n    for i, h in enumerate(heights + [0]):\n        # Maintain increasing stack\n        while stack and h < heights[stack[-1]]:\n            top = stack.pop()\n            height = heights[top]\n            # Width is current index i minus index of previous item in stack - 1\n            width = i if not stack else i - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        stack.append(i)\n    return max_area\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid_vals = data[2:]\n    # heights histogram for each column\n    heights = [0] * m\n    max_rect = 0\n    idx = 0\n    for _ in range(n):\n        row = grid_vals[idx]\n        idx += 1\n        for j, ch in enumerate(row):\n            if ch == '1':\n                heights[j] += 1\n            else:\n                heights[j] = 0\n        max_rect = max(max_rect, largest_rectangle_in_histogram(heights))\n    print(max_rect)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    last_pos = {}\n    left = 0\n    best = 0\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with all distinct elements.\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^9).\nOutput Format:\n- Output a single integer: the length of the longest contiguous subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_pos = dict()          # element -> its latest index\n    left = 0                   # left end of current window\n    best = 0\n\n    for right, val in enumerate(arr):\n        if val in last_pos and last_pos[val] >= left:\n            # element repeated inside current window; move left past previous occurrence\n            left = last_pos[val] + 1\n        last_pos[val] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the length of the longest contiguous subarray whose sum is divisible by k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the length of the longest such subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    first_index = {0: -1}         # remainder -> earliest index\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(a):\n        prefix_sum += val\n        rem = prefix_sum % k\n\n        if rem not in first_index:\n            first_index[rem] = i   # store first occurrence\n        else:\n            length = i - first_index[rem]\n            if length > max_len:\n                max_len = length\n\n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the number of pairs (i, j) such that i < j and a[i] + a[j] = x.\n\nInput:\nThe first line contains two integers n and x (1 ≤ n ≤ 2×10^5, −10^9 ≤ x ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    target = int(next(it))\n\n    freq = defaultdict(int)\n    pairs = 0\n\n    for _ in range(n):\n        val = int(next(it))\n        complement = target - val\n        pairs += freq[complement]          # all earlier numbers that complete the sum\n        freq[val] += 1                     # record current value for future pairs\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if S is a palindrome (it reads the same forward and backward).\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 1000).\n\nOutput Format:\nOutput \"YES\" if S is a palindrome, otherwise output \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"\n    Checks whether the given string `s` is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(\"YES\" if is_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any element by 1.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 2×10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the minimum number of operations needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom typing import List\n\ndef min_operations_to_equalize(arr: List[int]) -> int:\n    \"\"\"\n    Returns the minimum number of +1 / -1 operations needed to make\n    all array elements equal.\n    \"\"\"\n    n = len(arr)\n    arr.sort()\n    median = arr[n // 2]                       # for both odd and even n\n    # sum of absolute differences to the median is minimal\n    return sum(abs(x - median) for x in arr)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # Safety check: if the input pledges more numbers than given,\n    # slice ensures we only use exactly n numbers.\n    result = min_operations_to_equalize(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the sum of all even numbers in the array.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers a and b, find the greatest common divisor (GCD) of a and b.\n\nInput:\n- The first line contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput:\n- Print a single integer, the GCD of a and b.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    a, b = map(int, data[:2])\n    print(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine whether the string is a palindrome (reads the same backward as forward).\n\nInput:\n- A single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\n- Print \"YES\" if s is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()       # Read the string and remove the trailing newline\n    if s == s[::-1]:                       # Check if the string is equal to its reverse\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the length of the longest subarray such that the sum of its elements is even.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^9).\n\nOutput Format:\nOutput a single integer: the length of the longest subarray with an even sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:n + 1]))\n    \n    # earliest[pos_parity] will store the earliest prefix index that\n    # gives the corresponding parity (0 for even, 1 for odd)\n    earliest = [-1, -1]\n    earliest[0] = 0          # empty prefix has even parity\n    \n    best = 0                 # longest even-sum sub-array found so far\n    parity = 0               # running parity of the prefix sum (0 = even, 1 = odd)\n    \n    for i in range(1, n + 1):\n        parity ^= (a[i - 1] & 1)   # update parity with current element\n        if earliest[parity] == -1: # first time we see this parity\n            earliest[parity] = i\n        else:                      # same parity seen before → even-sum subarray\n            best = max(best, i - earliest[parity])\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine whether s can be rearranged to form a palindrome. If it is possible, output 'YES', otherwise output 'NO'.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s of length n.\n\nOutput Format:\nPrint 'YES' if s can be rearranged into a palindrome, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n    from collections import Counter\n\n    # Fast input reading\n    data_iter = iter(sys.stdin.read().strip().split())\n    try:\n        n = int(next(data_iter))\n        s = next(data_iter)\n    except StopIteration:\n        return  # In case of empty or malformed input\n\n    # Count characters\n    char_counts = Counter(s)\n\n    # A string can form a palindrome if at most one character\n    # has an odd frequency (for odd-length strings),\n    # or zero characters have an odd frequency (for even-length strings).\n    odd_freq = sum(1 for freq in char_counts.values() if freq % 2)\n\n    if odd_freq <= 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum difference between any two elements such that the larger element comes after the smaller one in the array.\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\nOutput Format:\n- Print a single integer: the maximum difference. If no increasing pair exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    min_so_far = nums[0]\n    max_diff = 0  # we want 0 if no increasing pair exists\n    \n    for value in nums[1:]:\n        # possible profit by selling at current value\n        diff = value - min_so_far\n        if diff > max_diff:\n            max_diff = diff\n        # update the minimum value seen so far\n        if value < min_so_far:\n            min_so_far = value\n    \n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Determine the length of the longest substring that contains at most two distinct characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string.\n\nOutput:\nOutput a single integer, the maximum length of a substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains at most two distinct characters.\n    \"\"\"\n    if len(s) <= 2:\n        return len(s)\n\n    count = defaultdict(int)\n    left = 0\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        count[ch] += 1\n\n        # Shrink window until we have at most 2 distinct chars\n        while len(count) > 2:\n            left_char = s[left]\n            count[left_char] -= 1\n            if count[left_char] == 0:\n                del count[left_char]\n            left += 1\n\n        # Update maximum length\n        current_len = right - left + 1\n        if current_len > max_len:\n            max_len = current_len\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    result = longest_substring_two_distinct(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the minimum value in the array.\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000), the size of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\nOutput Format:\n- Output a single integer: the minimum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    \"\"\"\n    Reads an integer n followed by n integers from standard input\n    and prints the minimum value among them.\n    \"\"\"\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return                      # no input provided\n    \n    n = int(data[0])                # size of the array\n    # Convert next n tokens to integers\n    arr = list(map(int, data[1:1 + n]))\n    print(min(arr))\n\n# Execute the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the smallest integer k > 1 such that n is divisible by k, or state that no such k exists (i.e., n is prime or 1).\n\nInput:\n- The first line contains a single integer n (1 ≤ n ≤ 10^9).\n\nOutput:\n- Output the smallest integer k > 1 dividing n, or -1 if no such k exists.\n\nConstraints:\n- 1 ≤ n ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\"\n    Returns the smallest divisor of n greater than 1,\n    or -1 if no such divisor exists (i.e., n is 1 or prime).\n    \"\"\"\n    if n <= 1:\n        return -1\n    # Check divisibility by 2 separately to allow i += 2 later\n    if n % 2 == 0:\n        return 2\n    limit = int(math.isqrt(n))  # integer square root\n    i = 3\n    while i <= limit:\n        if n % i == 0:\n            return i\n        i += 2\n    return -1  # n is prime\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    print(smallest_divisor(n))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the maximum sum of any contiguous subarray.\n\nInput:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\n- Output a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at current element\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length n. Find the length of the longest substring of S that contains at most k distinct characters.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26).\nThe second line contains the string S of length n, consisting of lowercase English letters.\n\nOutput:\nOutput a single integer: the length of the longest substring with at most k distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_k_distinct(s: str, k: int) -> int:\n    \"\"\"Return length of the longest substring of `s` that contains\n    at most `k` distinct characters.\"\"\"\n    if k == 0:\n        return 0\n\n    count = defaultdict(int)        # frequency of characters in current window\n    left = 0                        # left boundary of window\n    max_len = 0                     # answer to maintain\n\n    for right, ch in enumerate(s):\n        count[ch] += 1\n\n        # shrink window until we have at most k distinct characters\n        while len(count) > k:\n            left_ch = s[left]\n            count[left_ch] -= 1\n            if count[left_ch] == 0:\n                del count[left_ch]\n            left += 1\n\n        # update answer\n        window_len = right - left + 1\n        if window_len > max_len:\n            max_len = window_len\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else \"\"\n    # The problem guarantees |s| == n, but we rely on min to avoid errors\n    s = s[:n]\n    print(longest_substring_at_most_k_distinct(s, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum possible from any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    current = best = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer N, determine if N is a palindrome in base 10 (reads the same forwards and backwards).\n\nInput Format:\nA single integer N (1 ≤ N ≤ 10^9).\n\nOutput Format:\nPrint \"YES\" if N is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_palindrome_number(n: int) -> bool:\n    \"\"\"\n    Returns True if the decimal representation of n is a palindrome, False otherwise.\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:   # handle empty input just in case\n        return\n    n = int(data)\n    print(\"YES\" if is_palindrome_number(n) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine the minimum number of moves required to make all elements equal, where in one move you can increment or decrement any element by 1.\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 2×10^5).\n- The second line contains n integers a_1, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\nOutput Format:\n- Output a single integer: the minimum number of moves required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Find the median (upper median for even n – also optimal)\n    arr.sort()\n    median = arr[n // 2]\n    \n    # Compute the total number of moves (sum of absolute differences)\n    moves = sum(abs(x - median) for x in arr)\n    \n    # Output the result\n    sys.stdout.write(str(moves))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree of n nodes rooted at node 1, where each edge has a weight, find the maximum distance between any two nodes in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the maximum distance between any two nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, graph, n):\n    \"\"\"\n    Returns the node farthest from `start` and that distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        node = stack.pop()\n        for nei, w in graph[node]:\n            if dist[nei] == -1:\n                dist[nei] = dist[node] + w\n                stack.append(nei)\n\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    graph = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1]); w = int(data[idx + 2])\n        idx += 3\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # First DFS/BFS to find one endpoint of the diameter\n    u, _ = farthest(1, graph, n)\n    # Second DFS/BFS from that endpoint to find the diameter length\n    _, diameter = farthest(u, graph, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine the minimum number of elements you must remove so that the remaining elements form a strictly increasing sequence.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 1000) — the length of the array.\nThe next line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the elements of the array.\n\nOutput Format:\nOutput a single integer — the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns the length of the longest strictly increasing subsequence\n    using an O(n log n) patience-sorting algorithm.\n    \"\"\"\n    tails = []                          # tails[i] = smallest tail of an IS of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)   # first position >= x\n        if idx == len(tails):\n            tails.append(x)\n        else:\n            tails[idx] = x\n    return len(tails)\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1+n]\n    longest_inc = lis_length(arr)\n    print(n - longest_inc)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer representing the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum possible sum of a contiguous sub-array.\n    \"\"\"\n    # Initialize with the first element to correctly handle all-negative arrays.\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)  # Extend or restart\n        best = max(best, current)      # Update global best\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # Guard: if input had fewer than n numbers (shouldn't happen in tests)\n    if len(nums) < n:\n        nums += [0] * (n - len(nums))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n distinct positive integers, determine if there exists a triplet (a, b, c) such that a + b = c.\n\nInput Format:\n- The first line contains a single integer n (3 ≤ n ≤ 2000).\n- The second line contains n integers (1 ≤ ai ≤ 10^9), all distinct.\n\nOutput Format:\n- Print \"YES\" if such a triplet exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    \n    # Use a set for O(1) look-ups\n    values_set = set(nums)\n    \n    # Check every unordered pair (a, b)\n    for i in range(n):\n        a = nums[i]\n        for j in range(i + 1, n):\n            b = nums[j]\n            s = a + b\n            # Because all numbers are distinct, if s exists in the set,\n            # it must be at a different position than i and j.\n            if s in values_set:\n                print(\"YES\")\n                return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine whether it is possible to rearrange the characters of s to form a palindrome.\n\nInput:\n- The first line contains a single integer t (1 ≤ t ≤ 1000), the number of test cases.\n- Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\n- For each test case, output \"YES\" if the string can be rearranged to form a palindrome, and \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    # Count occurrences of each character\n    cnt = Counter(s)\n    # Number of characters that appear an odd number of times\n    odd = sum(1 for v in cnt.values() if v & 1)\n    # For a palindrome, at most one character may have an odd frequency\n    return odd <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    idx = 1\n    for _ in range(t):\n        s = data[idx]\n        idx += 1\n        out_lines.append(\"YES\" if can_form_palindrome(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the minimum number of elements you need to remove so that the remaining elements form a strictly increasing sequence.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of removals required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(sequence):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (strictly increasing).\n    Uses the patience-sorting / tails method in O(n log n).\n    \"\"\"\n    tails = []\n    for value in sequence:\n        # First position where 'value' can be placed to keep tails sorted\n        idx = bisect.bisect_left(tails, value)  # strict -> bisect_left\n        if idx == len(tails):\n            tails.append(value)\n        else:\n            tails[idx] = value\n    return len(tails)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    length_lis = lis_length(arr)\n    removals = n - length_lis\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the minimum value in the array.\n\nInput:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\n- Print a single integer, the minimum value in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The next n tokens are the array elements\n    # Convert them to integers and find min\n    # Using map then min conversion\n    # For performance, slice data[1:1+n]\n    arr_tokens = data[1:1 + n]\n    # To avoid building large list, we can iterate and track minimum\n    # But n is at most 1e5, building list is fine. Still we implement single-pass for robustness\n    it = (int(x) for x in arr_tokens)\n    try:\n        cur_min = next(it)\n    except StopIteration:\n        # No elements (should not happen per constraints), but handle gracefully\n        return\n    for val in it:\n        if val < cur_min:\n            cur_min = val\n    print(cur_min)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x m matrix of integers, find the number of unique paths from the top-left corner to the bottom-right corner, moving only right or down. Some cells may be blocked (represented by -1). You cannot pass through blocked cells.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain m integers: 0 (open) or -1 (blocked).\n\nOutput Format:\n- Output a single integer, the number of unique paths modulo 10^9 + 7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    dp = [0] * m               # dp[j] keeps paths to current cell (i, j)\n\n    for i in range(n):\n        for j in range(m):\n            cell = int(next(it))\n            if cell == -1:     # blocked cell\n                dp[j] = 0\n            else:\n                if i == 0 and j == 0:\n                    dp[j] = 1  # start cell\n                else:\n                    left = dp[j - 1] if j > 0 else 0   # already updated for current row\n                    up = dp[j]                         # value from previous row\n                    dp[j] = (up + left) % MOD\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the smallest positive integer that cannot be represented as the sum of some subset of the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the smallest positive integer that cannot be formed as the sum of a subset of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    arr.sort()\n    smallest_missing = 1  # smallest sum we CANNOT make yet\n\n    for x in arr:\n        if x > smallest_missing:\n            break          # gap found, cannot build `smallest_missing`\n        smallest_missing += x  # extend reachable range to [1, smallest_missing-1]\n\n    print(smallest_missing)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x     # cur = max(x, cur + x)\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))  # ensure we only pick n numbers\n    result = max_subarray_sum(nums)\n    sys.stdout.write(str(result))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, determine the minimum number of elements you need to remove so that the remaining elements form a strictly increasing sequence.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 2000).\n- The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(sequence):\n    \"\"\"Returns the length of the Longest Strictly Increasing Subsequence.\"\"\"\n    tails = []                       # tails[i] = smallest tail of all inc. subseqs of length i+1\n    for x in sequence:\n        pos = bisect.bisect_left(tails, x)   # first index where tails[idx] >= x\n        if pos == len(tails):\n            tails.append(x)          # extend LIS\n        else:\n            tails[pos] = x           # improve existing subsequence tail\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    longest_inc = lis_length(arr)\n    removals = n - longest_inc\n    print(removals)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, find the length of the longest increasing subsequence.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest increasing subsequence in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(sequence):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (LIS)\n    using Patience Sorting / binary search in O(n log n) time.\n    \"\"\"\n    piles = []                     # piles[i] = smallest possible tail of an IS with length i+1\n    for x in sequence:\n        pos = bisect.bisect_left(piles, x)   # first pile whose top >= x\n        if pos == len(piles):\n            piles.append(x)       # start new pile\n        else:\n            piles[pos] = x        # replace current pile's top with smaller value\n    return len(piles)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    print(lis_length(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine the number of distinct elements in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer, the number of distinct elements in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # The rest n integers are from index 1 to n\n    distinct_count = len(set(map(int, data[1:1 + n])))\n    print(distinct_count)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n x m, filled with '.' (empty cell) and '#' (blocked cell). Starting from the top-left cell (1,1), determine the number of ways to reach the bottom-right cell (n,m), moving only right or down, and not passing through blocked cells. Output the answer modulo 10^9+7.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains m characters (either '.' or '#').\n\nOutput Format:\n- Print the number of ways to reach (n, m) from (1, 1) modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n    # quick checks\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # dp[j] – number of ways to reach current row, column j\n    dp = [0] * (m + 1)\n    dp[1] = 1  # starting cell (1,1)\n\n    for i in range(1, n + 1):\n        row = grid[i - 1]\n        for j in range(1, m + 1):\n            if row[j - 1] == '#':\n                dp[j] = 0\n            else:\n                if j > 1:\n                    dp[j] = (dp[j] + dp[j - 1]) % MOD\n                # when j==1, dp[j] already holds paths from above; nothing from left\n    print(dp[m] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nConsider a tree with n nodes rooted at node 1. Each edge has a positive integer weight. Find the maximum sum of weights along any path in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u,v ≤ n, 1 ≤ w ≤ 10^4), representing an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer, the maximum sum of weights along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef farthest_node(start, adj, n):\n    \"\"\"Return (node, distance) farthest from `start` using iterative DFS.\"\"\"\n    visited = [False] * (n + 1)\n    stack = [(start, 0)]\n    visited[start] = True\n    far_node = start\n    far_dist = 0\n\n    while stack:\n        node, dist = stack.pop()\n        if dist > far_dist:\n            far_dist = dist\n            far_node = node\n        for neigh, w in adj[node]:\n            if not visited[neigh]:\n                visited[neigh] = True\n                stack.append((neigh, dist + w))\n    return far_node, far_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS from an arbitrary node (1) to find one endpoint of the diameter\n    node_a, _ = farthest_node(1, adj, n)\n    # Second DFS from that endpoint to get the diameter length\n    _, diameter = farthest_node(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition the array into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible absolute difference.\n\nInput:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^4).\n\nOutput:\n- Output a single integer, the minimum possible absolute difference between the sums of the two subsets.\n\nConstraints:\n- 1 ≤ n ≤ 100\n- 1 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    total_sum = sum(nums)\n\n    # Bitset DP: bit i of `bits` is 1 iff a subset sum of i is achievable\n    bits = 1  # only sum 0 is reachable initially\n    for x in nums:\n        bits |= bits << x  # add x to all previously reachable sums\n\n    half = total_sum // 2\n    # Look for the subset sum closest to total_sum/2\n    for s in range(half, -1, -1):\n        if (bits >> s) & 1:\n            print(total_sum - 2 * s)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, find the number of pairs (i, j) such that i < j and the sum of a_i and a_j is even.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2*10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    nums = data[1:]\n    even = sum(1 for x in nums if x % 2 == 0)\n    odd = n - even\n    # combination kC2 = k*(k-1)//2\n    pairs = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, find the length of the longest strictly increasing subsequence.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer, the length of the longest strictly increasing subsequence in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1: n + 1]\n\n    tails = []                       # tails[i] = minimum possible tail of an increasing subsequence of length i+1\n    for x in arr:\n        pos = bisect.bisect_left(tails, x)\n        if pos == len(tails):\n            tails.append(x)\n        else:\n            tails[pos] = x\n\n    print(len(tails))\n\n# Do NOT forget to call main()\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring of s that contains no repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\nConstraints:\n- 1 ≤ |s| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef length_of_longest_substring(s: str) -> int:\n    last = {}          # stores the most recent index of each character\n    left = 0           # left boundary of current window\n    best = 0           # length of the best window found so far\n\n    for right, ch in enumerate(s):\n        if ch in last and last[ch] >= left:\n            # character repeated inside the current window; move left pointer\n            left = last[ch] + 1\n        last[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(length_of_longest_substring(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes labeled from 1 to n, rooted at node 1. Each node has a value assigned to it. Find the maximum sum of values along any path in the tree (the path may start and end at any node, but must follow parent-child links).\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4).\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput Format:\nOutput a single integer: the maximum sum possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(200000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    val = [0] + [int(next(it)) for _ in range(n)]          # 1-based\n    \n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        g[u].append(v)\n        g[v].append(u)\n\n    best = -10**18                                           # global maximum\n\n    def dfs(u: int, parent: int) -> int:\n        nonlocal best\n        top1 = top2 = -10**18                                # two best downward paths\n        for v in g[u]:\n            if v == parent:\n                continue\n            down = dfs(v, u)                                 # best path starting at v and going down\n            if down > top1:\n                top2 = top1\n                top1 = down\n            elif down > top2:\n                top2 = down\n\n        # best downward path starting at u\n        down_u = val[u] + max(0, top1 if top1 != -10**18 else 0)\n\n        # best path that passes through u possibly connecting two subtrees\n        through = val[u]\n        if top1 > 0:\n            through += top1\n        if top2 > 0:\n            through += top2\n\n        best = max(best, through, down_u)                    # update global maximum\n        return down_u\n\n    dfs(1, 0)\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe next line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum sum of any contiguous sub-array of arr.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x\n        if cur > best:\n            best = cur\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nA robot is placed at the top-left corner of a grid with n rows and m columns. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner. Some cells are blocked and cannot be entered. Determine the number of unique paths the robot can take to reach the destination.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain m characters, each either '.' (free cell) or '#' (blocked cell).\n\nOutput Format:\n- Output a single integer: the number of unique paths modulo 10^9+7.\n\nConstraints:\n- 1 ≤ n, m ≤ 1000\n- The starting and ending cells are always free.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n    \n    dp = [0] * m  # dp[j] represents paths to current cell in row at column j\n    dp[0] = 1  # starting cell is always free\n    \n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '#':          # blocked cell → zero paths\n                dp[j] = 0\n            else:\n                if j > 0:              # add paths from the left\n                    dp[j] = (dp[j] + dp[j-1]) % MOD\n                # if j == 0, dp[j] already holds paths from above (same column)\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the smallest positive integer that is not present in the array.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^6 ≤ A_i ≤ 10^6).\n\nOutput Format:\nPrint a single integer: the smallest positive integer not in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    present = set(arr)\n    candidate = 1\n    while candidate in present:\n        candidate += 1\n    print(candidate)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N distinct integers, find the length of the longest strictly increasing subsequence.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 1000).\nThe second line contains N distinct integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^5).\n\nOutput Format:\nOutput a single integer: the length of the longest strictly increasing subsequence in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef length_of_LIS(sequence):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (LIS)\n    using the patience-sorting (binary search) technique.\n    \"\"\"\n    tails = []  # tails[i] will be the smallest tail of all increasing subsequences of length i+1\n    for num in sequence:\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    print(length_of_LIS(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed graph with n nodes and m edges. Each edge has a weight. Find the length of the shortest path from node 1 to node n. If no such path exists, print -1.\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), denoting a directed edge from u to v with weight w.\nOutput Format:\n- Print a single integer: the length of the shortest path from 1 to n, or -1 if unreachable.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nINF = 10**20  # larger than any possible path length\n\n\ndef dijkstra(n, graph):\n    \"\"\"\n    Runs Dijkstra from node 1 to node n on a directed graph.\n\n    :param n: number of nodes\n    :param graph: adjacency list where graph[u] is list of (v, w)\n    :return: shortest distance from 1 to n, or -1 if unreachable\n    \"\"\"\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:  # outdated entry\n            continue\n        if u == n:  # early exit if we reached target\n            return d\n        for v, w in graph[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    return -1\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        graph[u].append((v, w))\n\n    res = dijkstra(n, graph)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S, determine whether it is possible to rearrange its characters to form a palindrome. Print 'YES' if possible, otherwise print 'NO'.\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 1000), consisting of lowercase English letters.\n\nOutput Format:\nOutput 'YES' or 'NO' as specified above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if some permutation of s is a palindrome.\n    A permutation of s can be a palindrome iff\n    at most one character has an odd frequency.\n    \"\"\"\n    odd_count = sum(1 for freq in Counter(s).values() if freq & 1)\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print('YES' if can_form_palindrome(s) else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nThere are n cities connected by m bidirectional roads. Each road connects two different cities. Find the number of connected components in the resulting undirected graph.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a road between cities u and v.\n\nOutput Format:\nOutput a single integer — the number of connected components.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.components = n  # start with every vertex as its own component\n\n    def find(self, x: int) -> int:\n        # Path-compression\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int):\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        # Union by size\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        self.components -= 1  # merged two components\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    dsu = DSU(n)\n    for _ in range(m):\n        u = int(next(it)) - 1  # switch to 0-based index\n        v = int(next(it)) - 1\n        dsu.union(u, v)\n    print(dsu.components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of n integers. Find the length of the longest contiguous subarray whose sum is exactly k.\n\nInput Format:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).\n\nOutput Format:\nOutput a single integer — the length of the longest contiguous subarray with sum k. If there is none, output 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:2 + n]\n\n    prefix_sum = 0\n    first_occurrence = {0: -1}      # prefix sum -> earliest index\n    longest = 0\n\n    for i, value in enumerate(arr):\n        prefix_sum += value\n\n        # if (prefix_sum - k) has appeared before, subarray (first_occurrence[prefix_sum - k] + 1 ... i) sums to k\n        if prefix_sum - k in first_occurrence:\n            longest = max(longest, i - first_occurrence[prefix_sum - k])\n\n        # store earliest occurrence of current prefix_sum\n        if prefix_sum not in first_occurrence:\n            first_occurrence[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a set of n intervals [l_i, r_i], find the maximum number of non-overlapping intervals you can select.\n\nInput Format:\nThe first line contains a single integer n (1 ≤ n ≤ 2×10^5).\nThe next n lines each contain two integers l_i and r_i (1 ≤ l_i < r_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer: the maximum number of non-overlapping intervals.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    intervals = []\n    for _ in range(n):\n        l = int(next(it)); r = int(next(it))\n        intervals.append((r, l))        # sort key first (by end), keep start\n\n    # Sort by right endpoint ascending\n    intervals.sort()\n    # Greedy selection\n    cnt = 0\n    last_end = -10**19               # smaller than any possible l_i\n    for r, l in intervals:\n        if l >= last_end:            # no overlap (touching at a point is allowed)\n            cnt += 1\n            last_end = r\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nA frog is at the bottom of a staircase with n steps. The frog can jump either 1 or 2 steps at a time. Compute the number of distinct ways the frog can reach the top of the staircase.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\n\nOutput:\nOutput a single integer: the number of ways modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef count_ways(n: int) -> int:\n    \"\"\"\n    Returns the number of distinct ways the frog can reach\n    the nth step, modulo MOD.\n    Equivalent to computing the (n+1)th Fibonacci number.\n    \"\"\"\n    if n == 1:\n        return 1\n    # Iterative DP with two rolling variables (O(n) time, O(1) extra space)\n    prev2, prev1 = 1, 2  # ways(1) = 1, ways(2) = 2\n    for _ in range(3, n + 1):\n        prev2, prev1 = prev1, (prev1 + prev2) % MOD\n    return prev1\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    if n == 0:\n        print(0)\n    elif n == 1:\n        print(1)\n    else:\n        print(count_ways(n) % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, and each edge has a weight, answer q queries. Each query asks for the sum of edge weights on the path between two nodes u and v.\n\nInput Format:\n- The first line contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5).\n- The next n−1 lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n- The next q lines each contain two integers u and v.\n\nOutput Format:\n- For each query, output a single integer: the sum of edge weights on the path from u to v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    q = int(next(it))\n\n    # adjacency list: (neighbor, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    LOG = (n).bit_length()          # enough to cover n\n    parent = [[0] * (n + 1) for _ in range(LOG)]\n    depth  = [0] * (n + 1)\n    dist   = [0] * (n + 1)          # distance from root (node 1)\n\n    # DFS stack to fill parent[0], depth and dist\n    stack = [(1, 0)]  # node, parent\n    order = []\n    while stack:\n        node, par = stack.pop()\n        parent[0][node] = par\n        order.append(node)\n        for nei, w in adj[node]:\n            if nei == par:\n                continue\n            depth[nei] = depth[node] + 1\n            dist[nei]  = dist[node] + w\n            stack.append((nei, node))\n\n    # binary lifting table\n    for k in range(1, LOG):\n        pk = parent[k - 1]\n        cur = parent[k]\n        for v in order:  # every node\n            cur[v] = pk[pk[v]]\n\n    def lca(u: int, v: int) -> int:\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # lift u up to depth[v]\n        diff = depth[u] - depth[v]\n        bit = 0\n        while diff:\n            if diff & 1:\n                u = parent[bit][u]\n            diff >>= 1\n            bit += 1\n        if u == v:\n            return u\n        for k in range(LOG - 1, -1, -1):\n            if parent[k][u] != parent[k][v]:\n                u = parent[k][u]\n                v = parent[k][v]\n        return parent[0][u]\n\n    out_lines = []\n    for _ in range(q):\n        u = int(next(it))\n        v = int(next(it))\n        a = lca(u, v)\n        path_sum = dist[u] + dist[v] - 2 * dist[a]\n        out_lines.append(str(path_sum))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a 2D grid of size n x m consisting of lowercase English letters. Find the length of the longest path such that each cell in the path contains the same character, and you can move only right or down at each step.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of m lowercase English letters.\n\nOutput:\nOutput a single integer, the length of the longest such path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    input = sys.stdin.readline\n\n    n, m = map(int, input().split())\n    grid = [input().strip() for _ in range(n)]\n\n    # dp[i][j] – longest path starting at cell (i, j)\n    dp = [[0] * m for _ in range(n)]\n    best_overall = 1          # at least one cell is always a valid path\n\n    for i in range(n - 1, -1, -1):           # bottom-up\n        for j in range(m - 1, -1, -1):       # right-to-left\n            length = 1                       # path containing only (i, j)\n\n            # move right\n            if j + 1 < m and grid[i][j] == grid[i][j + 1]:\n                length = max(length, 1 + dp[i][j + 1])\n\n            # move down\n            if i + 1 < n and grid[i][j] == grid[i + 1][j]:\n                length = max(length, 1 + dp[i + 1][j])\n\n            dp[i][j] = length\n            if length > best_overall:\n                best_overall = length\n\n    print(best_overall)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, process Q queries. Each query gives two nodes u and v, and asks for the length of the shortest path between u and v.\n\nInput Format:\n- The first line contains two integers N and Q (1 ≤ N, Q ≤ 10^5).\n- The next N-1 lines each contain two integers a and b denoting an edge between nodes a and b (1 ≤ a, b ≤ N).\n- The next Q lines each contain two integers u and v (1 ≤ u, v ≤ N).\n\nOutput Format:\n- For each query, print the length of the shortest path between u and v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef build_lifting(root, adj, n):\n    LOG = (n).bit_length()          # enough to cover n nodes\n    up = [[0] * (n + 1) for _ in range(LOG)]\n    depth = [0] * (n + 1)\n\n    # BFS to fill depth and 1-st ancestor\n    dq = deque([root])\n    depth[root] = 0\n    up[0][root] = 0                # parent of root is 0 (sentinel)\n\n    while dq:\n        u = dq.popleft()\n        for v in adj[u]:\n            if v == up[0][u]:      # already visited (parent)\n                continue\n            depth[v] = depth[u] + 1\n            up[0][v] = u\n            dq.append(v)\n\n    # binary lifting table\n    for k in range(1, LOG):\n        step = 1 << (k - 1)\n        for v in range(1, n + 1):\n            mid = up[k - 1][v]\n            up[k][v] = up[k - 1][mid] if mid else 0\n\n    return up, depth\n\ndef lca(u, v, up, depth):\n    if depth[u] < depth[v]:\n        u, v = v, u\n    diff = depth[u] - depth[v]\n\n    k = 0\n    while diff:\n        if diff & 1:\n            u = up[k][u]\n        diff >>= 1\n        k += 1\n\n    if u == v:\n        return u\n\n    for k in range(len(up) - 1, -1, -1):\n        if up[k][u] != up[k][v]:\n            u = up[k][u]\n            v = up[k][v]\n    return up[0][u]\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    q = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a = int(next(it))\n        b = int(next(it))\n        adj[a].append(b)\n        adj[b].append(a)\n\n    up, depth = build_lifting(1, adj, n)\n\n    out_lines = []\n    for _ in range(q):\n        u = int(next(it))\n        v = int(next(it))\n        w = lca(u, v, up, depth)\n        dist = depth[u] + depth[v] - 2 * depth[w]\n        out_lines.append(str(dist))\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of all even numbers in the array.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 1000).\nThe second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000), separated by spaces.\n\nOutput:\nOutput a single integer, the sum of even numbers in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Safety: handle cases where input might be shorter/longer than claimed\n    nums = map(int, data[1:1 + n])\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\n- Print a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    best = cur = arr[0]\n    for num in arr[1:]:\n        cur = num if cur + num < num else cur + num\n        best = best if best > cur else cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with n nodes and m edges, determine if there is a cycle in the graph.\n\nInput:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v.\n\nOutput:\n- Output \"YES\" if the graph contains a cycle, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(3000000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    size   = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False          # already connected -> cycle\n        if size[ra] < size[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n        return True               # merged successfully\n\n    cycle_found = False\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if not union(u, v):\n            cycle_found = True\n            # We could break, but still need to consume the remaining input\n            # already consumed inside the loop, so we simply note it.\n\n    sys.stdout.write(\"YES\\n\" if cycle_found else \"NO\\n\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities and m bidirectional roads connecting pairs of cities, determine the minimum number of roads that must be added so that all cities are connected (i.e., there is a path between every pair of cities).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road between cities u and v.\n\nOutput:\nOutput a single integer: the minimum number of roads to add.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    __slots__ = ('parent', 'rank', 'components')\n\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n        self.components = n  # each node is its own component initially\n\n    def find(self, x: int) -> int:\n        # Path-compression find\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> None:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        # union by rank\n        if self.rank[ra] < self.rank[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        if self.rank[ra] == self.rank[rb]:\n            self.rank[ra] += 1\n        self.components -= 1\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    m = int(data[1])\n    dsu = DSU(n)\n    idx = 2\n    for _ in range(m):\n        u = int(data[idx]) - 1\n        v = int(data[idx + 1]) - 1\n        dsu.union(u, v)\n        idx += 2\n    # Minimum roads to add equals number_of_components - 1\n    print(dsu.components - 1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed graph with N nodes and M edges. Each edge has a non-negative weight. Find the length of the shortest path from node 1 to node N. If there is no path, output -1.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains three integers u, v, w (1 ≤ u, v ≤ N, 0 ≤ w ≤ 10^9), representing an edge from u to v with weight w.\n\nOutput:\nOutput a single integer, the shortest path length from node 1 to node N, or -1 if no such path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nINF = 10 ** 20  # large enough for sums of weights up to 1e14\n\n\ndef dijkstra(n, adj):\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue            # stale entry\n        if u == n:              # early exit when node N is settled\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n    return dist[n] if dist[n] != INF else -1\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n\n    ans = dijkstra(n, adj)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nOutput a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding window approach. Keeps the last seen position of every character\n    and moves the left border whenever a repetition is met.\n    \"\"\"\n    last_pos = {}                 # maps char -> latest index\n    left = 0                      # start index of current window\n    best = 0\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # ch repeated inside current window, shrink from the left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        # window is [left, right]\n        best = max(best, right - left + 1)\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with a sum equal to k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest contiguous subarray with sum k. If no such subarray exists, output 0.\n\nConstraints:\n- 1 ≤ n ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    # Read the n integers\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}  # prefix sum -> earliest index\n    prefix_sum = 0\n    best_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If we have seen prefix_sum - k before, update best_len\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            candidate_len = i - prefix_to_first_index[target]\n            if candidate_len > best_len:\n                best_len = candidate_len\n\n        # Store earliest occurrence of current prefix_sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(best_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), each edge has a weight. Find the length of the longest path in the tree.\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = map(int, data)\n    N = next(it)\n\n    adj = [[] for _ in range(N + 1)]\n    for _ in range(N - 1):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    def bfs(start: int):\n        \"\"\"Return (farthest_node, distance) from start using unweighted queue.\"\"\"\n        dist = [-1] * (N + 1)\n        dist[start] = 0\n        q = deque([start])\n        far_node = start\n        max_dist = 0\n\n        while q:\n            u = q.popleft()\n            du = dist[u]\n            for v, w in adj[u]:\n                if dist[v] == -1:\n                    dist[v] = du + w\n                    q.append(v)\n                    if dist[v] > max_dist:\n                        max_dist = dist[v]\n                        far_node = v\n        return far_node, max_dist\n\n    # First BFS: from arbitrary node 1\n    node_a, _ = bfs(1)\n    # Second BFS: from the farthest node found\n    _, diameter = bfs(node_a)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with N nodes and M edges, determine whether the graph contains a cycle.\n\nInput Format:\nThe first line contains two integers N and M (2 ≤ N ≤ 1000, 1 ≤ M ≤ 2000).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing an undirected edge between nodes u and v.\n\nOutput Format:\nOutput \"YES\" if the graph contains a cycle, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # path compression\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False  # union would create a cycle\n        if rank[ra] < rank[rb]:\n            parent[ra] = rb\n        elif rank[ra] > rank[rb]:\n            parent[rb] = ra\n        else:\n            parent[rb] = ra\n            rank[ra] += 1\n        return True\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if not union(u, v):\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n × m consisting of '.' (empty) and '#' (blocked) cells. Starting from any empty cell, find the size of the largest connected region of empty cells (connected orthogonally).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of length m consisting of '.' and '#'.\n\nOutput:\nPrint a single integer: the size of the largest connected region of empty cells.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    \n    grid = []\n    for _ in range(n):\n        # Each line is already stripped by split()\n        row = next(it).decode()\n        grid.append(row)\n    \n    visited = [[False] * m for _ in range(n)]\n    max_region = 0\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.' and not visited[i][j]:\n                # BFS from (i, j)\n                q = deque()\n                q.append((i, j))\n                visited[i][j] = True\n                current_size = 0\n                \n                while q:\n                    x, y = q.popleft()\n                    current_size += 1\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            if not visited[nx][ny] and grid[nx][ny] == '.':\n                                visited[nx][ny] = True\n                                q.append((nx, ny))\n                max_region = max(max_region, current_size)\n    \n    print(max_region)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Determine whether it is possible to rearrange the letters of the string so that no two identical letters are adjacent. Output 'YES' if possible, otherwise 'NO'.\n\nInput Format:\n- The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases.\n- For each test case, a string s (1 ≤ |s| ≤ 10^5) is given.\n\nOutput Format:\n- For each test case, output a line with 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_rearrange_without_adjacent_duplicates(s: str) -> bool:\n    \"\"\"\n    Returns True if s can be rearranged so that no two identical\n    letters are adjacent, else False.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return True                     # trivially possible\n    max_freq = max(Counter(s).values())\n    return max_freq <= (n + 1) // 2     # classic necessary & sufficient condition\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    idx = 1\n    for _ in range(t):\n        s = data[idx]\n        idx += 1\n        out_lines.append(\"YES\" if can_rearrange_without_adjacent_duplicates(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the smallest positive integer x such that the sum of the digits of x multiplied by n equals x. If no such x exists, output -1.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^6).\n\nOutput:\nOutput the smallest x satisfying the condition, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef digit_sum(num: int) -> int:\n    \"\"\"Return the sum of decimal digits of num.\"\"\"\n    s = 0\n    while num:\n        s += num % 10\n        num //= 10\n    return s\n\ndef main() -> None:\n    n_line = sys.stdin.readline()\n    if not n_line:\n        return\n    n = int(n_line.strip())\n    \n    # -------- Upper bound for the search --------\n    # Let x = n * s  ,  s = digit_sum(x)          .\n    # Because digit_sum(x) ≤ 9 * (#digits of x),\n    # s ≤ 9 * (⌊log10(x)⌋ + 1) ≤ 9 * (⌊log10(n s)⌋ + 1)\n    # For 1 ≤ n ≤ 10^6 the above inequality implies s ≤ 72.\n    # To stay absolutely safe we search up to 81.\n    MAX_S = 81\n    \n    answer = -1\n    for s in range(1, MAX_S + 1):\n        x = n * s\n        if digit_sum(x) == s:\n            answer = x\n            break\n    \n    print(answer)\n\n# ----- obligatory call -----\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums, return the sum of all even numbers in the array.\n\nInput:\n- The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array.\n- The second line contains n integers nums[i] (−1000 ≤ nums[i] ≤ 1000).\n\nOutput:\n- Output a single integer, the sum of all even numbers in nums.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    even_sum = sum(x for x in nums if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains all distinct characters.\n\nInput Format:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint a single integer representing the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains only distinct characters.\n    \"\"\"\n    last_seen = {}           # char -> last index where it appeared\n    start = 0                # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= start:\n            # Current character was seen in the current window: shrink window\n            start = last_seen[ch] + 1\n        # Update (or add) last seen position of current character\n        last_seen[ch] = i\n        # Update the maximum length found so far\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer N, find the smallest positive integer X such that the sum of digits of X is equal to N.\n\nInput Format:\nA single integer N (1 ≤ N ≤ 45).\n\nOutput Format:\nPrint the integer X.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.read().strip()\n    if not data:      # no input\n        return\n    n = int(data)\n\n    nines = n // 9           # how many full 9-digits we need\n    rem  = n % 9             # remainder (0 … 8)\n\n    if rem:\n        result = str(rem) + '9' * nines\n    else:\n        result = '9' * nines\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, partition it into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible difference.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 20).\n- The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Print a single integer: the minimum possible difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef all_subset_sums(nums):\n    \"\"\"\n    Return a list with the sum of every subset of `nums`.\n    \"\"\"\n    sums = [0]\n    for x in nums:\n        # extend with current number added to every existing subset-sum\n        sums += [x + s for s in sums]\n    return sums\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    a = list(map(int, data[1:]))\n\n    # split the array in two halves\n    mid = n // 2\n    left, right = a[:mid], a[mid:]\n\n    left_sums = all_subset_sums(left)       # 2^(n/2) sums\n    right_sums = all_subset_sums(right)     # 2^(n/2) sums\n    right_sums.sort()                       # prepare for binary search\n\n    total = sum(a)\n    best = total                            # worst possible difference\n\n    # for every sum of the left part, find the right-part sum that\n    # makes the total closest to total/2 (i.e. minimizes |total-2*s|)\n    for s_left in left_sums:\n        target = total / 2 - s_left\n        idx = bisect.bisect_left(right_sums, target)\n\n        # check the closest candidates around the insertion point\n        for j in (idx - 1, idx):\n            if 0 <= j < len(right_sums):\n                subset_sum = s_left + right_sums[j]\n                best = min(best, abs(total - 2 * subset_sum))\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Determine the length of the longest substring that contains no repeated characters.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains the string S.\n\nOutput Format:\n- Print a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding-window approach that keeps the current window [l, r)\n    free of duplicates by moving the left pointer whenever a repeat is met.\n    \"\"\"\n    last_seen = {}           # char -> last index\n    max_len = 0\n    l = 0                    # left border of the window (inclusive)\n\n    for r, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= l:\n            # Duplicate inside current window -> move left pointer\n            l = last_seen[ch] + 1\n        last_seen[ch] = r\n        max_len = max(max_len, r - l + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line is N, second is the string itself\n    # We can ignore N because len(s) provides the same information,\n    # but we still consume the line to follow the input format.\n    # Using splitlines already separated them, so:\n    #   data[0] = N, data[1] = S\n    # Guard in case there are extra empty lines\n    s = data[1].strip() if len(data) > 1 else \"\"\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes labeled from 1 to n, and a list of n-1 edges, compute the number of pairs of nodes (u, v) such that the distance between u and v is even.\n\nInput:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains two integers u and v, denoting an edge (1 ≤ u, v ≤ n).\n\nOutput:\n- Output a single integer, the number of pairs (u, v) with even distance (1 ≤ u < v ≤ n).\n\nConstraints:\n- The input graph is a tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # BFS to determine parity of depth (0 = even, 1 = odd)\n    parity = [-1] * (n + 1)\n    queue = deque([1])\n    parity[1] = 0\n    even_cnt = 0\n    odd_cnt = 0\n    \n    while queue:\n        node = queue.popleft()\n        if parity[node] == 0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n        \n        for nei in adj[node]:\n            if parity[nei] == -1:\n                parity[nei] = parity[node] ^ 1  # flip parity\n                queue.append(nei)\n\n    ans = even_cnt * (even_cnt - 1) // 2 + odd_cnt * (odd_cnt - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, determine if there exists a pair of distinct elements whose sum is exactly K.\n\nInput Format:\n- The first line contains two integers N and K (1 ≤ N ≤ 10^5, -10^9 ≤ K ≤ 10^9).\n- The second line contains N integers A_1, A_2, ..., A_N (-10^9 ≤ A_i ≤ 10^9).\n\nOutput Format:\n- Print \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        N = int(next(it))\n        K = int(next(it))\n    except StopIteration:\n        return\n    \n    seen = set()\n    for _ in range(N):\n        try:\n            x = int(next(it))\n        except StopIteration:\n            break\n        if K - x in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the minimum number of characters to insert (anywhere) to make the string a palindrome.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 2000).\n\nOutput Format:\n- Output a single integer: the minimum number of insertions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_insertions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Minimum insertions = len(s) - length of the longest\n    palindromic subsequence (LPS).\n    LPS can be found as the LCS of s and reversed(s).\n    \"\"\"\n    n = len(s)\n    t = s[::-1]                          # reversed string\n    dp = [0] * (n + 1)                   # rolling 1-D DP for LCS\n    \n    for i in range(n):\n        prev = 0                         # dp value for dp[i][j] diagonal\n        for j in range(n):\n            temp = dp[j + 1]             # store current for next iteration\n            if s[i] == t[j]:\n                dp[j + 1] = prev + 1\n            else:\n                if dp[j] > dp[j + 1]:    # keep the larger of left/top cells\n                    dp[j + 1] = dp[j]\n            prev = temp\n    lps = dp[n]\n    return n - lps                       # required insertions\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(min_insertions_to_palindrome(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine if it is possible to rearrange the characters of s to form a palindrome. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 1000).\n\nOutput:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    # For a palindrome, at most one character may appear an odd number of times.\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, find the number of pairs (i, j) such that i < j and a_i + a_j is divisible by k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 2·10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer — the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = map(int, data[2:2 + n])\n\n    # Count frequencies of remainders modulo k\n    freq = Counter(x % k for x in nums)\n\n    ans = 0\n    for r in list(freq.keys()):\n        comp = (-r) % k            # complement remainder that makes (r + comp) % k == 0\n        if r == comp:              # pairs inside the same bucket (r == 0 or r == k/2 when k even)\n            cnt = freq[r]\n            ans += cnt * (cnt - 1) // 2\n        elif r < comp:             # count each unordered pair once\n            ans += freq[r] * freq.get(comp, 0)\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\n- A single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\n- Output a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip()\n    last_pos = {}\n    start = 0          # left boundary of current window\n    best = 0           # length of the longest valid substring found\n\n    for i, ch in enumerate(s):\n        # If character repeated inside current window, move start right after its previous occurrence\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers N and K, count the number of ways to distribute K identical candies to N children such that each child gets at least 1 candy.\n\nInput Format:\nA single line with two integers N and K (1 ≤ N ≤ K ≤ 10^5).\n\nOutput Format:\nPrint a single integer: the number of ways modulo 10^9 + 7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef precompute_factorials(up_to: int):\n    \"\"\"Returns factorial and inverse factorial lists up to `up_to` (inclusive).\"\"\"\n    fact = [1] * (up_to + 1)\n    for i in range(2, up_to + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (up_to + 1)\n    inv_fact[up_to] = pow(fact[up_to], MOD - 2, MOD)      # Fermat little theorem\n    for i in range(up_to, 0, -1):\n        inv_fact[i - 1] = inv_fact[i] * i % MOD\n\n    return fact, inv_fact\n\n\ndef nCr_mod(n: int, r: int, fact, inv_fact) -> int:\n    if r < 0 or r > n:\n        return 0\n    return fact[n] * inv_fact[r] % MOD * inv_fact[n - r] % MOD\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    N, K = map(int, data)\n\n    if N > K:\n        # Impossible (though according to constraints shouldn't happen)\n        print(0)\n        return\n\n    # answer = C(K-1, N-1)\n    fact, inv_fact = precompute_factorials(K)\n    ans = nCr_mod(K - 1, N - 1, fact, inv_fact)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subarray with all distinct elements.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the length of the longest subarray with all distinct elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_subarray_len(arr):\n    last_pos = {}            # element -> last index seen\n    left = 0                 # left boundary of current window\n    best = 0                 # best length found\n\n    for right, value in enumerate(arr):\n        # If value seen before and inside current window, shrink window\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        last_pos[value] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(longest_unique_subarray_len(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, where each edge has a weight, find the length of the longest path in the tree (the tree diameter).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), meaning there is an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(node, adj, n):\n    \"\"\"\n    Returns the tuple (farthest_node, distance) from the given start node\n    using an iterative DFS (stack) to avoid recursion depth issues.\n    \"\"\"\n    stack = [(node, -1, 0)]  # (current_node, parent, accumulated_distance)\n    far_node = node\n    max_dist = 0\n\n    while stack:\n        cur, par, dist = stack.pop()\n        if dist > max_dist:\n            max_dist = dist\n            far_node = cur\n        for nxt, w in adj[cur]:\n            if nxt != par:\n                stack.append((nxt, cur, dist + w))\n    return far_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st DFS: farthest from node 1\n    far1, _ = farthest(1, adj, n)\n    # 2nd DFS: farthest from far1 gives diameter\n    _, diameter = farthest(far1, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring of S where all characters are distinct.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5), the length of S.\nThe second line contains the string S.\n\nOutput Format:\nPrint a single integer: the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` in which all\n    characters are distinct.\n    \"\"\"\n    last_seen = {}           # stores the most recent index of each character\n    left = 0                 # left boundary of the current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        # If `ch` has appeared inside the current window, move `left`\n        # just past its previous occurrence.\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n\n        last_seen[ch] = right          # update most recent occurrence\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line is N (can be ignored for logic, but we validate length anyway)\n    n = int(data[0].strip())\n    s = data[1].rstrip(\"\\n\") if len(data) > 1 else \"\"\n    # In case the given N differs from actual string length, adjust.\n    s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the minimum number of characters you need to delete from S so that no two adjacent characters are the same.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_no_adjacent_equals(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of deletions required so that \n    no two adjacent characters in 's' are the same.\n    \"\"\"\n    deletions = 0\n    prev_char = None\n    for ch in s:\n        if ch == prev_char:\n            deletions += 1\n        else:\n            prev_char = ch\n    return deletions\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(min_deletions_no_adjacent_equals(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray of length exactly K.\n\nInput:\nThe first line contains two integers N and K (1 ≤ K ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray of length exactly K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2+n]))\n\n    # Initial window sum\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m consisting of only 0s and 1s, find the number of distinct islands. An island is a group of adjacent 1s (horizontally or vertically connected).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 500).\nEach of the next n lines contains a string of m characters, each being '0' or '1'.\n\nOutput:\nPrint a single integer: the number of distinct islands.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    # remaining n strings, each of length m\n    grid = data[2:2 + n]\n    \n    visited = [[False] * m for _ in range(n)]\n    \n    def bfs(si, sj):\n        q = deque()\n        q.append((si, sj))\n        visited[si][sj] = True\n        while q:\n            i, j = q.popleft()\n            for di, dj in ((1,0),(-1,0),(0,1),(0,-1)):\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj] and grid[ni][nj] == '1':\n                    visited[ni][nj] = True\n                    q.append((ni, nj))\n    \n    islands = 0\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '1' and not visited[i][j]:\n                bfs(i, j)\n                islands += 1\n    \n    print(islands)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the minimum number of operations required to make all elements in the array equal, where in each operation you may increment or decrement any element by 1.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    # Sorting to find the median\n    arr.sort()\n    median = arr[n // 2]           # lower median works for both even / odd\n\n    # Compute total moves\n    total_moves = sum(abs(x - median) for x in arr)\n\n    print(total_moves)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting only of lowercase English letters. Find the length of the longest substring in which every character appears at least k times.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n), where n is the length of the string.\nThe second line contains the string S of length n.\n\nOutput:\nPrint a single integer — the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_substring_at_least_k(s: str, k: int) -> int:\n    if k <= 1:                     # whole string is valid\n        return len(s)\n    n = len(s)\n    if k > n:\n        return 0\n\n    max_len = 0\n    total_unique = len(set(s))      # maximum possible distinct characters\n\n    for target_unique in range(1, total_unique + 1):\n        freq = [0] * 26\n        left = 0\n        right = 0\n        unique_cnt = 0              # # of distinct letters in window\n        cnt_at_least_k = 0          # # of letters occurring >= k times in window\n\n        while right < n:\n            # expand window to the right\n            idx = ord(s[right]) - 97\n            if freq[idx] == 0:\n                unique_cnt += 1\n            freq[idx] += 1\n            if freq[idx] == k:\n                cnt_at_least_k += 1\n            right += 1\n\n            # shrink from the left until unique_cnt <= target_unique\n            while unique_cnt > target_unique:\n                idx_left = ord(s[left]) - 97\n                if freq[idx_left] == k:\n                    cnt_at_least_k -= 1\n                freq[idx_left] -= 1\n                if freq[idx_left] == 0:\n                    unique_cnt -= 1\n                left += 1\n\n            # check validity\n            if unique_cnt == target_unique and unique_cnt == cnt_at_least_k:\n                max_len = max(max_len, right - left)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    s = data[2] if len(data) > 2 else ''\n    # Safety in case the string may contain spaces / newlines inside (it shouldn't per statement)\n    # but ensure we only pick first n chars\n    s = s[:n]\n    print(longest_substring_at_least_k(s, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if it is possible to partition the array into two subsets such that the sum of elements in both subsets is equal.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 100).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 100).\n\nOutput:\nPrint 'YES' if such a partition exists, or 'NO' otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, it can't be equally partitioned\n    if total & 1:\n        return False\n    target = total // 2\n\n    # DP bitset: dp[s] == True means sum 's' is attainable\n    dp = [False] * (target + 1)\n    dp[0] = True  # zero sum is always possible\n\n    for num in nums:\n        # iterate backwards to avoid using same number twice\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        if dp[target]:                 # early exit if target already reachable\n            return True\n    return dp[target]\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))   # ensure we only take first n numbers\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes. Each edge has a weight. Find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), indicating an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef farthest(start: int, adj: list[list[tuple[int, int]]], n: int) -> tuple[int, int]:\n    \"\"\"\n    Returns the node farthest from `start` and the corresponding distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    max_node = start\n    max_dist = 0\n\n    while stack:\n        node = stack.pop()\n        for nxt, w in adj[node]:\n            if dist[nxt] == -1:            # not visited yet\n                dist[nxt] = dist[node] + w\n                if dist[nxt] > max_dist:   # keep track of the farthest node on-the-fly\n                    max_dist = dist[nxt]\n                    max_node = nxt\n                stack.append(nxt)\n\n    return max_node, max_dist\n\n\ndef main() -> None:\n    sys.setrecursionlimit(200_000)\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS/BFS: from an arbitrary node (1) find the farthest node `a`\n    a, _ = farthest(1, adj, n)\n    # Second DFS/BFS: from `a` find the farthest node `b` and its distance = diameter\n    _, diameter = farthest(a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S can be rearranged to form a palindrome.\n\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint \"YES\" if the string can be rearranged into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    A string can form a palindrome if at most one character has an odd count.\n    \"\"\"\n    counts = Counter(s)\n    odd_counts = sum(1 for c in counts.values() if c % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the length of the longest contiguous subarray with all elements distinct.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the length of the longest contiguous subarray with all elements unique.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    last_pos = {}          # value -> last index seen\n    left = 0               # left end of current window (inclusive)\n    best = 0               # best window length found\n\n    for right, value in enumerate(arr):\n        # If we have seen the value and it's inside current window, move left pointer\n        if value in last_pos and last_pos[value] >= left:\n            left = last_pos[value] + 1\n        # Update last position of current value\n        last_pos[value] = right\n        # Update best length\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n x m consisting of '.' (empty cell) and '#' (obstacle). Find the number of distinct paths from the top-left cell to the bottom-right cell, moving only right or down, and not passing through obstacles. The answer may be large; output it modulo 10^9+7.\n\nInput:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains m characters (either '.' or '#').\n\nOutput:\n- Output a single integer, the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:1 + n]\n\n    # If start or end is blocked, no paths exist\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(0)\n        return\n\n    # dp[j] will hold number of ways to reach current row, column j\n    dp = [0] * m\n    dp[0] = 1  # Starting cell\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                dp[j] = 0\n            else:\n                if j > 0:\n                    dp[j] = (dp[j] + dp[j - 1]) % MOD\n                # For j == 0 we keep dp[j] as is (only coming from above)\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, labeled from 1 to n. Each edge has a weight. Find the length of the longest path in the tree (the diameter).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v of weight w.\n\nOutput:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`\n    using an iterative DFS (stack) – safe for deep trees.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [(start, -1)]          # (current node, parent)\n    far_node = start\n    far_dist = 0\n\n    while stack:\n        node, parent = stack.pop()\n        for nxt, w in adj[node]:\n            if nxt == parent:\n                continue\n            dist[nxt] = dist[node] + w\n            if dist[nxt] > far_dist:\n                far_dist = dist[nxt]\n                far_node = nxt\n            stack.append((nxt, node))\n\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1]); w = int(data[idx + 2])\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS/BFS to find one endpoint of the diameter\n    node_a, _ = farthest_node(1, adj, n)\n    # Second DFS/BFS from that endpoint to find the true diameter length\n    _, diameter = farthest_node(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting only of lowercase English letters. Find the length of the longest substring which contains at most two distinct characters.\n\nInput:\nThe first line contains the string S (1 ≤ N ≤ 10^5).\n\nOutput:\nOutput a single integer, the length of the longest substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    n = len(s)\n    \n    # Sliding window pointers and helpers\n    left = 0\n    freq = {}          # character -> count in current window\n    best = 0\n    \n    for right, ch in enumerate(s):\n        # Expand window by including s[right]\n        freq[ch] = freq.get(ch, 0) + 1\n        \n        # Shrink window until it contains at most 2 distinct characters\n        while len(freq) > 2:\n            left_char = s[left]\n            freq[left_char] -= 1\n            if freq[left_char] == 0:\n                del freq[left_char]\n            left += 1\n        \n        # Update best length\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the sum of all elements that are strictly greater than the average of the array.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 1000).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the sum of all elements strictly greater than the average of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    total = sum(arr)\n    avg = total / n  # keep as float for proper comparison\n    result = sum(x for x in arr if x > avg)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of a contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    max_sum = -10**18  # sufficiently small\n    current_sum = 0\n    \n    for x in nums:\n        # Either extend the current subarray or start new from x\n        current_sum = max(x, current_sum + x)\n        max_sum = max(max_sum, current_sum)\n    \n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value. For each node, compute the sum of values in its subtree.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^9), where v_i is the value of the i-th node.\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), describing an edge between nodes u and v.\n\nOutput:\nOutput n integers, where the i-th integer is the sum of values in the subtree rooted at the i-th node.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 20)  # allow deep recursion (≈1 M)\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    values = [0] + data[1:n + 1]        # 1-based indexing\n    edges_flat = data[n + 1:]\n\n    adj = [[] for _ in range(n + 1)]\n    for i in range(0, len(edges_flat), 2):\n        u, v = edges_flat[i], edges_flat[i + 1]\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)\n\n    # iterative DFS (post-order) to avoid Python’s recursion limit uncertainties\n    stack = [(1, 0, 0)]  # (node, parent, state)  state==0 -> pre, 1 -> post\n    while stack:\n        node, parent, state = stack.pop()\n        if state == 0:\n            stack.append((node, parent, 1))           # add post-processing marker\n            for nei in adj[node]:\n                if nei != parent:\n                    stack.append((nei, node, 0))      # traverse children\n        else:\n            s = values[node]\n            for nei in adj[node]:\n                if nei != parent:\n                    s += subtree_sum[nei]\n            subtree_sum[node] = s\n\n    sys.stdout.write(' '.join(str(subtree_sum[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, find the minimum number of roads you need to add to make the entire network connected. Each road connects two different cities.\n\nInput:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road between cities u and v.\n\nOutput:\n- Output a single integer, the minimum number of roads to add to connect all cities.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1_000_000)\n\nclass DSU:\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.components = n          # initially each node is its own component\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # path compression (iterative)\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int):\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        # union by size\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        self.components -= 1          # merged two different components\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    dsu = DSU(n)\n    idx = 2\n    for _ in range(m):\n        u = int(data[idx])   - 1\n        v = int(data[idx+1]) - 1\n        idx += 2\n        dsu.union(u, v)\n\n    # Minimum roads to add = (number of connected components - 1)\n    print(dsu.components - 1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, where each edge has a weight, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4) denoting an edge between u and v with weight w.\n\nOutput Format:\n- Output a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns the node that is farthest from `start` together with the distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node, far_dist = start, 0\n\n    while q:\n        u = q.pop()\n        d = dist[u]\n        if d > far_dist:\n            far_node, far_dist = u, d\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = d + w\n                q.append(v)\n\n    return far_node, far_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: farthest from node 1\n    a, _ = farthest(1, adj, n)\n    # 2nd pass: farthest from node a\n    _, diameter = farthest(a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. For each element, find the next greater element to its right. If there is no greater element, output -1 for that position.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output n integers, where the i-th integer is the next greater element for a_i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef next_greater_elements(arr):\n    \"\"\"\n    Given a list of integers, return a list where each position contains\n    the next greater element to the right, or -1 if such element doesn't exist.\n    \"\"\"\n    n = len(arr)\n    result = [-1] * n         # Initialize all answers with -1\n    stack = []                # Will store indices whose answer is not found yet\n\n    for i, value in enumerate(arr):\n        # Resolve elements in stack that are smaller than current value\n        while stack and arr[stack[-1]] < value:\n            idx = stack.pop()\n            result[idx] = value\n        stack.append(i)       # Current index might find its answer later\n\n    return result\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    answers = next_greater_elements(arr)\n    print(' '.join(map(str, answers)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if it is possible to partition the array into two subsets with equal sum.\n\nInput:\n- The first line contains a single integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 1000).\n\nOutput:\n- Output \"YES\" if such a partition exists, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, can't split into two equal integers\n    if total & 1:\n        return False\n    target = total // 2\n\n    # Bitset DP: bit i of `bits` tells whether a subset sum of i is achievable\n    bits = 1  # only 0 is reachable at start\n    for x in nums:\n        bits |= bits << x          # add current number to all existing sums\n        # Early exit: if target bit is set, partition is possible\n        if (bits >> target) & 1:\n            return True\n        # Mask out bits beyond target to keep number small (not necessary but helps)\n        if bits.bit_length() > target + 1:\n            bits &= (1 << (target + 1)) - 1\n    return False\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm – O(n) time, O(1) space.\"\"\"\n    best = current = arr[0]\n    for value in arr[1:]:\n        current = max(value, current + value)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_so_far = -10**15  # sufficiently small\n    current_max = 0\n    for num in arr:\n        current_max = max(num, current_max + num)\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 through N), where each edge has a weight, find the length of the longest path in the tree (the diameter of the tree).\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), indicating an undirected edge between nodes u and v with weight w.\n\nOutput Format:\nPrint a single integer, the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n\ndef main() -> None:\n    # Fast input: read everything at once and split by whitespace\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))            # number of nodes (1-indexed in the input)\n\n    # Build adjacency list: adj[u] = list of (v, w)\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u = int(next(it)) - 1    # convert to 0-indexed\n        v = int(next(it)) - 1\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # Helper: returns (vertex, distance) of the farthest vertex from 'start'\n    def farthest(start: int):\n        dist = [-1] * n\n        dist[start] = 0\n        stack = [start]\n\n        # Iterative DFS (any traversal works since we only care about distances)\n        while stack:\n            node = stack.pop()\n            d = dist[node]\n            for nxt, w in adj[node]:\n                if dist[nxt] == -1:\n                    dist[nxt] = d + w\n                    stack.append(nxt)\n\n        # Find the vertex with maximum distance\n        max_v = start\n        max_d = 0\n        for v, d in enumerate(dist):\n            if d > max_d:\n                max_d = d\n                max_v = v\n        return max_v, max_d\n\n    # First pass: pick arbitrary node (0), find farthest 'a'\n    a, _ = farthest(0)\n    # Second pass: from 'a', find farthest 'b' and its distance\n    _, diameter = farthest(a)\n\n    # Output the diameter length\n    print(diameter)\n\n\n# ----- run the solution -----\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer N, find the smallest positive integer X such that the sum of the digits of X is equal to N.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^4).\n\nOutput:\nPrint X.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_number_with_digit_sum(n: int) -> str:\n    \"\"\"\n    Build the smallest positive integer whose decimal digit–sum equals n.\n    Strategy:\n        • Use as many 9-digits as possible (they sit at the right side),\n          because that minimises the overall length.\n        • Put the possible leftover (1–8) as the most-significant digit.\n    \"\"\"\n    nines = n // 9          # how many full ‘9’ digits we need\n    remainder = n % 9       # value of the optional leading digit (0‥8)\n\n    if remainder:           # non-zero remainder becomes the first digit\n        return str(remainder) + '9' * nines\n    else:                   # divisible by 9 → only 9-digits\n        return '9' * nines\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:            # no input protection (shouldn’t happen in tests)\n        return\n    n = int(data)\n    print(smallest_number_with_digit_sum(n))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. For each element, determine how many elements to its right are smaller than it.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 2 × 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput Format:\nPrint N integers: the i-th integer is the number of elements to the right of A_i that are smaller than A_i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass Fenwick:\n    \"\"\"1-based Fenwick (Binary Indexed) Tree supporting point updates and\n    prefix-sum queries.\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.bit = [0] * (n + 1)\n\n    def add(self, idx: int, delta: int = 1) -> None:\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def pref_sum(self, idx: int) -> int:\n        s = 0\n        while idx:\n            s += self.bit[idx]\n            idx -= idx & -idx\n        return s\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    a = data[1:n + 1]\n\n    # Coordinate compression\n    vals = sorted(set(a))\n    comp = {v: i + 1 for i, v in enumerate(vals)}   # 1-based index\n\n    fw = Fenwick(len(vals))\n    ans = [0] * n\n\n    # Traverse from right to left\n    for i in range(n - 1, -1, -1):\n        idx = comp[a[i]]\n        # Count of strictly smaller elements already seen (to the right)\n        ans[i] = fw.pref_sum(idx - 1)\n        fw.add(idx, 1)\n\n    sys.stdout.write(' '.join(map(str, ans)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x   # equivalent to max(x, cur+x) without calling max()\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    # In case less numbers are provided we slice safely\n    arr = list(map(int, data[1:1+n]))\n    print(max_subarray_sum(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine whether it is possible to remove at most one edge to make the graph acyclic (i.e., a forest).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between nodes u and v.\n\nOutput:\nPrint \"YES\" if it is possible to remove at most one edge to make the graph acyclic, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:                       # no input\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # ---------- Disjoint-Set Union (Union–Find) ----------\n    parent = list(range(n + 1))\n    rank = [0] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]   # path compression\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False\n        if rank[ra] < rank[rb]:\n            ra, rb = rb, ra\n        parent[rb] = ra\n        if rank[ra] == rank[rb]:\n            rank[ra] += 1\n        return True\n    # -----------------------------------------------------\n\n    components = n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if union(u, v):\n            components -= 1\n\n    # Cyclomatic number of an undirected graph:\n    #   extra = m - n + components\n    extra_edges = m - n + components\n\n    # We need to delete at most one edge to destroy all cycles\n    if extra_edges <= 1:\n        sys.stdout.write(\"YES\\n\")\n    else:\n        sys.stdout.write(\"NO\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that contains no repeating characters.\n    Uses a sliding-window approach with a dictionary that stores the latest index at which\n    each character has been seen.\n    \"\"\"\n    last_seen = {}          # char -> latest position (0-based)\n    left = 0                # left boundary of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        # If we've seen the character and it's inside the current window,\n        # move `left` just past its previous occurrence.\n        if ch in last_seen and last_seen[ch] >= left:\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        # Update maximum length found so far\n        window_len = right - left + 1\n        if window_len > max_len:\n            max_len = window_len\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the sum.\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\nOutput Format:\n- A single integer representing the maximum contiguous subarray sum.\nConstraints:\n- 1 ≤ n ≤ 10^5\n- -10^4 ≤ a_i ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = x if max_ending_here + x < x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring which does not contain any repeating characters.\n\nInput:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5), the length of the string.\nThe second line contains the string S.\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line: length of string (can be disregarded except for validation)\n    # Second line: actual string\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    \n    # Sliding-window technique\n    last_pos = {}          # char -> most recent index\n    left = 0               # left boundary of current window\n    best = 0               # length of longest valid window found\n    \n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Duplicate encountered inside current window: shrink from left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the index of the first occurrence of the smallest number. If there are multiple occurrences, return the smallest index.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000), the length of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the index (0-based) of the first occurrence of the smallest number in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))  # ensure we only take n numbers even if extra input\n    # Find minimum and its first index\n    min_val = min(nums)\n    first_index = nums.index(min_val)  # returns first occurrence\n    print(first_index)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- A single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output a single integer representing the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding–window approach.\n    left  – left boundary of current window\n    last  – dictionary storing the most recent index of every character seen\n    \"\"\"\n    last = {}\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last and last[ch] >= left:\n            # Repeated character inside the current window → shrink from the left\n            left = last[ch] + 1\n        last[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Your task is to find the smallest integer k such that the sum of the digits of k is exactly n.\n\nInput Format:\n- The first and only line contains the integer n (1 ≤ n ≤ 10^4).\n\nOutput Format:\n- Output the value of k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # When n <= 9, the digit itself is the smallest number.\n    if n <= 9:\n        print(n)\n        return\n\n    q, r = divmod(n, 9)\n\n    # Build the smallest number: a possible leading remainder digit (1–8),\n    # followed by `q` nines.\n    res = (str(r) if r else '') + '9' * q\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimum number of elements you need to remove so that the greatest common divisor (GCD) of the remaining elements is greater than 1. If it is not possible, print -1.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe next line contains n integers a_i (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint the minimum number of elements to remove, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\n# ---------- smallest-prime-factor sieve ----------\ndef build_spf(limit: int):\n    \"\"\"\n    Builds an array spf[] where spf[x] is the smallest prime\n    that divides x (for x >= 2).  Complexity: O(limit)\n    \"\"\"\n    spf = [0] * (limit + 1)\n    primes = []\n    for i in range(2, limit + 1):\n        if spf[i] == 0:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if p > spf[i] or i * p > limit:\n                break\n            spf[i * p] = p\n    return spf\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    MAX_A = 10 ** 6\n    spf = build_spf(MAX_A)\n\n    prime_count = defaultdict(int)\n    best = 0\n\n    for x in a:\n        if x == 1:\n            continue\n        # extract **unique** prime factors of x\n        unique_primes = set()\n        while x > 1:\n            p = spf[x]\n            unique_primes.add(p)\n            while x % p == 0:\n                x //= p\n        for p in unique_primes:\n            prime_count[p] += 1\n            if prime_count[p] > best:\n                best = prime_count[p]\n\n    if best == 0:\n        # every element is 1  → impossible\n        print(-1)\n    else:\n        print(n - best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the smallest positive integer that does not appear in the array.\n\nInput Format:\n- The first line contains a single integer N (1 ≤ N ≤ 100000).\n- The second line contains N integers a_1, a_2, ..., a_N (−10^6 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Print a single integer: the smallest positive integer missing from the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_missing_positive(arr):\n    \"\"\"\n    Returns the smallest positive integer that is not present in `arr`.\n    \"\"\"\n    n = len(arr)\n    \n    # We only care about numbers in the range [1, n+1].\n    # Any number > n+1 cannot affect the smallest missing positive in that range.\n    present = [False] * (n + 2)   # indices 0..n+1\n\n    for x in arr:\n        if 1 <= x <= n + 1:\n            present[x] = True\n    \n    # The first index i (starting from 1) with present[i] == False is the answer.\n    for i in range(1, n + 2):\n        if not present[i]:\n            return i\n    # Control should never reach here\n    return n + 2\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))  # ensure exactly n numbers are read\n    result = smallest_missing_positive(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\nOutput Format:\n- A single integer: the length of the longest substring without repeating characters.\nConstraints:\n- 1 ≤ |s| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}\n    left = 0\n    max_len = 0\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\ndef main():\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Determine whether it can be rearranged to form a palindrome. Output 'YES' if it's possible, otherwise output 'NO'.\n\nInput Format:\n- A single line containing a string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of s can be rearranged to form a palindrome.\n    A palindrome can have at most one character with an odd frequency.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Print the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Edge case: if n == 0 (though problem states n ≥ 1)\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    max_sum = current_sum = nums[0]\n    for x in nums[1:]:\n        current_sum = x if current_sum < 0 else current_sum + x\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given N tasks, each with a start time S_i and an end time E_i. Find the minimum number of resources required to schedule all tasks so that no two overlapping tasks use the same resource.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 2×10^5).\n- The next N lines each contain two integers S_i and E_i (1 ≤ S_i < E_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the minimum number of resources required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    input_data = sys.stdin.buffer.read().split()\n    if not input_data:\n        return\n    it = iter(input_data)\n    n = int(next(it))\n    \n    events = []\n    for _ in range(n):\n        s = int(next(it))\n        e = int(next(it))\n        # start event : +1, end event : -1\n        events.append((s, 1))\n        events.append((e, -1))\n    \n    # Sort by time; for the same time, process end (-1) before start (+1)\n    events.sort(key=lambda x: (x[0], x[1]))\n    \n    current = 0\n    max_concurrent = 0\n    for _, delta in events:\n        current += delta\n        if current > max_concurrent:\n            max_concurrent = current\n    \n    print(max_concurrent)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers nums[i] (−10^4 ≤ nums[i] ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum that can be obtained from any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"\n    Kadane's algorithm to find maximum sum of a contiguous subarray.\n    \"\"\"\n    best = current = nums[0]\n    for num in nums[1:]:\n        current = max(num, current + num)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers. Find the number of pairs (i, j) such that i < j and a_i + a_j is divisible by K.\n\nInput:\nThe first line contains two integers N and K (2 ≤ N ≤ 2 × 10^5, 1 ≤ K ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    N, K = data[0], data[1]\n    arr = data[2:]\n\n    freq = defaultdict(int)\n    for x in arr:\n        freq[x % K] += 1\n\n    pairs = 0\n\n    # remainder 0\n    c0 = freq[0]\n    pairs += c0 * (c0 - 1) // 2\n\n    # other remainders\n    for r in range(1, (K + 1) // 2):\n        pairs += freq[r] * freq[K - r]\n\n    # handle K even remainder K/2\n    if K % 2 == 0:\n        ck = freq[K // 2]\n        pairs += ck * (ck - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, each edge has a positive integer weight. For Q queries, each consisting of two nodes u and v, compute the sum of edge weights on the path from u to v.\n\nInput:\nThe first line contains two integers N and Q (1 ≤ N, Q ≤ 10^5).\nThe next N-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), describing an edge.\nThe next Q lines each contain two integers u and v (1 ≤ u, v ≤ N).\n\nOutput:\nFor each query, output the sum on a separate line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    N = next(it)\n    Q = next(it)\n\n    adj = [[] for _ in range(N + 1)]\n    for _ in range(N - 1):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    LOG = (N).bit_length()          # enough so that 2**LOG > N\n    parent = [[0] * (N + 1) for _ in range(LOG)]\n    depth  = [-1] * (N + 1)\n    dist   = [0] * (N + 1)\n\n    # iterative DFS/BFS from root = 1\n    stack = [1]\n    depth[1] = 0\n    while stack:\n        node = stack.pop()\n        for nxt, w in adj[node]:\n            if depth[nxt] == -1:\n                depth[nxt] = depth[node] + 1\n                parent[0][nxt] = node\n                dist[nxt] = dist[node] + w\n                stack.append(nxt)\n\n    # build binary-lifting table\n    for k in range(1, LOG):\n        p_prev = parent[k - 1]\n        p_cur  = parent[k]\n        for v in range(1, N + 1):\n            anc = p_prev[v]\n            p_cur[v] = p_prev[anc] if anc else 0\n\n    def lca(u: int, v: int) -> int:\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # lift u up so depth equal\n        diff = depth[u] - depth[v]\n        bit = 0\n        while diff:\n            if diff & 1:\n                u = parent[bit][u]\n            diff >>= 1\n            bit += 1\n        if u == v:\n            return u\n        for k in range(LOG - 1, -1, -1):\n            if parent[k][u] != parent[k][v]:\n                u = parent[k][u]\n                v = parent[k][v]\n        return parent[0][u]\n\n    out_lines = []\n    append = out_lines.append\n    for _ in range(Q):\n        u = next(it)\n        v = next(it)\n        ancestor = lca(u, v)\n        path_sum = dist[u] + dist[v] - 2 * dist[ancestor]\n        append(str(path_sum))\n\n    sys.stdout.write('\\n'.join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has an integer weight, find the diameter of the tree (the largest distance between any two nodes).\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) denoting an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer, the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"Returns the farthest node from `start` and its distance.\"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]           # iterative DFS stack\n    far_node = start\n    max_dist = 0\n\n    while stack:\n        node = stack.pop()\n        d = dist[node]\n        for nei, w in adj[node]:\n            if dist[nei] == -1:\n                nd = d + w\n                dist[nei] = nd\n                stack.append(nei)\n                if nd > max_dist:\n                    max_dist = nd\n                    far_node = nei\n    return far_node, max_dist\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: farthest from node 1\n    node_a, _ = farthest_node(1, adj, n)\n\n    # 2nd pass: farthest from node_a gives diameter\n    _, diameter = farthest_node(node_a, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n) and n-1 edges, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\n- Output a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj, n):\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    farthest_node = start\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > dist[farthest_node]:\n                    farthest_node = v\n    return farthest_node, dist[farthest_node]\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS from any node (1) to find one endpoint of diameter\n    endpoint, _ = bfs(1, adj, n)\n\n    # Second BFS from the found endpoint to get diameter length\n    _, diameter = bfs(endpoint, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    # Initialize with the first element to correctly handle all-negative arrays\n    best = current = arr[0]\n    for x in arr[1:]:\n        current = max(x, current + x)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # In case fewer numbers than n are provided, slicing will protect us\n    arr = list(map(int, data[1:1 + n]))\n    if not arr:          # Safety, though constraints say n ≥ 1\n        print(0)\n        return\n    print(kadane(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N. Find the length of the longest substring that contains only unique characters (no character repeats).\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains a string S consisting of lowercase English letters.\n\nOutput Format:\n- Print a single integer, the maximum length of a substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    # Sliding-window + last seen position of each character\n    last_pos = [-1] * 26        # because only lowercase letters\n    best = 0\n    left = 0                    # left end of the current window\n    for right, ch in enumerate(s):\n        idx = ord(ch) - 97\n        # If this character was seen inside the current window,\n        # move the left end just after its previous position.\n        if last_pos[idx] >= left:\n            left = last_pos[idx] + 1\n        last_pos[idx] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # n can be trusted, but we take min to guard extra whitespace\n    s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring that contains no more than two distinct characters.\n\nInput Format:\n- A single line containing a string s (1 ≤ |s| ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest such substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    \"\"\"\n    Sliding-window to keep at most two distinct characters in current window.\n    \"\"\"\n    if len(s) <= 2:\n        return len(s)\n\n    freq = defaultdict(int)       # counts of chars inside window\n    left = 0                      # left border of window\n    best = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # shrink window while we have more than 2 distinct letters\n        while len(freq) > 2:\n            to_remove = s[left]\n            freq[to_remove] -= 1\n            if freq[to_remove] == 0:\n                del freq[to_remove]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_substring_two_distinct(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two sorted arrays of length N and M, merge them into a single sorted array.\n\nInput:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 10^5).\nThe second line contains N integers A_1, ..., A_N (−10^9 ≤ A_i ≤ 10^9).\nThe third line contains M integers B_1, ..., B_M (−10^9 ≤ B_i ≤ 10^9).\n\nOutput:\nPrint the merged sorted array as a single line of N+M integers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef merge_sorted(arr1, arr2):\n    n, m = len(arr1), len(arr2)\n    i = j = 0\n    merged = []\n    append = merged.append\n    while i < n and j < m:\n        if arr1[i] <= arr2[j]:\n            append(arr1[i])\n            i += 1\n        else:\n            append(arr2[j])\n            j += 1\n    # Append remaining\n    if i < n:\n        merged.extend(arr1[i:])\n    if j < m:\n        merged.extend(arr2[j:])\n    return merged\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    m = int(data[1])\n    # Next n integers are the first array, following m integers second array\n    a_start = 2\n    a_end = a_start + n\n    b_end = a_end + m\n    arr1 = list(map(int, data[a_start:a_end]))\n    arr2 = list(map(int, data[a_end:b_end]))\n    \n    merged = merge_sorted(arr1, arr2)\n    sys.stdout.write(' '.join(map(str, merged)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}          # character -> its latest index in the current window\n    left = 0               # left end of the sliding window\n    best = 0               # best length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Character repeats within the current window – move `left`\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, find the smallest positive integer that is not present in the list.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^6).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint the smallest positive integer not in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # The smallest missing positive cannot exceed n+1\n    limit = n + 2\n    seen = bytearray(limit)          # bytearray is a compact boolean array\n\n    for x in nums:\n        if 0 < x < limit:            # we only care about numbers in [1, n+1]\n            seen[x] = 1\n\n    for i in range(1, limit):\n        if seen[i] == 0:\n            print(i)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm.\"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = max(x, cur + x)\n        best = max(best, cur)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Determine if it is possible to partition the array into two subsets with equal sum.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 100).\n- The second line contains n integers (1 ≤ a_i ≤ 100).\n\nOutput Format:\n- Output 'YES' if such a partition exists, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    if total % 2 == 1:            # odd total cannot be split equally\n        return False\n    target = total // 2\n\n    # Bitset DP: dp bit i is 1 if sum i can be formed\n    dp = 1                        # only sum 0 is achievable at start\n    for num in nums:\n        dp |= dp << num           # add current number to all existing sums\n        if dp >> target & 1:      # early exit if target already reachable\n            return True\n    return False                  # target not reachable\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print('YES' if can_partition(nums) else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the minimum number of elements to remove to make the remaining array non-decreasing.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_right\n\ndef lnds_length(arr):\n    \"\"\"\n    Returns the length of the Longest Non-Decreasing Subsequence in `arr`\n    using an O(N log N) patience-sorting style algorithm.\n    \"\"\"\n    tails = []                       # tails[i] = smallest possible tail of an LNDS of length i+1\n    for x in arr:\n        idx = bisect_right(tails, x) # first element in tails that is > x\n        if idx == len(tails):\n            tails.append(x)          # extend the list\n        else:\n            tails[idx] = x           # improve existing subsequence\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n  = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    # Minimum removals = total elements - length of LNDS\n    answer = n - lnds_length(arr)\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains at most k distinct characters.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26), where n is the length of the string.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Output a single integer: the length of the longest substring with at most k distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_at_most_k_distinct(s: str, k: int) -> int:\n    if k == 0 or not s:\n        return 0\n    if k >= len(set(s)):\n        return len(s)\n\n    freq = defaultdict(int)\n    left = 0\n    max_len = 0\n    distinct = 0\n\n    for right, ch in enumerate(s):\n        if freq[ch] == 0:\n            distinct += 1\n        freq[ch] += 1\n\n        while distinct > k:\n            freq[s[left]] -= 1\n            if freq[s[left]] == 0:\n                distinct -= 1\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    s = data[2] if len(data) > 2 else \"\"\n    # If the string was split by whitespace, ensure we take only first n characters\n    # (in case the string contained spaces—though per problem statement it won't)\n    s = s[:n]\n    print(longest_substring_at_most_k_distinct(s, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n space-separated integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- A single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Returns the maximum sum of any contiguous subarray within `arr`.\n    Implements Kadane's algorithm in O(n) time.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Extend the current subarray or start a new one at x\n        max_ending_here = max(x, max_ending_here + x)\n        # Update global maximum if necessary\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    # Defensive check in case fewer numbers than stated\n    if len(arr) != n:\n        raise ValueError(\"Number of elements does not match n\")\n    result = kadane_max_subarray(arr)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring that contains no repeated characters.\n\nInput:\nA single string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer — the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n\n    last_pos = {}       # stores last index of each character\n    start = 0           # left border of current window\n    best = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # character repeated inside current window → move left border\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s, determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s consisting of lowercase English letters.\n\nOutput Format:\n- A single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding window approach to compute the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    last_pos = {}          # character -> most recent index\n    left = 0               # left edge of the current window\n    best = 0               # best length found\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window -> shrink from left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line: n (could be unused because we can rely on len(s))\n    # Second line: the actual string\n    s = data[1] if len(data) > 1 else \"\"\n    result = longest_unique_substring_length(s)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with n nodes and m edges, determine if it is possible to remove exactly one edge such that the graph remains connected and contains no cycles.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 2×10^5, n ≤ m ≤ 2×10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v.\n\nOutput Format:\n- Output 'YES' if it is possible to remove one edge to obtain a tree, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    m = int(data[1])\n\n    # We only need to consume the rest of the input (2*m integers) to finish reading,\n    # no further processing is necessary for the solution logic.\n    #   total expected tokens = 2 + 2*m\n    # We have them already in `data`, so nothing else to do.\n\n    # A connected graph can become a tree (connected & acyclic with n-1 edges)\n    # after removing exactly one edge  ⇔  it currently has n edges.\n    if m == n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, determine if it can be expressed as the sum of two or more consecutive positive integers.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^9).\n\nOutput Format:\n- Output \"YES\" if n can be written as the sum of two or more consecutive positive integers, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef is_power_of_two(x: int) -> bool:\n    # For positive integers a power of two has exactly one bit set.\n    return x & (x - 1) == 0\n\ndef main() -> None:\n    n_line = sys.stdin.readline()\n    if not n_line:          # no input\n        return\n    n = int(n_line.strip())\n\n    # A positive integer can be written as the sum of ≥2 consecutive\n    # positive integers ⇔ it is NOT a power of two.\n    if n > 0 and not is_power_of_two(n):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n×m filled with '.' (empty) and '#' (walls), count the number of connected components of empty cells. Two empty cells are connected if they share a side.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain a string of length m, representing the grid.\n\nOutput Format:\n- A single integer: the number of connected components.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:1+n]\n\n    visited = [[False]*m for _ in range(n)]\n\n    def bfs(start_i: int, start_j: int) -> None:\n        q = deque()\n        q.append((start_i, start_j))\n        visited[start_i][start_j] = True\n        while q:\n            i, j = q.popleft()\n            # explore 4-neighbours\n            if i > 0 and not visited[i-1][j] and grid[i-1][j] == '.':\n                visited[i-1][j] = True\n                q.append((i-1, j))\n            if i < n-1 and not visited[i+1][j] and grid[i+1][j] == '.':\n                visited[i+1][j] = True\n                q.append((i+1, j))\n            if j > 0 and not visited[i][j-1] and grid[i][j-1] == '.':\n                visited[i][j-1] = True\n                q.append((i, j-1))\n            if j < m-1 and not visited[i][j+1] and grid[i][j+1] == '.':\n                visited[i][j+1] = True\n                q.append((i, j+1))\n\n    components = 0\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '.' and not visited[i][j]:\n                components += 1\n                bfs(i, j)\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, each node has a value. For every node, compute the sum of values in its subtree (including itself).\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N integers v_1, v_2, ..., v_N, where v_i is the value of node i.\n- The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N), denoting an edge between nodes u and v.\n\nOutput Format:\n- Print N integers, where the i-th integer is the sum of values in the subtree rooted at node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(200000)\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    values = [0] + data[1:n + 1]                       # 1-indexed\n    edges = data[n + 1:]\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for i in range(0, len(edges), 2):\n        u = edges[i]\n        v = edges[i + 1]\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)\n\n    def dfs(u: int, parent: int) -> int:\n        total = values[u]\n        for v in adj[u]:\n            if v == parent:\n                continue\n            total += dfs(v, u)\n        subtree_sum[u] = total\n        return total\n\n    dfs(1, 0)\n\n    sys.stdout.write(' '.join(str(subtree_sum[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, determine the minimum number of elements to remove so that the remaining array is strictly increasing.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"\n    Returns the length of the Longest Increasing Subsequence (strict).\n    \"\"\"\n    tails = []  # tails[i] = smallest possible tail of an IS of length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)  # strict increasing ⇒ bisect_left\n        if idx == len(tails):\n            tails.append(x)\n        else:\n            tails[idx] = x\n    return len(tails)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    lis_len = lis_length(arr)\n    print(n - lis_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n integers, find the smallest positive integer that cannot be formed as the sum of any subset of the given numbers.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 1000).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the smallest positive integer that cannot be formed as described.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Sort the numbers to process them in non-decreasing order\n    arr.sort()\n    \n    # `res` will always hold the smallest positive integer that we **cannot**\n    # build with the numbers processed so far.\n    res = 1\n    for x in arr:\n        # If the current number is greater than `res`, we cannot make `res`,\n        # so that is the answer.\n        if x > res:\n            break\n        # Otherwise, we can now build every value up to `res + x - 1`\n        res += x\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s.\n\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    which contains no repeating characters.\n    \"\"\"\n    last_pos = {}          # maps character -> last seen index\n    start = 0              # left boundary of current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # character repeated inside current window, move `start`\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        # length of current window is (i - start + 1)\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Sanity: use only first n characters in case of extra whitespace.\n    s = s[:n]\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether S can be rearranged to form a palindrome.\n\nInput Format:\nThe first line contains a single string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nPrint \"YES\" if S can be rearranged to form a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    A string can be rearranged into a palindrome if at most one\n    character appears an odd number of times.\n    \"\"\"\n    freq = Counter(s)\n    odd_counts = sum(1 for count in freq.values() if count % 2)\n    return odd_counts <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), where each edge has a weight, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nEach of the next N-1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between nodes u and v with weight w.\n\nOutput:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start: int, adj: list, n: int):\n    \"\"\"\n    Returns the node farthest from `start`, the distance to it\n    and the full distance array.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start                     # node with current maximum distance\n\n    while q:\n        u = q.popleft()\n        if dist[u] > dist[far_node]:\n            far_node = u\n        for v, w in adj[u]:\n            if dist[v] == -1:            # not visited yet\n                dist[v] = dist[u] + w\n                q.append(v)\n\n    return far_node, dist[far_node], dist\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st pass: from any node (say 1) find the farthest node\n    node1, _, _ = farthest(1, adj, n)\n    \n    # 2nd pass: from node1 find the farthest — the distance is the diameter\n    _, diameter, _ = farthest(node1, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, output the most frequently occurring integer. If there are multiple such integers, output the smallest one.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer: the most frequent integer (smallest in case of a tie).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])   # safeguards if extra numbers appear\n    freq = Counter(nums)\n    \n    # Find the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Among numbers with max frequency, choose the smallest\n    most_common_smallest = min(k for k, v in freq.items() if v == max_freq)\n    print(most_common_smallest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n space-separated integers (−10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])                       # number of elements (may be unused later)\n    numbers = map(int, data[1:1 + n])      # read exactly n numbers\n    even_sum = sum(x for x in numbers if x % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find and print the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n space-separated integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane(arr):\n    # Initialize current and global maximum with the first element.\n    current_max = global_max = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at x.\n        current_max = max(x, current_max + x)\n        # Update global maximum if needed.\n        global_max = max(global_max, current_max)\n    return global_max\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    print(kadane(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x n grid filled with '.' and '#' characters, find the number of connected components of '#' cells. Two '#' cells are connected if they share a side (up, down, left, or right).\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 1000).\n- Each of the next n lines contains a string of length n consisting of '.' and '#'.\n\nOutput Format:\n- Output a single integer: the number of connected components of '#' cells.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    grid = [list(row.rstrip()) for row in data[1:n+1]]\n\n    visited = [[False] * n for _ in range(n)]\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    components = 0\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '#' and not visited[i][j]:\n                components += 1\n                # BFS to mark all cells in this component\n                queue = deque()\n                queue.append((i, j))\n                visited[i][j] = True\n\n                while queue:\n                    x, y = queue.popleft()\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < n:\n                            if grid[nx][ny] == '#' and not visited[nx][ny]:\n                                visited[nx][ny] = True\n                                queue.append((nx, ny))\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the maximum sum of any non-empty contiguous subarray.\n\nInput Format:\n- The first line contains integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for x in nums[1:]:\n        max_ending_here = x if x > max_ending_here + x else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine whether there exists a pair of distinct elements whose sum is equal to a given integer k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in arr:\n        comp = k - x\n        if comp in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an n x n grid of integers. Find the length of the longest strictly increasing path in the grid. You can move in four directions (up, down, left, right) from each cell.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 200).\n- The next n lines each contain n integers (−10^4 ≤ grid[i][j] ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest increasing path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    grid = [[int(next(it)) for _ in range(n)] for _ in range(n)]\n\n    from functools import lru_cache\n\n    dirs = [(1,0), (-1,0), (0,1), (0,-1)]\n\n    @lru_cache(maxsize=None)\n    def dfs(r, c):\n        best = 1  # path containing only this cell\n        cur = grid[r][c]\n        for dr, dc in dirs:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and grid[nr][nc] > cur:\n                best = max(best, 1 + dfs(nr, nc))\n        return best\n\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            ans = max(ans, dfs(i, j))\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of a contiguous subarray. Output the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two strings, s and t, both consisting of lowercase English letters. Determine the minimum number of character deletions required to make the two strings anagrams of each other.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n- The second line contains the string t (1 ≤ |t| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    s = data[0].strip()\n    t = data[1].strip() if len(data) > 1 else \"\"\n    \n    # Count character frequencies\n    cnt_s = Counter(s)\n    cnt_t = Counter(t)\n    \n    # Compute deletions: sum of absolute frequency differences for each letter\n    # Using lowercase English letters ('a' to 'z')\n    deletions = 0\n    for ch in range(ord('a'), ord('z') + 1):\n        c = chr(ch)\n        deletions += abs(cnt_s.get(c, 0) - cnt_t.get(c, 0))\n    \n    print(deletions)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(nums):\n    \"\"\"Kadane's algorithm: O(n) time, O(1) space.\"\"\"\n    best = cur = nums[0]\n    for x in nums[1:]:\n        cur = x if cur + x < x else cur + x\n        if cur > best:\n            best = cur\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s.\n\nOutput:\nPrint a single integer — the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Sliding–window implementation that returns the maximum length\n    of a substring of `s` that contains no duplicate characters.\n    \"\"\"\n    last_pos = {}          # character -> most recent index\n    best = 0               # best length seen so far\n    left = 0               # left end of the current window\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # `ch` found inside current window -> move `left` past it\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line is n, second line is string.\n    # We ignore n because len(s) gives us the same information.\n    s = data[1].rstrip('\\n') if len(data) > 1 else \"\"\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of only lowercase English letters. Determine whether the string is a palindrome (the same forwards and backwards).\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint \"YES\" if the string is a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()  # Read string and remove any trailing newline\n    # A string is a palindrome if it equals its reverse\n    if s == s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray of length at least k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the maximum sum of any contiguous subarray of length at least k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    prefix = [0] * (n + 1)        # prefix[0] = 0\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + int(next(it))\n\n    # Initialize min_prefix with prefix[0] = 0 (for subarrays starting at index 1)\n    min_prefix = 0\n    best = -10**18                       # sufficiently small\n    for i in range(k, n + 1):\n        # candidate sum for subarray ending at i and of length at least k\n        cand = prefix[i] - min_prefix\n        if cand > best:\n            best = cand\n        # update min_prefix for next iterations: we can choose start index up to (i - k + 1) next time,\n        # so we include prefix[i - k + 1 - 1] = prefix[i - k]\n        if prefix[i - k + 1] < min_prefix:\n            min_prefix = prefix[i - k + 1]\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the index of the first occurrence of the maximum value. If there are multiple occurrences, return the smallest index.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the index (0-based) of the first occurrence of the maximum value.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Initialize with the first element's value and index\n    max_val = arr[0]\n    max_idx = 0\n    \n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_idx = i\n    \n    print(max_idx)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, determine if there exists a subset whose sum is exactly k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^5).\n- The second line contains n space-separated integers a_1, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Print \"YES\" if such a subset exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n\n    # Bitset where the i-th bit being 1 means a subset sum of i is attainable\n    dp = 1  # only sum 0 is attainable at start\n\n    mask_limit = (1 << (k + 1)) - 1  # keep dp truncated to k bits\n\n    for num in arr:\n        if num > k:       # numbers larger than k cannot help reaching exactly k\n            continue\n        dp |= (dp << num) & mask_limit\n        if (dp >> k) & 1:  # Early exit if k already attainable\n            print(\"YES\")\n            return\n\n    print(\"YES\" if ((dp >> k) & 1) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given n points on a 2D plane. Count the number of unordered pairs of points that have the same Manhattan distance from the origin.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2⋅10^5).\nThe next n lines each contain two integers x_i and y_i (−10^9 ≤ x_i, y_i ≤ 10^9), representing the coordinates of the i-th point.\nOutput:\nPrint a single integer, the number of unordered pairs with the same Manhattan distance from the origin.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    freq = defaultdict(int)\n\n    for _ in range(n):\n        x = int(next(it)); y = int(next(it))\n        d = abs(x) + abs(y)\n        freq[d] += 1\n\n    ans = 0\n    for c in freq.values():\n        if c > 1:\n            ans += c * (c - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, find the number of pairs (i, j) such that 1 ≤ i < j ≤ n and a_i + a_j is divisible by k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^3, 1 ≤ k ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Frequency of each remainder modulo k\n    freq = [0] * k\n    for val in nums:\n        freq[val % k] += 1\n\n    # Pairs where both numbers give remainder 0\n    pairs = freq[0] * (freq[0] - 1) // 2\n\n    # Pairs where remainders add up to k\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    # If k is even, handle the remainder k/2 separately\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with n nodes and m edges, determine if there is a cycle in the graph.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting a directed edge from u to v.\n\nOutput Format:\n- Output \"YES\" if there is a cycle, otherwise \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n\n    color = [0] * (n + 1)     # 0 = unvisited, 1 = in-stack, 2 = done\n\n    def dfs(u: int) -> bool:\n        color[u] = 1          # mark as visiting\n        for v in adj[u]:\n            if color[v] == 0:\n                if dfs(v):\n                    return True\n            elif color[v] == 1:\n                # back edge to an ancestor → cycle\n                return True\n        color[u] = 2          # mark as fully processed\n        return False\n\n    for node in range(1, n + 1):\n        if color[node] == 0:\n            if dfs(node):\n                print(\"YES\")\n                return\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N positive integers. Find the length of the shortest contiguous subarray whose sum is at least K. If there is no such subarray, print -1.\n\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the length of the shortest subarray with sum at least K, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    left = 0\n    current_sum = 0\n    best_len = n + 1         # larger than any possible answer\n\n    for right, value in enumerate(arr):\n        current_sum += value\n\n        # shrink window from the left while the sum is still >= K\n        while current_sum >= k:\n            best_len = min(best_len, right - left + 1)\n            current_sum -= arr[left]\n            left += 1\n\n    print(best_len if best_len <= n else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, count the number of pairs (i, j) such that i < j and a_i + a_j is divisible by k.\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\nOutput Format:\n- A single integer: the number of valid pairs.\nConstraints:\n- 1 ≤ n ≤ 10^5\n- 1 ≤ k ≤ 10^9\n- 1 ≤ a_i ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    counts = defaultdict(int)  # remainder -> frequency seen so far\n    pairs = 0\n\n    for val in arr:\n        r = val % k\n        need = (-r) % k          # remainder that complements r to 0 mod k\n        pairs += counts[need]    # all earlier numbers with remainder 'need'\n        counts[r] += 1\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n points in the 2D plane with integer coordinates, find the smallest possible area of a rectangle (with sides parallel to the axes) that contains all the points.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n lines contains two integers x_i and y_i (−10^9 ≤ x_i, y_i ≤ 10^9).\n\nOutput:\nPrint a single integer representing the minimum area of such a rectangle.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    xs = map(int, data[1::2])\n    ys = map(int, data[2::2])\n\n    min_x = float('inf')\n    max_x = float('-inf')\n    min_y = float('inf')\n    max_y = float('-inf')\n\n    for x in xs:\n        if x < min_x:\n            min_x = x\n        if x > max_x:\n            max_x = x\n\n    for y in ys:\n        if y < min_y:\n            min_y = y\n        if y > max_y:\n            max_y = y\n\n    width = max_x - min_x\n    height = max_y - min_y\n    area = width * height\n    print(area)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest subarray with all elements equal.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest contiguous subarray where all elements are equal.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    max_len = 1\n    cur_len = 1\n    \n    for i in range(1, n):\n        if arr[i] == arr[i - 1]:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 1\n    max_len = max(max_len, cur_len)\n    \n    print(max_len)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 to n), rooted at node 1. Each node has an integer value. For each node, compute the sum of values in its subtree (including the node itself).\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 2 × 10^5).\n- The second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4).\n- Each of the next n−1 lines contains two integers u and v, meaning there is an edge between nodes u and v.\n\nOutput Format:\n- Output n integers: the sum of values in the subtree of each node, in order from 1 to n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    # values are 1-indexed; prepend 0 for convenience\n    val = [0] + [int(next(it)) for _ in range(n)]\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)\n\n    # iterative post-order DFS to avoid deep recursion overhead\n    stack = [(1, 0, 0)]  # (node, parent, state)  state 0: first visit, 1: after children\n    while stack:\n        node, parent, state = stack.pop()\n        if state == 0:\n            # first time we see the node\n            stack.append((node, parent, 1))  # will handle after children\n            for nxt in adj[node]:\n                if nxt != parent:\n                    stack.append((nxt, node, 0))\n        else:\n            # children already processed\n            total = val[node]\n            for nxt in adj[node]:\n                if nxt != parent:\n                    total += subtree_sum[nxt]\n            subtree_sum[node] = total\n\n    out = ' '.join(str(subtree_sum[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n × m grid of integers, find the maximum sum of a path from the top-left corner to the bottom-right corner, moving only right or down at each step.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain m integers (−10^4 ≤ grid[i][j] ≤ 10^4) separated by spaces.\n\nOutput Format:\n- Output a single integer: the maximum path sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, m = data[0], data[1]\n    vals = data[2:]\n    # We keep only the current row of DP\n    dp = [0] * m\n    idx = 0  # index while reading vals\n    \n    # Fill first cell\n    dp[0] = vals[0]\n    idx += 1\n    \n    # First row (can only come from the left)\n    for j in range(1, m):\n        dp[j] = dp[j - 1] + vals[idx]\n        idx += 1\n    \n    # Remaining rows\n    for i in range(1, n):\n        # Update first column of current row (can only come from above)\n        dp[0] += vals[idx]\n        idx += 1\n        \n        # Update the rest of the row\n        for j in range(1, m):\n            # Max of coming from left (dp[j-1]) or from above (dp[j])\n            dp[j] = max(dp[j], dp[j - 1]) + vals[idx]\n            idx += 1\n    \n    # The last cell contains the answer\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n distinct integers, determine if there exists a pair of elements whose sum is exactly k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, −10^9 ≤ k ≤ 10^9).\nThe second line contains n distinct integers a_1, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    seen = set()\n    for _ in range(n):\n        x = int(next(it))\n        if (k - x) in seen:\n            sys.stdout.write(\"YES\")\n            return\n        seen.add(x)\n    sys.stdout.write(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Count the number of pairs (i, j) such that 1 ≤ i < j ≤ N and gcd(i, j) = 1.\n\nInput:\nA single integer N (2 ≤ N ≤ 10^5).\n\nOutput:\nPrint a single integer: the number of coprime pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef totients_up_to(n: int) -> list:\n    \"\"\"\n    Returns a list `phi` where phi[k] == φ(k) for 0 <= k <= n\n    \"\"\"\n    phi = list(range(n + 1))          # start with φ(k) = k\n    for p in range(2, n + 1):\n        if phi[p] == p:               # p is prime\n            for multiple in range(p, n + 1, p):\n                phi[multiple] -= phi[multiple] // p\n    return phi\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    N = int(data)\n    phi = totients_up_to(N)\n    # answer = Σ_{j=2..N} φ(j)\n    result = sum(phi[2:])             # skip φ(0) and φ(1)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, select exactly k elements such that their sum is the maximum possible.\n\nInput:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer, the maximum sum achievable by selecting k elements.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:2 + n]\n\n    # Take the k largest elements\n    arr.sort(reverse=True)\n    max_sum = sum(arr[:k])\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums and an integer target, find the number of pairs (i, j) such that i < j and nums[i] + nums[j] == target.\n\nInput Format:\n- The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9).\n- The second line contains n integers nums[i] (−10^9 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:       # no input\n        return\n\n    n = int(data[0])\n    target = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    freq = defaultdict(int)   # counts of numbers already seen\n    pairs = 0\n\n    for x in nums:\n        complement = target - x\n        pairs += freq.get(complement, 0)  # all earlier indices with needed value\n        freq[x] += 1                      # mark current value as seen\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of n integers. Find the smallest positive integer that does not appear in the sequence.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^6).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput:\nOutput the smallest positive integer not present in the sequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])             # first token is n\n    vals = map(int, data[1:])    # remaining tokens are the sequence values\n    \n    MAX_A = 10**6                # given upper bound for sequence values\n    size = MAX_A + 2             # +2 guarantees space for answer MAX_A + 1\n    \n    present = bytearray(size)    # bytearray is memory–efficient for booleans\n    \n    # Mark the presence of each number (ignore out-of-range, though none expected)\n    for x in vals:\n        if 0 < x <= MAX_A:       # safety check\n            present[x] = 1\n    \n    # Find the smallest positive integer not present\n    for candidate in range(1, size):\n        if not present[candidate]:\n            print(candidate)\n            return\n\n# call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- A single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns length of the longest substring without repeating characters.\n    Uses sliding window with a dictionary that stores last seen indices.\n    \"\"\"\n    last_seen = {}\n    left = 0          # left boundary of the current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # character repeated inside the current window, move left bound\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring that contains no repeating characters.\n\nInput Format:\n- The first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}           # Stores most recent index of each character\n    left = 0                # Left boundary of current window\n    best = 0                # Best (max) window length found\n\n    for right, ch in enumerate(s):\n        # If 'ch' seen before AND its last position is within current window\n        if ch in last_pos and last_pos[ch] >= left:\n            # Move left boundary past the previous occurrence\n            left = last_pos[ch] + 1\n\n        # Update (or add) this character's latest index\n        last_pos[ch] = right\n        # Update best length\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of distinct elements whose sum is equal to a given target value.\n\nInput Format:\n- The first line contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 2⋅10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output \"YES\" if such a pair exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, x = data[0], data[1]\n    nums = data[2:]\n    \n    seen = set()\n    for num in nums:\n        if x - num in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, where each edge has a weight, find the length of the longest path in the tree (the diameter).\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- The next N-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Print a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns (node, distance) that is farthest from `start`\n    in the tree represented by adjacency list `adj`\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]          # iterative DFS to avoid recursion limits\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                stack.append(v)\n    # find farthest\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # First DFS/BFS from arbitrary node (1) to find farthest node A\n    a, _ = farthest_node(1, adj, n)\n    \n    # Second DFS/BFS from node A to find the diameter length\n    _, diameter = farthest_node(a, adj, n)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x n grid of lowercase letters, find the number of distinct words of length k that can be formed by moving only right or down from the top-left cell. A word is a sequence of letters collected along a path.\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 8, 1 ≤ k ≤ 2n−1).\n- The next n lines each contain a string of n lowercase letters.\nOutput Format:\n- Output a single integer: the number of distinct words of length k that can be formed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nsys.setrecursionlimit(10000)\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    grid = data[2:2 + n]\n\n    # Special-case: k == 1 → only the top-left letter\n    if k == 1:\n        print(1)\n        return\n\n    target_len = k\n    words = set()\n\n    def dfs(r: int, c: int, depth: int, buf: list):\n        \"\"\"\n        r, c  : current coordinates\n        depth : current word length (== len(buf))\n        buf   : list of collected characters\n        \"\"\"\n        if depth == target_len:\n            words.add(''.join(buf))\n            return\n\n        # Move Down\n        if r + 1 < n:\n            buf.append(grid[r + 1][c])\n            dfs(r + 1, c, depth + 1, buf)\n            buf.pop()\n\n        # Move Right\n        if c + 1 < n:\n            buf.append(grid[r][c + 1])\n            dfs(r, c + 1, depth + 1, buf)\n            buf.pop()\n\n    # start from (0,0)\n    dfs(0, 0, 1, [grid[0][0]])\n    print(len(words))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (nodes numbered 1 through n), and n-1 edges, find the diameter of the tree (the length of the longest path between any two nodes).\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\nOutput Format:\n- A single integer: the diameter of the tree.\nConstraints:\n- 2 ≤ n ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"\n    Breadth–first search returning the farthest node from `start`\n    and its distance.\n    \"\"\"\n    n = len(adj) - 1            # adjacency list is 1-indexed\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n\n    return far_node, dist[far_node]\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1])\n        idx += 2\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS: from an arbitrary node (1) to find the farthest node `a`\n    a, _ = bfs(1, adj)\n\n    # Second BFS: from `a` to find the farthest node from it and the distance\n    _, diameter = bfs(a, adj)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (-10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start new from current element\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    # Convert the next n tokens to integers\n    arr = list(map(int, data[1:1 + n]))\n    \n    # Guard against malformed input\n    if len(arr) != n:\n        arr = arr[:n]\n    \n    result = max_subarray_sum(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed graph with n vertices and m edges. Each edge has a weight. Find the length of the shortest path from vertex 1 to vertex n. If no path exists, print -1.\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9), denoting an edge from u to v with weight w.\nOutput Format:\n- A single integer: the length of the shortest path from 1 to n, or -1 if not reachable.\nConstraints:\n- 2 ≤ n ≤ 10^5\n- 0 ≤ m ≤ 2×10^5\n- 1 ≤ w ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nINF = 10**20  # sufficiently large\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]  # 1-based indexing\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))        # directed edge\n\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    heap = [(0, 1)]                 # (distance, vertex)\n\n    while heap:\n        d, u = heapq.heappop(heap)\n        if d != dist[u]:            # stale entry\n            continue\n        if u == n:                  # early exit if desired\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(heap, (nd, v))\n\n    result = dist[n]\n    print(-1 if result == INF else result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has a positive integer weight, find the length of the longest simple path in the tree.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the length of the longest simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`\n    in a weighted tree represented by adjacency list `adj`.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                stack.append(v)\n\n    # locate farthest\n    far_node = 1\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            far_node = i\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First DFS/BFS to find one endpoint of the diameter\n    u, _ = farthest(1, adj, n)\n    # Second DFS/BFS from that endpoint to get the diameter length\n    _, diameter = farthest(u, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a pair of distinct indices i and j such that a_i + a_j = K.\n\nInput:\nThe first line contains two integers N and K (2 ≤ N ≤ 10^5, −10^9 ≤ K ≤ 10^9).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in nums:\n        target = k - x\n        if target in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers. Determine the maximum sum of any contiguous subarray.\n\nInput Format:\n- The first line contains an integer N.\n- The second line contains N integers.\n\nOutput Format:\n- Print a single integer: the maximum sum.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- -10^4 ≤ array elements ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm.\n    Returns the maximum possible sum of a contiguous subarray.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = max(x, cur + x)\n        best = max(best, cur)\n    return best\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))  # safe even if numbers span multiple lines\n    print(max_subarray_sum(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers and an integer k, find the length of the longest subarray such that the sum of its elements is at most k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the length of the longest subarray with sum at most k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    arr = data[2:]\n    left = 0\n    current_sum = 0\n    best = 0\n\n    for right in range(n):\n        current_sum += arr[right]\n        while current_sum > k and left <= right:\n            current_sum -= arr[left]\n            left += 1\n        # after the while-loop current_sum <= k\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), each edge has a weight. Find the diameter of the tree, defined as the length of the longest path between any two nodes.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u,v ≤ n, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n\nOutput Format:\n- Print a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    input = sys.stdin.readline\n\n    n = int(input())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v, w = map(int, input().split())\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # returns (farthest_node, distance_to_it) starting from `start`\n    def farthest(start: int):\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        stack = [start]\n        far_node = start\n        max_dist = 0\n\n        while stack:\n            node = stack.pop()\n            for nei, w in adj[node]:\n                if dist[nei] == -1:\n                    dist[nei] = dist[node] + w\n                    stack.append(nei)\n                    if dist[nei] > max_dist:\n                        max_dist = dist[nei]\n                        far_node = nei\n        return far_node, max_dist\n\n    # First DFS/BFS to find one end of the diameter\n    end1, _ = farthest(1)\n    # Second DFS/BFS from that end to get the diameter length\n    _, diameter = farthest(end1)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value. Find the maximum sum of values along any path from the root to a leaf.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (−10^4 ≤ v_i ≤ 10^4), the values of the nodes.\nEach of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v.\n\nOutput:\nPrint a single integer, the maximum sum from the root to any leaf.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]  # 1-based indexing\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Iterative DFS: (node, parent, accumulated_sum)\n    stack = [(1, 0, values[1])]\n    max_sum = -10**18  # smaller than possible minimum\n\n    while stack:\n        node, parent, acc = stack.pop()\n\n        # Check if current node is a leaf\n        is_leaf = (node != 1 and len(adj[node]) == 1) or (node == 1 and len(adj[node]) == 0)\n        if is_leaf:\n            if acc > max_sum:\n                max_sum = acc\n            continue\n\n        for nei in adj[node]:\n            if nei == parent:\n                continue\n            stack.append((nei, node, acc + values[nei]))\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine the number of connected components in the graph.\n\nInput Format:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between u and v.\n\nOutput Format:\nPrint a single integer, the number of connected components in the graph.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    # Read all data at once for speed\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n\n    n = int(next(it))          # number of nodes\n    m = int(next(it))          # number of edges\n\n    # Build adjacency list\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u = int(next(it)) - 1  # convert to 0-based index\n        v = int(next(it)) - 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * n\n    components = 0\n\n    # Iterative DFS (stack) to avoid recursion-depth issues\n    for start in range(n):\n        if not visited[start]:\n            components += 1\n            stack = [start]\n            visited[start] = True\n            while stack:\n                node = stack.pop()\n                for nei in adj[node]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        stack.append(nei)\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M consisting of only '.' (empty) and '#' (wall), determine the number of distinct connected components of empty cells. Two empty cells are in the same component if they are adjacent vertically or horizontally.\n\nInput:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 1000).\nThe next N lines each contain a string of M characters (either '.' or '#').\n\nOutput:\nPrint a single integer: the number of connected components of empty cells.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:1 + n]\n\n    visited = [[False] * m for _ in range(n)]\n    components = 0\n    # Directions: up, down, left, right\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '.' and not visited[i][j]:\n                components += 1\n                # BFS to mark the entire component\n                dq = deque([(i, j)])\n                visited[i][j] = True\n                while dq:\n                    x, y = dq.popleft()\n                    for dx, dy in dirs:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            if grid[nx][ny] == '.' and not visited[nx][ny]:\n                                visited[nx][ny] = True\n                                dq.append((nx, ny))\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\nInput: The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\nOutput: Output a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"\n    Kadane's algorithm to find the maximum sum of a contiguous subarray.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, partition it into two subsets such that the absolute difference of their sums is minimized. Output the minimum possible difference.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 100).\nThe second line contains N positive integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6).\n\nOutput:\nOutput a single integer: the minimum possible absolute difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    total = sum(nums)\n    \n    # bitset[i] == 1  <=>  some subset has sum i\n    bitset = 1  # only sum 0 is achievable at start\n    for x in nums:\n        bitset |= bitset << x\n    \n    half = total // 2\n    # keep only bits 0..half\n    mask = (1 << (half + 1)) - 1\n    feasible = bitset & mask\n    \n    # highest set bit ≤ half\n    best = feasible.bit_length() - 1\n    answer = total - 2 * best\n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest increasing subsequence.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\nPrint a single integer, the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef lis_length(arr):\n    \"\"\"Returns length of longest strictly increasing subsequence.\"\"\"\n    tails = []                       # tails[i] = smallest tail of all LIS with length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)  # first tail >= x\n        if idx == len(tails):\n            tails.append(x)          # start new longer subsequence\n        else:\n            tails[idx] = x           # replace to keep tail minimal\n    return len(tails)\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))   # ensures we read exactly n numbers\n    print(lis_length(arr))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n positive integers, determine whether it is possible to partition the list into two subsets such that the sum of elements in both subsets is equal.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000).\n\nOutput Format:\n- Output \"YES\" if such a partition exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total is odd, equal partition impossible\n    if total & 1:\n        return False\n    target = total // 2\n\n    # Boolean DP where dp[s] tells whether a subset sums to s\n    dp = [False] * (target + 1)\n    dp[0] = True  # Empty subset\n\n    for num in nums:\n        # Iterate backwards to avoid double-using the same element\n        for s in range(target, num - 1, -1):\n            if dp[s - num]:\n                dp[s] = True\n        # Early exit if we already can form target\n        if dp[target]:\n            return True\n    return dp[target]\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n\n    print(\"YES\" if can_partition(nums) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each edge having a weight, find the maximum sum of weights along any path in the tree.\n\nInput Format:\n- The first line contains a single integer n (2 ≤ n ≤ 10^5).\n- Each of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) representing an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the maximum sum of weights along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # Helper that returns (farthest_node, distance_to_it) from 'start'\n    def farthest(start: int):\n        stack = [(start, -1, 0)]          # (node, parent, distance_from_start)\n        far_node, far_dist = start, 0\n\n        while stack:\n            u, parent, dist = stack.pop()\n            if dist > far_dist:\n                far_node, far_dist = u, dist\n            for v, w in adj[u]:\n                if v != parent:\n                    stack.append((v, u, dist + w))\n\n        return far_node, far_dist\n\n    # First DFS/BFS to get one endpoint of the diameter\n    endpoint, _ = farthest(1)\n    # Second run to get the actual diameter length\n    _, diameter = farthest(endpoint)\n\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, find the minimum number of roads that must be removed so that there are no cycles in the network (i.e., the network becomes a forest).\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 2×10^5, 0 ≤ m ≤ 2×10^5).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a road between cities u and v.\n\nOutput Format:\n- Output a single integer: the minimum number of roads to remove.\n\nConstraints:\n- The graph may be disconnected.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\nclass DSU:\n    __slots__ = (\"parent\", \"rank\", \"count\")\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.rank   = [0] * n\n        self.count  = n          # number of connected components\n\n    def find(self, x: int) -> int:\n        # iterative path-compression\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> None:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        if self.rank[ra] < self.rank[rb]:\n            self.parent[ra] = rb\n        elif self.rank[ra] > self.rank[rb]:\n            self.parent[rb] = ra\n        else:\n            self.parent[rb] = ra\n            self.rank[ra] += 1\n        self.count -= 1          # merged two components\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    \n    dsu = DSU(n)\n    \n    for _ in range(m):\n        u = int(next(it)) - 1   # convert to 0-based\n        v = int(next(it)) - 1\n        dsu.union(u, v)\n    \n    # A forest with 'c' components on 'n' vertices contains exactly n - c edges.\n    # Any extra edges form cycles and must be removed.\n    answer = m - n + dsu.count\n    if answer < 0:\n        answer = 0  # should not happen, but keep safe\n    \n    print(answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the smallest positive integer that does not appear in the array.\n\nInput Format:\n- The first line contains an integer N.\n- The second line contains N integers.\n\nOutput Format:\n- Print a single integer: the smallest missing positive integer.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- -10^6 ≤ array elements ≤ 10^6\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_missing_positive(arr):\n    \"\"\"\n    Returns the smallest positive integer that does not appear in `arr`.\n    \"\"\"\n    present = set(arr)                # O(N) memory, but within limits\n    candidate = 1\n    while candidate in present:       # At most N+1 iterations\n        candidate += 1\n    return candidate\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))   # ensure exactly N numbers are read\n    print(smallest_missing_positive(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if it is possible to rearrange the characters of S to form a palindrome.\n\nInput Format:\n- A single line containing the string S.\n\nOutput Format:\n- Print \"YES\" if it is possible to rearrange S into a palindrome, otherwise print \"NO\".\n\nConstraints:\n- 1 ≤ |S| ≤ 10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of the string `s`\n    can be arranged into a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_cnt = sum(1 for c in freq.values() if c % 2)\n    return odd_cnt <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, and each edge has a weight. Process q queries of the form: What is the sum of edge weights on the path between nodes u and v?\n\nInput:\nThe first line contains two integers n and q (2 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5).\nNext n-1 lines contain three integers a, b, w (1 ≤ a, b ≤ n, 1 ≤ w ≤ 10^6), meaning there is an edge between nodes a and b with weight w.\nNext q lines each contain two integers u and v (1 ≤ u, v ≤ n).\n\nOutput:\nFor each query, print the sum of edge weights on the path between u and v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef build_lca(n, adj, root=1):\n    LOG = (n).bit_length()\n    parent = [[0]*(n+1) for _ in range(LOG)]\n    depth = [0]*(n+1)\n    dist  = [0]*(n+1)\n\n    # BFS to fill parent[0], depth, dist\n    dq = deque([root])\n    visited = [False]*(n+1)\n    visited[root] = True\n    while dq:\n        v = dq.popleft()\n        for to, w in adj[v]:\n            if not visited[to]:\n                visited[to] = True\n                parent[0][to] = v\n                depth[to] = depth[v] + 1\n                dist[to] = dist[v] + w\n                dq.append(to)\n\n    # binary lifting table\n    for k in range(1, LOG):\n        row_prev = parent[k-1]\n        row_cur  = parent[k]\n        for v in range(1, n+1):\n            mid = row_prev[v]\n            row_cur[v] = row_prev[mid]\n\n    return parent, depth, dist, LOG\n\ndef lca(u, v, parent, depth, LOG):\n    if depth[u] < depth[v]:\n        u, v = v, u\n    # lift u up\n    diff = depth[u] - depth[v]\n    for k in range(LOG):\n        if diff & (1 << k):\n            u = parent[k][u]\n    if u == v:\n        return u\n    for k in reversed(range(LOG)):\n        if parent[k][u] != parent[k][v]:\n            u = parent[k][u]\n            v = parent[k][v]\n    return parent[0][u]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    n = int(data[0])\n    q = int(data[1])\n    idx = 2\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a = int(data[idx]); b = int(data[idx+1]); w = int(data[idx+2])\n        idx += 3\n        adj[a].append((b, w))\n        adj[b].append((a, w))\n    parent, depth, dist, LOG = build_lca(n, adj, 1)\n\n    out_lines = []\n    for _ in range(q):\n        u = int(data[idx]); v = int(data[idx+1])\n        idx += 2\n        p = lca(u, v, parent, depth, LOG)\n        path_sum = dist[u] + dist[v] - 2*dist[p]\n        out_lines.append(str(path_sum))\n    sys.stdout.write('\\n'.join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Standard Kadane’s algorithm.\n    Returns the maximum sum of a contiguous sub-array.\n    \"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = x if cur + x < x else cur + x     # cur = max(x, cur+x)\n        best = best if best > cur else cur      # best = max(best, cur)\n    return best\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, *nums = data\n    # In case the input line may contain more/less numbers, truncate/pad\n    nums = nums[:n]\n    if n == 0:\n        print(0)\n        return\n    print(kadane_max_subarray(nums))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest subarray with a sum equal to zero.\n\nInput Format:\n- The first line contains an integer N, the size of the array.\n- The second line contains N integers, the elements of the array.\n\nOutput Format:\n- Print a single integer: the length of the longest subarray with sum zero.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- -10^9 ≤ array elements ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_zero_sum_subarray(arr):\n    prefix_index = {0: -1}  # prefix_sum -> first index encountered\n    prefix_sum = 0\n    max_len = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        if prefix_sum in prefix_index:\n            # Subarray (prefix_index[prefix_sum] + 1 .. i) sums to 0\n            max_len = max(max_len, i - prefix_index[prefix_sum])\n        else:\n            prefix_index[prefix_sum] = i  # store first occurrence\n\n    return max_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    print(longest_zero_sum_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of a contiguous subarray. If all numbers are negative, return the largest number.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    # Kadane's algorithm\n    max_ending_here = max_so_far = nums[0]\n    for num in nums[1:]:\n        max_ending_here = max(num, max_ending_here + num)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given n intervals on a number line. Find the maximum number of intervals that overlap at any point.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2 × 10^5).\nEach of the next n lines contains two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9) representing the interval [l_i, r_i].\n\nOutput:\nPrint a single integer: the maximum number of overlapping intervals at any point.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    \n    events = defaultdict(int)               # coordinate -> net change there\n    idx = 1\n    for _ in range(n):\n        l = int(data[idx]); r = int(data[idx + 1]); idx += 2\n        events[l] += 1                      # interval starts (inclusive)\n        events[r + 1] -= 1                  # interval ends right after r\n                                            # (+1 because intervals are inclusive)\n    \n    current = ans = 0\n    # sort by coordinate\n    for coord in sorted(events):\n        current += events[coord]\n        if current > ans:\n            ans = current\n    \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the number of unordered pairs (i, j) such that 1 ≤ i < j ≤ N and the greatest common divisor (GCD) of A_i and A_j is equal to 1.\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^4).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^6).\n\nOutput:\nPrint a single integer: the number of unordered coprime pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef build_mobius(limit: int):\n    \"\"\"\n    Linear sieve that returns the Möbius function mu[0..limit]\n    \"\"\"\n    mu = [0] * (limit + 1)\n    mu[1] = 1\n    primes = []\n    is_composite = [False] * (limit + 1)\n\n    for i in range(2, limit + 1):\n        if not is_composite[i]:\n            primes.append(i)\n            mu[i] = -1           # i is prime -> mu = -1\n        for p in primes:\n            ip = i * p\n            if ip > limit:\n                break\n            is_composite[ip] = True\n            if i % p == 0:       # p^2 divides ip  ->  mu = 0\n                mu[ip] = 0\n                break\n            else:                # otherwise mu flips sign\n                mu[ip] = -mu[i]\n    return mu\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:]\n\n    max_val = max(arr)\n\n    # frequency array\n    freq = [0] * (max_val + 1)\n    for v in arr:\n        freq[v] += 1\n\n    # count of numbers divisible by d\n    cnt_div = [0] * (max_val + 1)\n    for d in range(1, max_val + 1):\n        s = 0\n        for multiple in range(d, max_val + 1, d):\n            s += freq[multiple]\n        cnt_div[d] = s\n\n    # Möbius function\n    mu = build_mobius(max_val)\n\n    # inclusion–exclusion: answer = Σ mu[d] * C(cnt_div[d], 2)\n    res = 0\n    for d in range(1, max_val + 1):\n        c = cnt_div[d]\n        if c >= 2 and mu[d]:\n            res += mu[d] * (c * (c - 1) // 2)\n\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes rooted at node 1. Each node has a value. For every node, compute the sum of values in its subtree.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- The second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^4).\n- Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge.\n\nOutput Format:\n- Output n integers: the subtree sum for each node from 1 to n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    vals = [0] * (n + 1)                 # 1-indexed\n    for i in range(1, n + 1):\n        vals[i] = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)\n\n    # Iterative post-order DFS using an explicit stack\n    stack = [(1, 0, False)]              # (node, parent, processed_flag)\n    while stack:\n        node, parent, done = stack.pop()\n        if not done:\n            stack.append((node, parent, True))   # process after children\n            for nei in adj[node]:\n                if nei != parent:\n                    stack.append((nei, node, False))\n        else:\n            total = vals[node]\n            for nei in adj[node]:\n                if nei != parent:\n                    total += subtree_sum[nei]\n            subtree_sum[node] = total\n\n    # Prepare output\n    out = ' '.join(str(subtree_sum[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine the number of connected components in the graph.\n\nInput Format:\n- The first line contains two integers N and M.\n- The next M lines each contain two integers u and v, denoting an edge between nodes u and v (1-indexed).\n\nOutput Format:\n- Print a single integer: the number of connected components.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- 0 ≤ M ≤ 2×10^5\n- 1 ≤ u, v ≤ N\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * (n + 1)\n    components = 0\n\n    for node in range(1, n + 1):\n        if not visited[node]:\n            components += 1\n            # BFS to mark this component\n            q = deque([node])\n            visited[node] = True\n            while q:\n                cur = q.popleft()\n                for nei in adj[cur]:\n                    if not visited[nei]:\n                        visited[nei] = True\n                        q.append(nei)\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes. Each edge has a weight. Find the length of the longest path in the tree (the tree's diameter).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n−1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\nPrint a single integer, the length of the longest path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start: int, adj: list) -> tuple[int, int]:\n    \"\"\"\n    Returns (node, distance) of the farthest vertex from `start`\n    using an iterative DFS (stack) to avoid recursion limits.\n    \"\"\"\n    n = len(adj)\n    visited = [False] * n\n    dist = [0] * n\n\n    stack = [start]\n    visited[start] = True\n    far_node = start\n\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if not visited[v]:\n                visited[v] = True\n                dist[v] = dist[u] + w\n                stack.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: 1-based indexing, so size n+1\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # First DFS/BFS to get one endpoint of the diameter\n    node_a, _ = farthest(1, adj)\n    # Second DFS/BFS from node_a to get diameter length\n    node_b, diameter = farthest(node_a, adj)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"Return the length of the longest substring of `s` without repeating characters.\"\"\"\n    last_pos = {}          # Tracks last index where each character appeared\n    left = 0               # Left boundary of current window\n    best = 0               # Best (max) length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Character seen in current window; shrink window from the left\n            left = last_pos[ch] + 1\n        # Update last seen position of current character\n        last_pos[ch] = right\n        # Update maximum length\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring in which every character appears at least k times.\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\nThe second line contains the integer k (1 ≤ k ≤ |s|).\nOutput:\nPrint a single integer, the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_substring_with_k_repeats(s: str, k: int) -> int:\n    if k <= 1:                 # every substring is valid\n        return len(s)\n    n = len(s)\n    if k > n:                  # impossible by constraints, but safe guard\n        return 0\n\n    ans = 0\n    for target_unique in range(1, 27):   # number of distinct letters in window\n        counts = [0] * 26\n        left = 0\n        right = 0\n        distinct = 0           # distinct letters in current window\n        at_least_k = 0         # letters that already appear >= k times\n\n        while right < n:\n            # expand window to the right\n            idx = ord(s[right]) - 97\n            if counts[idx] == 0:\n                distinct += 1\n            counts[idx] += 1\n            if counts[idx] == k:\n                at_least_k += 1\n            right += 1\n\n            # shrink window if too many distinct chars\n            while distinct > target_unique:\n                idx_left = ord(s[left]) - 97\n                if counts[idx_left] == k:\n                    at_least_k -= 1\n                counts[idx_left] -= 1\n                if counts[idx_left] == 0:\n                    distinct -= 1\n                left += 1\n\n            # update answer when current window is valid\n            if distinct == target_unique and distinct == at_least_k:\n                ans = max(ans, right - left)\n\n    return ans\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    s = data[0].strip()\n    k = int(data[1].strip())\n    result = longest_substring_with_k_repeats(s, k)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the length of the smallest contiguous subarray with a sum at least k. If there is no such subarray, output -1.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_i (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer — the length of the smallest subarray with sum at least k, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    a = list(map(int, data[2:2 + n]))\n\n    start = 0\n    current_sum = 0\n    min_len = n + 1  # sentinel larger than any possible answer\n\n    for end in range(n):\n        current_sum += a[end]\n\n        # While current window meets or exceeds k, try to shrink it\n        while current_sum >= k:\n            min_len = min(min_len, end - start + 1)\n            current_sum -= a[start]\n            start += 1\n\n    print(min_len if min_len <= n else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes, rooted at node 1, and each edge has a weight, compute the maximum sum of weights on any simple path in the tree.\n\nInput:\nThe first line contains a single integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6), meaning there is an edge between u and v with weight w.\n\nOutput:\nOutput a single integer, the maximum sum among all simple paths in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300_000)\n\n\ndef farthest(start: int, adj: list[list[tuple[int, int]]], n: int) -> tuple[int, int]:\n    \"\"\"\n    Returns (node, distance) of the vertex farthest from `start`\n    in the weighted tree described by `adj`.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        node = stack.pop()\n        current = dist[node]\n        for nxt, w in adj[node]:\n            if dist[nxt] == -1:\n                dist[nxt] = current + w\n                stack.append(nxt)\n\n    # locate the farthest vertex and its distance\n    far_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            far_node = i\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First pass: farthest from an arbitrary node (1)\n    u, _ = farthest(1, adj, n)\n    # Second pass: farthest from `u` gives the diameter\n    _, diameter = farthest(u, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a non-empty subset of the array whose sum is divisible by a given integer K.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 100, 1 ≤ K ≤ 1000).\nThe second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4).\n\nOutput Format:\nPrint \"YES\" if such a subset exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    nums = [int(next(it)) for _ in range(N)]\n\n    # dp[r] is True if there exists a non-empty subset whose sum ≡ r (mod K)\n    dp = [False] * K\n\n    for num in nums:\n        mod = num % K\n        if mod == 0:          # single element already divisible by K\n            print(\"YES\")\n            return\n\n        # Prepare updates based on current dp\n        new_dp = dp[:]        # copy current states\n        for r in range(K):\n            if dp[r]:\n                new_dp[(r + mod) % K] = True\n\n        new_dp[mod] = True    # subset consisting of only this element\n        dp = new_dp\n\n        if dp[0]:             # found a non-empty subset with sum divisible by K\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine if S can be rearranged to form a palindrome. Output \"YES\" if possible, otherwise \"NO\".\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\n- Output \"YES\" or \"NO\" (without quotes).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"Return True if any permutation of s can be a palindrome.\"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for c in freq.values() if c % 2)\n    # A string can form a palindrome if at most one character has an odd count\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string consisting of lowercase English letters, determine the length of the longest substring that contains at most two distinct characters.\nInput: The first line contains a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters.\nOutput: Output a single integer: the length of the longest substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    left = 0\n    freq = defaultdict(int)\n    best = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # Shrink window until we have at most 2 distinct characters\n        while len(freq) > 2:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                del freq[left_ch]\n            left += 1\n\n        # Update best length found so far\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_substring_two_distinct(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven N cities connected by M bidirectional roads, each with a positive length, find the length of the shortest path from city 1 to city N. If no such path exists, output -1.\n\nInput:\nThe first line contains two integers N and M (2 ≤ N ≤ 10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains three integers u, v, w (1 ≤ u, v ≤ N, u ≠ v, 1 ≤ w ≤ 10^9) representing a road between u and v of length w.\n\nOutput:\nOutput a single integer — the length of the shortest path from city 1 to city N, or -1 if no such path exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)          # number of cities\n    m = next(it)          # number of roads\n\n    adj = [[] for _ in range(n + 1)]  # 1-based indexing\n    for _ in range(m):\n        u = next(it)\n        v = next(it)\n        w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    INF = 10**20\n    dist = [INF] * (n + 1)\n    dist[1] = 0\n    pq = [(0, 1)]                       # (current_distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:                # outdated entry\n            continue\n        if u == n:                      # already reached destination\n            break\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n\n    print(dist[n] if dist[n] != INF else -1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m consisting only of '.' (empty) and '#' (blocked) cells, compute the number of distinct paths from the top-left corner to the bottom-right corner, moving only right or down and never stepping on a blocked cell.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains a string of length m with characters '.' or '#'.\n\nOutput Format:\n- Output a single integer: the number of possible paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    dp = [0] * m             # dp[j] holds number of ways to reach current row, column j\n    line_idx = 1             # index in data for current grid row\n\n    for i in range(n):\n        row = data[line_idx].decode().rstrip()\n        line_idx += 1\n\n        left = 0             # number of ways from the left cell in the current row\n        for j, cell in enumerate(row):\n            if cell == '#':\n                dp[j] = 0\n            else:\n                if i == 0 and j == 0:\n                    dp[j] = 1\n                else:\n                    dp[j] = (dp[j] + left) % MOD\n            left = dp[j]     # update left for the next column\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Find the number of pairs of positive integers (a, b) such that 1 ≤ a < b ≤ N and a + b is divisible by 3.\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\n\nOutput Format:\nOutput a single integer, the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    N = int(data)\n\n    # counts of numbers in [1..N] with residue 0,1,2 modulo 3\n    c0 = N // 3\n    c1 = (N + 2) // 3   # numbers congruent to 1 mod 3\n    c2 = (N + 1) // 3   # numbers congruent to 2 mod 3\n\n    # pairs (0,0) and (1,2)\n    ans = c0 * (c0 - 1) // 2 + c1 * c2\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with n vertices and m edges, determine if there is a cycle in the graph.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 × 10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge from u to v.\n\nOutput:\nPrint \"YES\" if the graph contains a cycle, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(300000)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n    \n    # 0 = unvisited, 1 = in recursion stack, 2 = fully processed\n    state = [0] * (n + 1)\n    \n    def dfs(u: int) -> bool:\n        state[u] = 1               # mark as in current path\n        for v in adj[u]:\n            if state[v] == 0:      # not visited\n                if dfs(v):\n                    return True\n            elif state[v] == 1:    # back-edge found → cycle\n                return True\n        state[u] = 2               # done with u\n        return False\n    \n    for node in range(1, n + 1):\n        if state[node] == 0 and dfs(node):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the smallest positive integer that does not appear in the array.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^6 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint a single integer: the smallest positive integer not present in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    # Keep only the positive numbers since negatives and zero are irrelevant\n    positive_set = {x for x in nums if x > 0}\n\n    # The answer cannot be larger than n + 1\n    # (pigeon-hole principle: with n positives in 1..n there is always a missing one)\n    for candidate in range(1, n + 2):\n        if candidate not in positive_set:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine if it can be rearranged to form a palindrome.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s (length n).\n\nOutput:\nPrint \"YES\" if it is possible to rearrange s into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Return True if some permutation of s can be a palindrome.\n    \"\"\"\n    odd_counts = sum(1 for c in Counter(s).values() if c % 2)\n    # For a palindrome, at most one character may have an odd frequency\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:        # no input provided\n        return\n    # first line: n (can be ignored for the logic)\n    # second line: the string\n    if len(data) < 2:\n        s = ''\n    else:\n        s = data[1].strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the number of unordered pairs (i, j) with 1 ≤ i < j ≤ n such that the sum of the pair is divisible by k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 1000).\n- The second line contains n integers a_i (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of unordered pairs with sum divisible by k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return                      # no input\n    n, k = data[0], data[1]\n    arr = data[2: 2 + n]\n\n    # frequency of each remainder modulo k\n    freq = [0] * k\n    for num in arr:\n        freq[num % k] += 1\n\n    # count pairs\n    pairs = 0\n\n    # remainder 0 pairs with itself\n    pairs += freq[0] * (freq[0] - 1) // 2\n\n    # if k is even, remainder k/2 pairs with itself\n    if k % 2 == 0:\n        pairs += freq[k // 2] * (freq[k // 2] - 1) // 2\n\n    # remaining complementary remainders\n    for r in range(1, (k + 1) // 2):\n        pairs += freq[r] * freq[k - r]\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring with all distinct characters.\n\nInput:\nA single line containing the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the maximum length of a substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip()\n\n    last_pos = {}          # last seen index of each character\n    start = 0              # left boundary of current window\n    best = 0               # length of the longest valid window found\n\n    for i, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= start:\n            # character repeats inside the current window → move left boundary\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        best = max(best, i - start + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the number of ways to write n as the sum of 1s and 2s, where the order of the summands matters.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^6).\n\nOutput:\nPrint a single integer, the number of ways modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # Base cases\n    if n == 1:\n        print(1)\n        return\n    if n == 2:\n        print(2)\n        return\n\n    prev, curr = 1, 2   # f(1), f(2)\n    for _ in range(3, n + 1):\n        prev, curr = curr, (prev + curr) % MOD\n\n    print(curr)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the minimum number of operations required to make all elements equal. In one operation, you can increment or decrement any element by 1.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:]\n    if n <= 1:\n        print(0)\n        return\n\n    arr.sort()\n    median = arr[n // 2]                       # upper median for even n\n    total_ops = sum(abs(x - median) for x in arr)\n    print(total_ops)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest substring where all the characters are distinct.\n\nInput Format:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nOutput a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeating characters.\n    \"\"\"\n    last_pos = {}          # character -> most recent index\n    start = 0              # start index of the current window\n    max_len = 0\n\n    for i, ch in enumerate(s):\n        # If `ch` has appeared in the current window, move `start`\n        if ch in last_pos and last_pos[ch] >= start:\n            start = last_pos[ch] + 1\n        last_pos[ch] = i\n        # Update maximum length found so far\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring with all distinct characters.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Output a single integer: the maximum length of a substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Sliding–window algorithm to compute the length of the longest substring\n    composed of pairwise–distinct characters.\n    \"\"\"\n    last_pos = {}          # maps character -> most recent index\n    left = 0               # left boundary of current window\n    best = 0               # best window length seen so far\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # repeated character inside current window → shrink from the left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    # First line is n (we can ignore its value besides validation)\n    # Second line is the string\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else \"\"\n    # Basic safeguard (the problem guarantees len(s) == n)\n    s = s[:n]\n    print(longest_unique_substring(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if it is possible to select some elements (possibly none) such that their sum is exactly k.\nInput: The first line contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000).\nOutput: Output 'YES' if it is possible to select such a subset, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.read().strip().split()))\n    if not data:\n        return\n    n, k, *arr = data\n    # Bitset DP where bit i indicates whether sum i is achievable\n    reachable = 1  # only sum 0 is achievable at start\n    for v in arr[:n]:\n        if v > k:  # values larger than k cannot contribute to sums ≤ k\n            continue\n        reachable |= reachable << v\n        # Optional optimisation: mask off bits beyond k to keep the integer small\n        if reachable.bit_length() > k + 1:\n            reachable &= (1 << (k + 1)) - 1\n    print('YES' if (reachable >> k) & 1 else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m filled with 0s and 1s, find the number of distinct connected groups of 1s. Two 1s are connected if they are adjacent horizontally or vertically.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains m characters ('0' or '1') representing the grid.\n\nOutput Format:\n- Output a single integer: the number of connected groups of 1s.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # Read grid as list of strings\n    grid = [list(next(it).strip()) for _ in range(n)]\n\n    visited = [[False]*m for _ in range(n)]\n\n    def bfs(sr: int, sc: int) -> None:\n        \"\"\"Breadth-first search starting from (sr, sc).\"\"\"\n        q = deque()\n        q.append((sr, sc))\n        visited[sr][sc] = True\n        while q:\n            r, c = q.popleft()\n            # Four orthogonal neighbours\n            if r > 0 and not visited[r-1][c] and grid[r-1][c] == '1':\n                visited[r-1][c] = True\n                q.append((r-1, c))\n            if r+1 < n and not visited[r+1][c] and grid[r+1][c] == '1':\n                visited[r+1][c] = True\n                q.append((r+1, c))\n            if c > 0 and not visited[r][c-1] and grid[r][c-1] == '1':\n                visited[r][c-1] = True\n                q.append((r, c-1))\n            if c+1 < m and not visited[r][c+1] and grid[r][c+1] == '1':\n                visited[r][c+1] = True\n                q.append((r, c+1))\n\n    components = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1' and not visited[i][j]:\n                components += 1\n                bfs(i, j)\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each edge has a weight. Find the length of the longest simple path in the tree.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w.\n\nOutput:\nPrint a single integer — the length of the longest simple path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    adj = [[] for _ in range(n + 1)]\n\n    idx = 1\n    for _ in range(n - 1):\n        u, v, w = data[idx], data[idx + 1], data[idx + 2]\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # iterative DFS that returns the farthest node and its distance\n    def farthest(start: int):\n        stack = [(start, -1, 0)]           # (node, parent, accumulated_distance)\n        max_dist = 0\n        far_node = start\n        while stack:\n            node, parent, dist = stack.pop()\n            if dist > max_dist:\n                max_dist = dist\n                far_node = node\n            for nxt, w in adj[node]:\n                if nxt != parent:\n                    stack.append((nxt, node, dist + w))\n        return far_node, max_dist\n\n    # first DFS: from arbitrary node (1) find one endpoint of the diameter\n    endpoint, _ = farthest(1)\n    # second DFS: from that endpoint find the actual diameter length\n    _, diameter = farthest(endpoint)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine the minimum number of elements to remove so that the remaining elements are all equal.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer representing the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n    \n    # Count frequency of each element\n    freq = Counter(arr)\n    \n    # Most common frequency\n    max_freq = max(freq.values())\n    \n    # Minimum removals = total elements - maximum frequency of any element\n    print(n - max_freq)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of integers nums of length n. Return the number of pairs (i, j) where 0 ≤ i < j < n and nums[i] + nums[j] is even.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the array.\n- The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # number of pairs with even sum: choose 2 evens or 2 odds\n    result = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the index of the first occurrence of the maximum value in the array. If the maximum occurs multiple times, return the smallest index.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the index (0-based) of the first occurrence of the maximum value.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:         # No input\n        return\n\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Find first index of maximum value\n    max_val = arr[0]\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_idx = i\n\n    print(max_idx)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an n x n grid of integers. Find the minimum sum path from the top-left corner to the bottom-right corner, moving only right or down at each step.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 500).\nEach of the next n lines contains n integers (−10^4 ≤ each integer ≤ 10^4).\n\nOutput:\nPrint a single integer, the minimum sum possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                     # no input\n        return\n\n    n = int(data[0])\n    # The rest are the grid values\n    values = list(map(int, data[1:]))\n\n    # 1-D DP array: dp[j] = minimum sum to reach column j in current row\n    dp = [0] * n\n    idx = 0                          # pointer inside values list\n\n    for i in range(n):\n        for j in range(n):\n            val = values[idx]\n            idx += 1\n\n            if i == 0 and j == 0:          # starting cell\n                dp[j] = val\n            elif i == 0:                   # first row – can only come from the left\n                dp[j] = dp[j - 1] + val\n            elif j == 0:                   # first column – can only come from above\n                dp[j] = dp[j] + val\n            else:                          # choose min of top or left neighbour\n                dp[j] = min(dp[j], dp[j - 1]) + val\n\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Determine if it is possible to partition the list into two subsets with equal sum.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000).\n\nOutput Format:\n- Output 'YES' if such a partition is possible, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_partition(nums):\n    total = sum(nums)\n    # If total sum is odd, cannot split into two equal subsets\n    if total & 1:\n        return False\n    target = total // 2\n\n    # Bitset DP: bit i is 1 if subset sum i is achievable\n    bits = 1  # only sum 0 is reachable initially\n    for num in nums:\n        bits |= bits << num        # add current number to all existing sums\n        # Optional early stop: if we've already reached target\n        if bits >> target & 1:\n            return True\n    return (bits >> target) & 1 == 1\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    print('YES' if can_partition(nums) else 'NO')\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n) and n−1 edges, each between two nodes, determine if the tree is a binary tree (i.e., every node has at most two children).\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The next n−1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\n- Output \"YES\" if the tree is a binary tree, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    \n    # A tree with a single node is trivially a binary tree\n    if n == 1:\n        print(\"YES\")\n        return\n\n    deg = defaultdict(int)\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1]); idx += 2\n        deg[u] += 1\n        deg[v] += 1\n        # Early exit: if any degree exceeds 3 it can never be a binary tree\n        if deg[u] > 3 or deg[v] > 3:\n            print(\"NO\")\n            return\n\n    # After scanning all edges, if no node’s degree exceeded 3\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray with sum equal to k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest contiguous subarray whose sum is k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    arr = [int(next(it)) for _ in range(n)]\n\n    prefix_to_first_index = {0: -1}     # prefix_sum -> earliest position\n    longest = 0\n    prefix_sum = 0\n\n    for i, val in enumerate(arr):\n        prefix_sum += val\n\n        # If (prefix_sum - k) seen before, subarray (prev_index+1 .. i) sums to k\n        target = prefix_sum - k\n        if target in prefix_to_first_index:\n            length = i - prefix_to_first_index[target]\n            if length > longest:\n                longest = length\n\n        # Record earliest occurrence of this prefix sum\n        if prefix_sum not in prefix_to_first_index:\n            prefix_to_first_index[prefix_sum] = i\n\n    print(longest)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two strings a and b of equal length n. You may swap any two characters in a (any number of times). Determine whether it is possible to make string a equal to string b after any number of swaps.\nInput: The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains string a of length n. The third line contains string b of length n.\nOutput: Output 'YES' if it is possible to make a equal to b, otherwise output 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    a = data[1].strip()\n    b = data[2].strip()\n\n    # Early length check (robustness in case of incorrect input)\n    if len(a) != n or len(b) != n:\n        print(\"NO\")\n        return\n\n    # If both strings have identical character multisets,\n    # a can be rearranged (via swaps) to match b.\n    print(\"YES\" if Counter(a) == Counter(b) else \"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the maximum sum of any contiguous subarray.\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A1, A2, ..., AN (-10^4 ≤ Ai ≤ 10^4).\nOutput Format:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    \"\"\"Kadane's algorithm to find maximum sub-array sum.\"\"\"\n    best = cur = arr[0]\n    for x in arr[1:]:\n        cur = max(x, cur + x)\n        best = max(best, cur)\n    return best\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    print(max_subarray_sum(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes, where each node has a value, find the maximum sum of values you can obtain by selecting a subset of nodes such that no two selected nodes are directly connected.\n\nInput Format:\nThe first line contains a single integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers V_1, V_2, ..., V_N (−10^4 ≤ V_i ≤ 10^4), the values of each node.\nEach of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), indicating an edge between nodes u and v.\n\nOutput Format:\nPrint a single integer: the maximum possible sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n\ndef main() -> None:\n    sys.setrecursionlimit(1_000_000)\n    read = sys.stdin.readline\n\n    # ----------  read input  ----------\n    n = int(read().strip())\n    values = list(map(int, read().split()))\n    adj = [[] for _ in range(n)]\n\n    for _ in range(n - 1):\n        u, v = map(int, read().split())\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # ----------  build parent & order arrays (iterative DFS) ----------\n    parent = [-1] * n\n    order = []          # nodes in preorder\n    stack = [0]\n    parent[0] = 0       # mark root\n\n    while stack:\n        node = stack.pop()\n        order.append(node)\n        for nei in adj[node]:\n            if nei == parent[node]:\n                continue\n            parent[nei] = node\n            stack.append(nei)\n\n    # ----------  DP: include / exclude ----------\n    include = [0] * n   # best sum if we take this node\n    exclude = [0] * n   # best sum if we do NOT take this node\n\n    for node in reversed(order):          # process bottom-up\n        inc = values[node]\n        exc = 0\n        for nei in adj[node]:\n            if nei == parent[node]:\n                continue\n            inc += exclude[nei]                       # children must be excluded\n            exc += max(include[nei], exclude[nei])    # child free to choose\n        include[node] = inc\n        exclude[node] = exc\n\n    ans = max(include[0], exclude[0], 0)  # empty set is allowed\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Output the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    current_max = global_max = nums[0]\n    for x in nums[1:]:\n        current_max = max(x, current_max + x)\n        global_max = max(global_max, current_max)\n\n    print(global_max)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n cities connected by m bidirectional roads, each with a length, find the number of distinct shortest paths from city 1 to city n modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), denoting a road between cities u and v with length w.\n\nOutput:\nPrint a single integer: the number of distinct shortest paths from city 1 to city n modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys, heapq\n\nMOD = 10 ** 9 + 7\nINF = 1 << 63  # large enough for sum of weights (≤ 10^5 * 10^9)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    dist = [INF] * (n + 1)\n    ways = [0] * (n + 1)\n    dist[1] = 0\n    ways[1] = 1\n\n    pq = [(0, 1)]  # (distance, node)\n\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue  # outdated entry\n        for v, w in adj[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                ways[v] = ways[u]\n                heapq.heappush(pq, (nd, v))\n            elif nd == dist[v]:\n                ways[v] += ways[u]\n                if ways[v] >= MOD:\n                    ways[v] -= MOD\n\n    print(ways[n] % MOD if dist[n] != INF else 0)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\nPrint a single integer: the maximum subarray sum.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = x if max_ending_here < 0 else max_ending_here + x\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    print(max_so_far)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Determine the minimum number of operations required to reduce n to 1, where in each operation you can either subtract 1 or divide n by 2 if n is even.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^6).\n\nOutput:\nPrint a single integer — the minimum number of operations required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_operations_to_one(n: int) -> int:\n    \"\"\"\n    Returns the minimum number of operations to reduce n to 1.\n    Allowed operations:\n        1. subtract 1\n        2. divide by 2 (only if n is even)\n    \"\"\"\n    if n == 1:\n        return 0\n\n    # dp[i] will hold the minimum operations needed to reach 1 from i\n    dp = [0] * (n + 1)\n    dp[1] = 0  # base case\n\n    for i in range(2, n + 1):\n        # Always can come from i-1\n        best = dp[i - 1] + 1\n\n        # If divisible by 2, consider i -> i // 2\n        if i % 2 == 0:\n            best = min(best, dp[i // 2] + 1)\n\n        dp[i] = best\n\n    return dp[n]\n\ndef main() -> None:\n    data = sys.stdin.read().strip()\n    if not data:\n        return\n    n = int(data)\n    print(min_operations_to_one(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes (numbered 1 to n). Each edge has a weight. Find the length of the longest path in the tree (the diameter).\nInput: The first line contains an integer n (2 ≤ n ≤ 10^5). Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between u and v with weight w.\nOutput: Output a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"Returns (node, distance) farthest from `start` in the tree.\"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        u = q.popleft()\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                q.append(v)\n                if dist[v] > dist[far_node]:\n                    far_node = v\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # 1st BFS/DFS: from any node (1) find farthest A\n    A, _ = farthest_node(1, adj, n)\n    # 2nd BFS/DFS: from A find farthest distance (diameter)\n    _, diameter = farthest_node(A, adj, n)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of only lowercase English letters. Determine whether it is possible to rearrange the string so that no two adjacent characters are the same. If it is possible, output 'YES'; otherwise, output 'NO'.\n\nInput:\nA single line containing a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput 'YES' or 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    n = len(s)\n    \n    # Count frequency of each character\n    freq = [0] * 26\n    for ch in s:\n        freq[ord(ch) - ord('a')] += 1\n    \n    # The arrangement is possible iff the most frequent char\n    # does not exceed (n + 1) // 2 occurrences.\n    if max(freq) <= (n + 1) // 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n# Do not forget to call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a directed graph with N nodes and M edges. Determine whether the graph contains a cycle. If it does, output \"YES\"; otherwise, output \"NO\".\n\nInput Format:\n- The first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\n- The next M lines each contain two integers u and v, indicating an edge from node u to node v (1 ≤ u, v ≤ N).\n\nOutput Format:\n- Output \"YES\" if the graph contains a cycle, otherwise \"NO\".\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- 0 ≤ M ≤ 2×10^5\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n    m = next(it)\n\n    indeg = [0] * (n + 1)\n    g = [[] for _ in range(n + 1)]\n\n    for _ in range(m):\n        u = next(it)\n        v = next(it)\n        g[u].append(v)\n        indeg[v] += 1\n\n    q = deque(i for i in range(1, n + 1) if indeg[i] == 0)\n    visited = 0\n\n    while q:\n        u = q.popleft()\n        visited += 1\n        for v in g[u]:\n            indeg[v] -= 1\n            if indeg[v] == 0:\n                q.append(v)\n\n    sys.stdout.write(\"NO\\n\" if visited == n else \"YES\\n\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine the maximum difference between any two elements such that the larger element appears after the smaller one. Output the maximum difference, or -1 if no such pair exists.\n\nInput Format:\n- The first line contains an integer N (1 ≤ N ≤ 10^5).\n- The second line contains N space-separated integers, each between -10^9 and 10^9.\n\nOutput Format:\n- A single integer: the maximum difference, or -1.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- -10^9 ≤ array elements ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    if n < 2:\n        print(-1)\n        return\n\n    min_so_far = arr[0]\n    max_diff = -1  # initialise with -1 per problem requirement\n\n    for value in arr[1:]:\n        # If current value can form a bigger positive difference\n        if value > min_so_far:\n            max_diff = max(max_diff, value - min_so_far)\n        # Update the running minimum\n        if value < min_so_far:\n            min_so_far = value\n\n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, print the smallest integer greater than n that is a permutation of its digits. If no such number exists, print -1.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^9).\n\nOutput:\nOutput a single integer: the smallest permutation of n's digits greater than n, or -1 if not possible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef next_permutation(digits):\n    \"\"\"\n    Transform the list of digit characters to the next lexicographical\n    permutation.  Returns True if such permutation exists, otherwise False.\n    Operates in-place on the list `digits`.\n    \"\"\"\n    # 1. Find the longest non-increasing suffix\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # Entire sequence is non-increasing => already the greatest permutation\n    if i == -1:\n        return False\n\n    # 2. Find rightmost successor to the pivot\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # 3. Swap pivot with successor\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # 4. Reverse the suffix\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return True\n\n\ndef main():\n    data = sys.stdin.readline().strip()\n    if not data:                      # Guard against empty input\n        return\n    digits = list(data)               # Keep digits as characters\n\n    if next_permutation(digits):\n        print(int(''.join(digits)))   # int() removes any hypothetical leading zeros\n    else:\n        print(-1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring with no repeating characters.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer: the length of the longest substring with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains no repeated characters.\n    \"\"\"\n    last_pos = {}           # maps char -> most recent index\n    left = 0                # left boundary of current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # character repeated inside current window, move left\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with n nodes and m edges, find the length of the shortest cycle in the graph. If there is no cycle, output -1.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000).\n- Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a directed edge from u to v.\n\nOutput Format:\n- Output a single integer: the length of the shortest cycle, or -1 if there is no cycle.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n)]      # outgoing edges\n    pred = [[] for _ in range(n)]     # incoming edges (predecessors)\n\n    INF = 10 ** 9\n    answer = INF\n\n    for _ in range(m):\n        u = int(next(it)) - 1     # 0-based\n        v = int(next(it)) - 1\n        adj[u].append(v)\n        pred[v].append(u)\n        if u == v:                # self-loop → cycle of length 1\n            answer = 1\n\n    # If we already found a self-loop, it's the shortest possible\n    if answer != 1:\n        for s in range(n):\n            # BFS from node s\n            dist = [-1] * n\n            dist[s] = 0\n            dq = deque([s])\n\n            while dq:\n                cur = dq.popleft()\n                d = dist[cur] + 1\n                for nxt in adj[cur]:\n                    if dist[nxt] == -1:\n                        dist[nxt] = d\n                        dq.append(nxt)\n\n            # Any predecessor y of s that is reachable gives a cycle s … y -> s\n            for y in pred[s]:\n                if dist[y] != -1:\n                    answer = min(answer, dist[y] + 1)\n\n            # Early exit if the shortest possible cycle length (2) is reached\n            if answer == 2:\n                break\n\n    print(-1 if answer == INF else answer)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string S of length N, determine the length of the longest substring that contains at most K distinct characters.\n\nInput Format:\n- The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 26).\n- The second line contains a string S of length N consisting of lowercase English letters.\n\nOutput Format:\n- Output a single integer, the length of the longest substring with at most K distinct characters.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- 1 ≤ K ≤ 26\n- S contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_k_distinct(s: str, k: int) -> int:\n    if k >= 26 or k >= len(set(s)):\n        # The whole string already satisfies the constraint\n        return len(s)\n\n    freq = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # shrink window until we have at most k distinct characters\n        while len(freq) > k:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                del freq[left_ch]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n    s = data[2] if len(data) > 2 else ''\n    # the problem guarantees |s| == n\n    print(longest_substring_k_distinct(s, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes labeled from 1 to n, and the edges between them, find the length of the longest path in the tree (the diameter of the tree).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"\n    Breadth–first search that returns (farthest_node, distance_to_it)\n    starting from `start` using adjacency list `adj`.\n    \"\"\"\n    n = len(adj) - 1           # adjacency is 1-indexed\n    dist = [-1] * (n + 1)\n    q = deque([start])\n    dist[start] = 0\n    farthest = start\n\n    while q:\n        node = q.popleft()\n        for nei in adj[node]:\n            if dist[nei] == -1:\n                dist[nei] = dist[node] + 1\n                q.append(nei)\n                if dist[nei] > dist[farthest]:\n                    farthest = nei\n    return farthest, dist[farthest]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # First BFS from an arbitrary node (1) to find one endpoint of the diameter\n    far_node, _ = bfs(1, adj)\n\n    # Second BFS from that farthest node to get the diameter length\n    _, diameter = bfs(far_node, adj)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. Find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 2·10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the maximum sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:                     # no input\n        return\n    n = int(data[0])                 # number of elements (not really needed further)\n    nums = list(map(int, data[1:1 + n]))\n\n    # Kadane's algorithm\n    best = curr = nums[0]\n    for x in nums[1:]:\n        curr = x if curr + x < x else curr + x   # equivalent to max(x, curr + x)\n        if curr > best:\n            best = curr\n\n    sys.stdout.write(str(best))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    # Sliding window with character frequency map\n    left = 0\n    freq = defaultdict(int)\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # Shrink window while we have more than 2 distinct characters\n        while len(freq) > 2:\n            left_ch = s[left]\n            freq[left_ch] -= 1\n            if freq[left_ch] == 0:\n                del freq[left_ch]\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\ndef main():\n    s = sys.stdin.read().strip()\n    if not s:                # In case empty input is given\n        print(0)\n        return\n    print(longest_substring_two_distinct(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]\n\n    # Kadane's algorithm\n    current_sum = best_sum = arr[0]\n    for value in arr[1:]:\n        current_sum = max(value, current_sum + value)\n        best_sum = max(best_sum, current_sum)\n\n    print(best_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. For each prefix of the array, output the median of the elements in that prefix.\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\nOutput:\nPrint n integers, where the i-th integer is the median of the first i elements of the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:n+1]))\n\n    # max_heap for the lower half (as negative values)\n    # min_heap for the upper half\n    max_heap = []  # python heap is min-heap, store negatives for max-heap behaviour\n    min_heap = []\n\n    out = []\n\n    for x in arr:\n        # Step 1: insert\n        if not max_heap or x <= -max_heap[0]:\n            heapq.heappush(max_heap, -x)\n        else:\n            heapq.heappush(min_heap, x)\n\n        # Step 2: rebalance so that\n        #   len(max_heap) == len(min_heap)  OR\n        #   len(max_heap) == len(min_heap) + 1\n        if len(max_heap) < len(min_heap):\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        elif len(max_heap) - len(min_heap) > 1:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n\n        # Step 3: the median is the top of max_heap\n        out.append(str(-max_heap[0]))\n\n    sys.stdout.write(' '.join(out))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray. Print the maximum sum.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the size of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n = data[0]\n    arr = data[1:1 + n]  # ensure we only take n numbers even if extra exist\n\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    print(max_so_far)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n integers, determine if it is possible to remove exactly one element so that the remaining sequence is strictly increasing.\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint \"YES\" if it is possible to remove one element to make the sequence strictly increasing, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef can_be_inc_by_removing_one(a):\n    n = len(a)\n    if n <= 2:           # with 0 or 1 element left, sequence is always strictly increasing\n        return True\n\n    # prefix_inc[i] == True  if a[0..i] is strictly increasing\n    prefix_inc = [True] * n\n    for i in range(1, n):\n        prefix_inc[i] = prefix_inc[i-1] and (a[i] > a[i-1])\n\n    # suffix_inc[i] == True  if a[i..n-1] is strictly increasing\n    suffix_inc = [True] * n\n    for i in range(n-2, -1, -1):\n        suffix_inc[i] = suffix_inc[i+1] and (a[i+1] > a[i])\n\n    # try removing each index i\n    for i in range(n):\n        left_ok  = True if i == 0     else prefix_inc[i-1]\n        right_ok = True if i == n-1   else suffix_inc[i+1]\n\n        if not (left_ok and right_ok):\n            continue\n\n        # check the “joint” between left and right parts\n        joint_ok = True\n        if 0 < i < n-1:\n            joint_ok = a[i+1] > a[i-1]\n\n        if joint_ok:\n            return True\n    return False\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1: 1+n]))\n\n    if can_be_inc_by_removing_one(a):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes labeled from 1 to N. Each edge has a weight. Find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- Each of the next N−1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4) denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- A single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Returns (node, distance) of the farthest node from `start`\n    in an undirected weighted tree represented by `adj`.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    stack = [start]\n\n    while stack:\n        v = stack.pop()\n        for nxt, w in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + w\n                stack.append(nxt)\n\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # First traversal: from arbitrary node (1) to find farthest node\n    node_a, _ = farthest(1, adj, n)\n    # Second traversal: from node_a to find the actual diameter\n    _, diameter = farthest(node_a, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size N x M consisting of '.' (empty cell) and '#' (blocked cell). Find the number of distinct paths from the top-left cell to the bottom-right cell, moving only right or down, and only through empty cells.\nInput Format:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 1000).\nEach of the next N lines contains a string of length M, with characters '.' or '#'.\nOutput Format:\nOutput a single integer, the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10 ** 9 + 7\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # DP over columns only (rolling array)\n    dp = [0] * m\n\n    for i in range(n):\n        row = next(it).decode()\n        for j, cell in enumerate(row):\n            if cell == '#':\n                dp[j] = 0\n            else:\n                if i == 0 and j == 0:\n                    dp[j] = 1  # starting cell\n                else:\n                    up = dp[j]           # value already in dp[j] is from previous row (up)\n                    left = dp[j - 1] if j > 0 else 0\n                    dp[j] = (up + left) % MOD\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given two integers a and b. Find the greatest common divisor (GCD) of a and b.\n\nInput:\nThe first line contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput:\nPrint a single integer: the GCD of a and b.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main() -> None:\n    # Read all input, split into numbers, and convert to integers\n    data = sys.stdin.read().strip().split()\n    \n    # Guard against missing input\n    if len(data) < 2:\n        return\n    \n    a, b = map(int, data[:2])\n    \n    # Compute and print the GCD\n    print(math.gcd(a, b))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, count the number of different strings of length n that can be formed from the first k lowercase English letters so that no two consecutive characters are the same.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 26).\n\nOutput Format:\n- Output the answer modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, k = map(int, data[:2])\n\n    # When there is only one available letter\n    if k == 1:\n        print(1 if n == 1 else 0)\n        return\n\n    # General case: first position has k choices,\n    # each subsequent position has (k-1) choices.\n    ans = (k * pow(k - 1, n - 1, MOD)) % MOD\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, each edge has a weight. For each node, compute the sum of distances from that node to all other nodes in the tree.\n\nInput Format:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nEach of the next N−1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n\nOutput Format:\nPrint N integers: the i-th integer is the sum of distances from node i to all other nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    size = [0] * (n + 1)       # size of subtree\n    ans  = [0] * (n + 1)       # required answer\n    total = [0]                # sum of distances from root (node 1) to all nodes\n    \n    # 1st DFS: compute subtree sizes and sum of distances from root\n    def dfs1(u: int, p: int, dist_acc: int) -> None:\n        size[u] = 1\n        total[0] += dist_acc\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            dfs1(v, u, dist_acc + w)\n            size[u] += size[v]\n    \n    dfs1(1, 0, 0)\n    \n    ans[1] = total[0]\n    \n    # 2nd DFS: reroot DP to fill answers for all nodes\n    def dfs2(u: int, p: int) -> None:\n        for v, w in adj[u]:\n            if v == p:\n                continue\n            # when moving root from u to v\n            ans[v] = ans[u] + (n - 2 * size[v]) * w\n            dfs2(v, u)\n    \n    dfs2(1, 0)\n    \n    out = ' '.join(str(ans[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, find the number of distinct ways to fill an array of length n with positive integers such that the sum of the array is k. Output the answer modulo 10^9 + 7.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10000).\n\nOutput Format:\n- Output a single integer: the number of ways modulo 10^9 + 7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef modinv(a: int) -> int:\n    \"\"\"Modular multiplicative inverse using Fermat’s little theorem (MOD is prime).\"\"\"\n    return pow(a, MOD - 2, MOD)\n\ndef nCr_mod(n: int, r: int) -> int:\n    \"\"\"Compute C(n, r) modulo MOD (0 ≤ r ≤ n).\"\"\"\n    if r < 0 or r > n:\n        return 0\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    return fact[n] * modinv(fact[r]) % MOD * modinv(fact[n - r]) % MOD\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, k = map(int, data)\n\n    # If k < n it's impossible to have each element ≥ 1.\n    if k < n:\n        print(0)\n        return\n\n    # Number of compositions of k into n positive parts = C(k-1, n-1).\n    ans = nCr_mod(k - 1, n - 1)\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string consisting of only lowercase English letters, determine if the string is a palindrome.\n\nInput:\nThe first line contains a string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput \"Yes\" if s is a palindrome, otherwise output \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    # Remove any trailing newline or spaces just in case,\n    # but according to the statement there shouldn't be spaces\n    if s == s[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers. Find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    \"\"\"\n    Classic Kadane’s algorithm.\n    Returns the maximum sum of a contiguous sub-array.\n    \"\"\"\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start new from current element\n        max_ending_here = x if x > max_ending_here + x else max_ending_here + x\n        # Track the best we have seen so far\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    # Safety if fewer numbers read than stated (though problem guarantees correct input)\n    arr = arr[:n]\n    print(kadane_max_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest subsequence such that all elements of the subsequence are consecutive integers, regardless of order.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the length of the longest consecutive subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_consecutive(nums):\n    \"\"\"Return length of the longest set of consecutive integers in nums.\"\"\"\n    num_set = set(nums)\n    best = 0\n\n    for x in num_set:\n        if x - 1 not in num_set:           # x can be a sequence start\n            y = x\n            while y in num_set:\n                y += 1\n            best = max(best, y - x)        # length = last_missing - start\n    return best\n\ndef main():\n    data = sys.stdin.buffer.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))     # read exactly n numbers\n    print(longest_consecutive(nums))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, where each edge has a weight, answer Q queries. Each query consists of two nodes u and v; for each, output the sum of the weights along the path from u to v.\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- Next N-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4), representing an edge between u and v with weight w.\n- The next line contains an integer Q (1 ≤ Q ≤ 10^5).\n- Next Q lines each contain two integers u and v.\n\nOutput Format:\n- For each query, output a single integer: the path sum from u to v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    it = iter(data)\n\n    n = next(it)                     # number of nodes\n    adj = [[] for _ in range(n + 1)] # adjacency list\n\n    # read edges\n    for _ in range(n - 1):\n        u = next(it); v = next(it); w = next(it)\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    LOG = n.bit_length()             # enough levels for binary lifting\n    parent = [[0] * (n + 1) for _ in range(LOG)]\n    depth  = [0] * (n + 1)           # depth from root (node 1) in edges\n    dist   = [0] * (n + 1)           # distance (sum of weights) from root\n\n    # iterative DFS to fill parent[0], depth, dist\n    stack = [1]\n    parent[0][1] = 0                 # root's parent is 0 (sentinel)\n    while stack:\n        u = stack.pop()\n        for v, w in adj[u]:\n            if v == parent[0][u]:\n                continue\n            parent[0][v] = u\n            depth[v] = depth[u] + 1\n            dist[v]  = dist[u] + w\n            stack.append(v)\n\n    # build binary-lifting table\n    for k in range(1, LOG):\n        up = parent[k - 1]\n        cur = parent[k]\n        for v in range(1, n + 1):\n            cur[v] = up[up[v]]\n\n    # LCA query using binary lifting\n    def lca(u: int, v: int) -> int:\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # lift u to depth of v\n        diff = depth[u] - depth[v]\n        bit = 0\n        while diff:\n            if diff & 1:\n                u = parent[bit][u]\n            diff >>= 1\n            bit += 1\n        if u == v:\n            return u\n        for k in range(LOG - 1, -1, -1):\n            if parent[k][u] != parent[k][v]:\n                u = parent[k][u]\n                v = parent[k][v]\n        return parent[0][u]\n\n    # answer queries\n    q = next(it)\n    out_lines = []\n    for _ in range(q):\n        u = next(it); v = next(it)\n        w = lca(u, v)\n        out_lines.append(str(dist[u] + dist[v] - 2 * dist[w]))\n\n    sys.stdout.write('\\n'.join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring of S that contains at most two distinct characters.\n\nInput:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer — the length of the longest substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    # Sliding window with character counts\n    left = 0\n    counts = defaultdict(int)\n    best = 0\n\n    for right, ch in enumerate(s):\n        counts[ch] += 1\n\n        # Shrink window until it has at most 2 distinct characters\n        while len(counts) > 2:\n            left_ch = s[left]\n            counts[left_ch] -= 1\n            if counts[left_ch] == 0:\n                del counts[left_ch]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_substring_two_distinct(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, print the number of distinct elements in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    # Read all tokens from stdin\n    tokens = sys.stdin.read().strip().split()\n    if not tokens:                       # Empty input guard\n        return\n\n    nums = [int(tok) for tok in tokens]\n\n    # If the first number equals the count of the remaining numbers,\n    # treat it as the length indicator; otherwise treat the whole list.\n    if len(nums) >= 2 and nums[0] == len(nums) - 1:\n        nums = nums[1:]\n\n    # Use a set to count distinct elements\n    distinct_count = len(set(nums))\n\n    # Output the result\n    print(distinct_count)\n\n# Do not forget to call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value. For each node, compute the sum of all values in its subtree (including itself).\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    val = [0] + [int(next(it)) for _ in range(n)]          # 1-indexed\n    \n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        g[u].append(v)\n        g[v].append(u)\n\n    subsum = [0] * (n + 1)\n\n    # iterative post-order DFS to avoid recursion depth issues altogether\n    stack = [(1, 0, False)]        # (node, parent, processed?)\n    while stack:\n        node, parent, done = stack.pop()\n        if done:                                     # children have been handled\n            total = val[node]\n            for child in g[node]:\n                if child != parent:\n                    total += subsum[child]\n            subsum[node] = total\n        else:\n            stack.append((node, parent, True))       # process after children\n            for child in g[node]:\n                if child != parent:\n                    stack.append((child, node, False))\n\n    # output results for nodes 1 … N\n    out = ' '.join(str(subsum[i]) for i in range(1, n + 1))\n    sys.stdout.write(out)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput:\nA single line containing the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nOutput a single integer, the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}          # Stores last seen index for each character\n    left = 0               # Left border of the current window\n    best = 0               # Best (maximum) window length found\n\n    for right, ch in enumerate(s):\n        if ch in last_pos and last_pos[ch] >= left:\n            # Character repeated inside current window ⇒ shrink window\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n intervals, each defined by their start and end points [l_i, r_i]. Find the maximum number of intervals that overlap at any single point.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 2×10^5).\n- The next n lines each contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the maximum number of overlapping intervals.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    events = []                 # (coordinate, kind)\n                                # kind: 0 -> interval starts here\n                                #       1 -> interval ends here\n                                # When coordinates are equal we want\n                                # starts processed before ends so that\n                                # an interval that ends at x overlaps\n                                # with another that starts at x.\n    for _ in range(n):\n        l = int(next(it))\n        r = int(next(it))\n        events.append((l, 0))   # start\n        events.append((r, 1))   # end\n\n    events.sort()               # sorts by coordinate, then kind\n    \n    current = 0\n    best = 0\n    for _, kind in events:\n        if kind == 0:           # start\n            current += 1\n            if current > best:\n                best = current\n        else:                   # end\n            current -= 1\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers A and B, find the greatest integer X such that X divides both A and B, and X is a palindrome.\n\nInput Format:\nThe first line contains two integers A and B (1 ≤ A, B ≤ 10^{12}).\n\nOutput Format:\nPrint a single integer: the greatest palindromic common divisor of A and B.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef is_palindrome(n: int) -> bool:\n    \"\"\"\n    Check if an integer n is a palindrome.\n    \"\"\"\n    s = str(n)\n    return s == s[::-1]\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    A, B = map(int, data.split())\n    \n    g = math.gcd(A, B)          # greatest common divisor\n    \n    # If the gcd itself is a palindrome we are done\n    if is_palindrome(g):\n        print(g)\n        return\n    \n    # Collect divisors\n    limit = int(math.isqrt(g))\n    small_divs = []             # divisors up to sqrt(g)\n    large_divs = []             # corresponding large divisors (> sqrt(g)), already in descending order\n    for i in range(1, limit + 1):\n        if g % i == 0:\n            small_divs.append(i)\n            other = g // i\n            if other != i:\n                large_divs.append(other)   # first added is g itself, list is descending\n    \n    # Search the larger divisors first (they are already in descending order)\n    for d in large_divs:\n        if is_palindrome(d):\n            print(d)\n            return\n    \n    # Then search the smaller divisors in descending order\n    for d in reversed(small_divs):\n        if is_palindrome(d):\n            print(d)\n            return\n\n# Don't forget to call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, find the length of the longest substring that contains at most two distinct characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_sub_at_most_two_distinct(s: str) -> int:\n    counts = defaultdict(int)\n    left = 0\n    best = 0\n    \n    for right, ch in enumerate(s):\n        counts[ch] += 1\n        \n        # shrink window if more than two distinct characters\n        while len(counts) > 2:\n            left_char = s[left]\n            counts[left_char] -= 1\n            if counts[left_char] == 0:\n                del counts[left_char]\n            left += 1\n        \n        best = max(best, right - left + 1)\n    return best\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(longest_sub_at_most_two_distinct(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer, the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    best = -10**15  # smaller than any possible sum\n    current = 0\n    for v in arr:\n        # If current + v is worse than starting fresh from v, restart\n        current = max(v, current + v)\n        best = max(best, current)\n    return best\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1+n]))\n    result = max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine if there exists a pair of distinct elements whose sum is exactly K.\nInput:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^9).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\nOutput:\nPrint \"YES\" if such a pair exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n    \n    seen = set()\n    for num in nums:\n        complement = k - num\n        if complement in seen:\n            print(\"YES\")\n            return\n        seen.add(num)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n distinct integers, find the smallest positive integer that is not present in the list.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n distinct integers a_i (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the minimal positive integer not in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    positive_set = {x for x in nums if x > 0}\n\n    missing = 1\n    # Since there are n distinct numbers, the answer cannot exceed n+1\n    while missing in positive_set:\n        missing += 1\n\n    print(missing)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum sum of any contiguous subarray.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\nThe second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer: the maximum sum of any contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef kadane_max_subarray(arr):\n    # Initialize with first element to correctly handle all-negative arrays\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        # Either extend the previous subarray or start a new one at current element\n        max_ending_here = max(x, max_ending_here + x)\n        # Track the best sum seen so far\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n    result = kadane_max_subarray(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum of any contiguous subarray.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^4 ≤ A_i ≤ 10^4).\n\nOutput Format:\nOutput a single integer: the maximum possible sum of a contiguous subarray.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_subarray_sum(arr):\n    # Kadane's algorithm\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    # Safety check in case fewer numbers are provided\n    if len(nums) != n:\n        nums.extend([0] * (n - len(nums)))\n    result = max_subarray_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, partition it into the minimum number of contiguous subarrays such that each subarray's sum is divisible by k.\n\nInput:\n- The first line contains two integers n and k (1 ≤ n ≤ 2×10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\n- Output a single integer: the minimum number of contiguous subarrays needed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    INF = n + 5                       # “Infinity” bigger than any possible answer\n    best = {0: 0}                     # best[mod] = minimal segments needed up to the last\n                                      # position that produced this remainder\n    pref = 0                          # current prefix sum modulo k\n    dp_i = INF                        # value of dp for current position\n\n    for x in a:\n        pref = (pref + x) % k\n\n        if pref in best:              # can close a segment ending here\n            dp_i = best[pref] + 1\n        else:                         # no previous equal remainder → impossible so far\n            dp_i = INF\n\n        # store the best value for this remainder\n        if pref not in best or dp_i < best[pref]:\n            best[pref] = dp_i\n\n    # dp_i now holds dp[n]\n    if dp_i >= INF:                   # impossible to partition\n        print(-1)\n    else:\n        print(dp_i)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n) and n-1 edges, each connecting two nodes, find the diameter of the tree (the length of the longest path between any two nodes).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nThe next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj):\n    \"\"\"\n    Breadth-first search that returns the farthest node from `start`\n    and its distance.\n    \"\"\"\n    n = len(adj)\n    dist = [-1] * n\n    q = deque([start])\n    dist[start] = 0\n    far_node = start\n\n    while q:\n        v = q.popleft()\n        for nxt in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + 1\n                q.append(nxt)\n                if dist[nxt] > dist[far_node]:\n                    far_node = nxt\n    return far_node, dist[far_node]\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]  # 1-based indexing\n\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # 1st BFS to find one endpoint of the diameter\n    a, _ = bfs(1, adj)\n\n    # 2nd BFS from 'a' to find the real diameter length\n    b, diameter = bfs(a, adj)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains no repeated characters.\n\nInput:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\n\nOutput:\nPrint a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` that has no repeated characters.\n    Uses a sliding-window technique with a dictionary storing the most recent index\n    at which each character was seen.\n    \"\"\"\n    last_seen = {}           # char -> most recent index\n    left = 0                 # left boundary of current window\n    best = 0                 # best length found so far\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # Character repeats inside current window; move left boundary\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimum number of elements you need to remove so that the remaining elements are all equal.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput a single integer: the minimum number of elements to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n    \n    freq = Counter(nums)\n    max_freq = max(freq.values()) if freq else 0\n    print(n - max_freq)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of only lowercase English letters, determine if it is possible to rearrange the characters of s to form a palindrome.\n\nInput Format:\n- A single line containing the string s (1 ≤ |s| ≤ 1000).\n\nOutput Format:\n- Output \"YES\" if it is possible to rearrange s into a palindrome, \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Determines whether any permutation of `s` can form a palindrome.\n    A string can be rearranged into a palindrome if and only if\n    at most one character has an odd frequency.\n    \"\"\"\n    odd_count = sum(1 for freq in Counter(s).values() if freq % 2)\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()          # read the single input string\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, compute the number of ways to represent n as the sum of positive integers, where the order of addends does not matter (i.e., count the number of integer partitions of n).\n\nInput Format:\n- A single integer n (1 ≤ n ≤ 1000).\n\nOutput Format:\n- Output a single integer: the number of integer partitions of n.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef partitions(n: int) -> int:\n    \"\"\"\n    Return the number of integer partitions of n (order of addends is irrelevant).\n    Uses the classic dynamic-programming / coin-change style algorithm.\n\n    Complexity:  O(n²) time, O(n) memory  — fine for n ≤ 1000.\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1                        # One way to make 0: choose nothing\n    for addend in range(1, n + 1):   # Iterate over possible summands\n        for total in range(addend, n + 1):\n            dp[total] += dp[total - addend]\n    return dp[n]\n\ndef main() -> None:\n    n_str = sys.stdin.readline().strip()\n    if not n_str:\n        return\n    n = int(n_str)\n    print(partitions(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers N and K, count the number of ways to fill an array of length N with integers from 1 to K such that no two adjacent elements are equal.\n\nInput Format:\nThe first line contains two integers N and K (1 ≤ N ≤ 10^5, 2 ≤ K ≤ 10^5).\n\nOutput Format:\nOutput the answer modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    N, K = map(int, data)\n    \n    # For N = 1, any of the K numbers can be placed.\n    if N == 1:\n        print(K % MOD)\n        return\n    \n    # First position: K choices\n    # Every subsequent position: (K-1) choices (must differ from previous)\n    ans = (K % MOD) * pow(K - 1, N - 1, MOD)\n    ans %= MOD\n    \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine whether it is possible to rearrange the characters in S to form a palindrome.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string S of length n.\n\nOutput:\nPrint \"YES\" if it is possible to rearrange S into a palindrome, or \"NO\" otherwise.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if any permutation of the string `s` can be arranged\n    as a palindrome, False otherwise.\n    \"\"\"\n    odd_counts = sum(1 for cnt in Counter(s).values() if cnt % 2)\n    # At most one character may have an odd frequency\n    return odd_counts <= 1\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return                     # no input\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    \n    # Basic validation (optional, defensive programming)\n    # Ensure the stated length matches the string length.\n    # If not, we'll still process the given string.\n    # n = min(n, len(s))  # would trim, but not needed for logic\n    \n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nA directed graph with n nodes and m edges is given. Each edge has a weight. Find the length of the shortest cycle in the graph. If there is no cycle, output -1.\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 500, 0 ≤ m ≤ 5000).\nEach of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), representing a directed edge from u to v with weight w.\nOutput:\nPrint a single integer, the length of the shortest cycle, or -1 if none exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\nINF = 10 ** 18\n\n\ndef dijkstra(start, graph, n):\n    dist = [INF] * (n + 1)\n    dist[start] = 0\n    pq = [(0, start)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d != dist[u]:\n            continue\n        for v, w in graph[u]:\n            nd = d + w\n            if nd < dist[v]:\n                dist[v] = nd\n                heapq.heappush(pq, (nd, v))\n    return dist\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    graph = [[] for _ in range(n + 1)]\n    edges = []\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        graph[u].append((v, w))\n        edges.append((u, v, w))\n\n    # All-pairs shortest paths via one run of Dijkstra per source\n    dist = [[INF] * (n + 1) for _ in range(n + 1)]\n    for s in range(1, n + 1):\n        dist[s] = dijkstra(s, graph, n)\n\n    best = INF\n    for u, v, w in edges:\n        if dist[v][u] != INF:        # path v → … → u exists\n            best = min(best, w + dist[v][u])\n\n    print(-1 if best == INF else best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Your task is to compute the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])  # Number of elements (can be ignored after reading)\n    # Convert the next n values to int and sum only the even ones\n    even_sum = sum(int(x) for x in data[1:1 + n] if int(x) % 2 == 0)\n    print(even_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine if the graph is bipartite.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, edges):\n    \"\"\"Return True if the undirected graph is bipartite.\"\"\"\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * (n + 1)  # -1 = unvisited, 0/1 = two colors\n\n    for start in range(1, n + 1):\n        if color[start] != -1:\n            continue\n\n        # Start BFS from this component\n        queue = deque([start])\n        color[start] = 0\n        while queue:\n            u = queue.popleft()\n            for v in adj[u]:\n                if color[v] == -1:\n                    color[v] = color[u] ^ 1\n                    queue.append(v)\n                elif color[v] == color[u]:\n                    return False\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    try:\n        n = int(next(it))\n        m = int(next(it))\n    except StopIteration:\n        # insufficient input\n        print(\"NO\")\n        return\n\n    edges = []\n    for _ in range(m):\n        try:\n            u = int(next(it))\n            v = int(next(it))\n        except StopIteration:\n            # malformed edge list\n            print(\"NO\")\n            return\n        edges.append((u, v))\n\n    if is_bipartite(n, edges):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\nInput Format:\n- The first line contains a single string s (1 ≤ |s| ≤ 10^4).\nOutput Format:\n- Output a single integer: the length of the longest substring without repeating characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s` without repeating characters.\n    Sliding-window (two-pointer) method – O(n) time, O(Σ) space.\n    \"\"\"\n    last_seen = {}           # char -> most recent index\n    left = 0                 # left end of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # Character repeats inside current window, move left past the previous occurrence\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n\n    return best\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine if there exists a cycle in the graph.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 × 10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge between nodes u and v.\n\nOutput:\nPrint \"YES\" if there is a cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    __slots__ = ('parent', 'size')\n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n\n    def find(self, x: int) -> int:\n        # Path compression\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False          # already connected -> adding this edge creates a cycle\n        # union by size\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        return True\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    dsu = DSU(n)\n    for _ in range(m):\n        u = int(next(it)) - 1  # zero-based\n        v = int(next(it)) - 1\n        if not dsu.union(u, v):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the number of pairs (i, j) such that i < j and arr[i] + arr[j] is even.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array.\n- The second line contains n integers arr[1], arr[2], ..., arr[n] (1 ≤ arr[i] ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    even = odd = 0\n    for x in nums:\n        if x & 1:\n            odd += 1\n        else:\n            even += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    ans = even * (even - 1) // 2 + odd * (odd - 1) // 2\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each node has a value. You must answer q queries of the form: For a given node u and integer x, how many nodes in the subtree of u have values greater than x?\n\nInput:\nThe first line contains two integers n and q (1 ≤ n, q ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the values at each node.\nEach of the next n-1 lines contains two integers u and v, denoting an edge between nodes u and v.\nEach of the next q lines contains two integers u and x.\n\nOutput:\nFor each query, print the answer on a new line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\n# ---------- Fenwick (Binary Indexed) Tree ----------\nclass BIT:\n    def __init__(self, n):\n        self.n = n\n        self.bit = [0]*(n+1)\n\n    def add(self, idx, delta=1):\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def sum(self, idx):\n        s = 0\n        while idx:\n            s += self.bit[idx]\n            idx -= idx & -idx\n        return s\n\n    # range sum [l,r]\n    def range_sum(self, l, r):\n        if l > r:\n            return 0\n        return self.sum(r) - self.sum(l-1)\n\n# ---------------------------------------------------\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    q = int(next(it))\n\n    values = [0]*(n+1)\n    for i in range(1, n+1):\n        values[i] = int(next(it))\n\n    g = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u = int(next(it)); v = int(next(it))\n        g[u].append(v)\n        g[v].append(u)\n\n    tin = [0]*(n+1)\n    tout = [0]*(n+1)\n    size = [0]*(n+1)\n    euler_val = [0]*(n+1)   # value of node occupying position pos (1-indexed)\n\n    timer = [1]             # mutable integer via list for inner function\n\n    def dfs(u, p):\n        tin[u] = timer[0]\n        euler_val[timer[0]] = values[u]\n        timer[0] += 1\n        for v in g[u]:\n            if v != p:\n                dfs(v, u)\n        tout[u] = timer[0]-1\n        size[u] = tout[u] - tin[u] + 1\n\n    dfs(1, 0)\n\n    # List of (node_value, position_in_euler)\n    nodes_by_value = [(values[i], tin[i]) for i in range(1, n+1)]\n    nodes_by_value.sort()\n\n    # Read queries, store (x, u, id)\n    queries = []\n    for idx in range(q):\n        u = int(next(it)); x = int(next(it))\n        queries.append((x, u, idx))\n\n    queries.sort()  # sort by x asc\n\n    bit = BIT(n)\n    answers = [0]*q\n\n    node_ptr = 0  # pointer in nodes_by_value\n    for x, u, qid in queries:\n        # Insert all nodes with value <= x\n        while node_ptr < n and nodes_by_value[node_ptr][0] <= x:\n            pos = nodes_by_value[node_ptr][1]\n            bit.add(pos, 1)\n            node_ptr += 1\n        # number of nodes with value <= x in subtree(u)\n        cnt_leq = bit.range_sum(tin[u], tout[u])\n        answers[qid] = size[u] - cnt_leq   # nodes with value > x\n\n    sys.stdout.write('\\n'.join(map(str, answers)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of N integers. Find the longest increasing subsequence of the sequence.\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\nOutput:\nPrint the length of the longest increasing subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))\n    \n    tails = []                       # tails[i] = smallest tail of all increasing subseq. with length i+1\n    for x in arr:\n        idx = bisect.bisect_left(tails, x)  # first tail >= x\n        if idx == len(tails):\n            tails.append(x)          # extend LIS\n        else:\n            tails[idx] = x           # improve existing subsequence\n        \n    print(len(tails))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of n rows and m columns filled with '.' and '#' characters. Find the number of distinct connected components consisting of '#' characters, where connectivity is 4-directional (up, down, left, right).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of m characters: '.' or '#'.\n\nOutput:\nOutput a single integer: the number of connected components of '#'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    # Read input\n    data = sys.stdin.buffer.read().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = [line.decode() for line in data[1:1 + n]]\n\n    visited = [[False] * m for _ in range(n)]\n    components = 0\n\n    # Directions: up, down, left, right\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#' and not visited[i][j]:\n                components += 1\n                # BFS starting from (i, j)\n                dq = deque()\n                dq.append((i, j))\n                visited[i][j] = True\n                while dq:\n                    x, y = dq.popleft()\n                    for dx, dy in dirs:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            if grid[nx][ny] == '#' and not visited[nx][ny]:\n                                visited[nx][ny] = True\n                                dq.append((nx, ny))\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N × N consisting of only '.' (empty) and '#' (blocked) cells, find the minimum number of moves required to move from the top-left corner (1, 1) to the bottom-right corner (N, N). You may move up, down, left, or right, but cannot pass through blocked cells. If it is impossible, print -1.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 1000).\nEach of the next N lines contains a string of N characters, each '.' or '#'.\n\nOutput:\nPrint the minimum number of moves required, or -1 if it is impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    grid = [next(it).decode() for _ in range(n)]\n\n    # If start or target is blocked -> impossible\n    if grid[0][0] == '#' or grid[-1][-1] == '#':\n        print(-1)\n        return\n\n    # Distance array; -1 => unvisited\n    dist = [[-1] * n for _ in range(n)]\n    dist[0][0] = 0\n    dq = deque([(0, 0)])\n\n    # Directions: up, down, left, right\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    while dq:\n        x, y = dq.popleft()\n        d = dist[x][y]\n        if (x, y) == (n - 1, n - 1):\n            print(d)\n            return\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and dist[nx][ny] == -1 and grid[nx][ny] == '.':\n                dist[nx][ny] = d + 1\n                dq.append((nx, ny))\n\n    print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine whether it is possible to divide the nodes into two groups such that no two nodes in the same group are connected by an edge.\nInput Format:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing an edge.\nOutput Format:\nOutput \"YES\" if such a division is possible, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, adj):\n    color = [-1] * (n + 1)          # 0/1 colors, -1 means unvisited\n    for start in range(1, n + 1):   # graph may be disconnected\n        if color[start] != -1:\n            continue\n        queue = deque([start])\n        color[start] = 0\n        while queue:\n            u = queue.popleft()\n            cu = color[u]\n            for v in adj[u]:\n                if color[v] == -1:\n                    color[v] = 1 - cu\n                    queue.append(v)\n                elif color[v] == cu:\n                    return False\n    return True\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n    print(\"YES\" if is_bipartite(n, adj) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if it is possible to make all elements equal by incrementing or decrementing any element by 1 any number of times. Output \"YES\" if possible, otherwise output \"NO\".\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the array.\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000).\n\nOutput:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    \"\"\"\n    Whatever the initial array is, we can always make all elements equal\n    by repeatedly adding or subtracting 1 from individual elements.\n    Therefore the answer is unconditionally \"YES\".\n    \"\"\"\n    import sys\n\n    # Read the whole input just to conform to the required format\n    data = sys.stdin.read()\n    # We do not actually need to examine the numbers.\n    if data.strip():          # make sure there's any input at all\n        print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes rooted at node 1, where each edge has a weight, find the length of the longest path in the tree (the tree's diameter).\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- Each of the next N - 1 lines contains three integers u, v, w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    From `start` perform a traversal (BFS) and return the node that is farthest\n    away together with the corresponding distance.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n\n    while q:\n        v = q.popleft()\n        for nxt, w in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + w\n                q.append(nxt)\n\n    # locate the farthest node\n    max_node = start\n    max_dist = 0\n    for i in range(1, n + 1):\n        if dist[i] > max_dist:\n            max_dist = dist[i]\n            max_node = i\n    return max_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n\n    # adjacency list\n    adj = [[] for _ in range(n + 1)]\n    idx = 1\n    for _ in range(n - 1):\n        u = int(data[idx]); v = int(data[idx + 1]); w = int(data[idx + 2])\n        idx += 3\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # first pass: from an arbitrary node (1) find farthest node `p`\n    p, _ = farthest(1, adj, n)\n    # second pass: from `p` find actual diameter\n    _, diameter = farthest(p, adj, n)\n\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the maximum difference between any two elements in the array. The difference must be computed as the absolute difference between two distinct elements.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 1000), the length of the array.\n- The second line contains n integers a_1, a_2, ..., a_n (−10^4 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the maximum absolute difference.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    # Read all input and split into tokens\n    tokens = sys.stdin.read().strip().split()\n    \n    if not tokens:\n        return\n    \n    n = int(tokens[0])                # length of the array (not essential beyond validation)\n    arr = list(map(int, tokens[1:1+n]))  # read next n integers\n    \n    # Maximum absolute difference equals max element minus min element\n    max_diff = max(arr) - min(arr)\n    \n    print(max_diff)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the length of the longest palindrome that can be formed using the letters from S.\n\nInput Format:\nThe first line contains the string S (1 ≤ |S| ≤ 10^5).\n\nOutput Format:\nOutput a single integer, the length of the longest palindrome that can be formed.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef longest_palindrome_length(s: str) -> int:\n    \"\"\"\n    Return the length of the longest palindrome\n    that can be formed with the letters of s.\n    \"\"\"\n    freq = Counter(s)\n    length = 0\n    has_odd = False\n\n    for cnt in freq.values():\n        length += (cnt // 2) * 2  # use the largest even part\n        if cnt % 2:               # track if there is at least one odd count\n            has_odd = True\n\n    if has_odd:\n        length += 1  # one odd char can be placed in the middle\n\n    return length\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_palindrome_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, return the second largest unique value in the array. If it does not exist, return -1.\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100).\nOutput Format:\n- Output a single integer: the second largest unique value or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n    \n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])            # number of elements (can be ignored after reading)\n    nums = list(map(int, data[1:n+1]))\n\n    unique_vals = sorted(set(nums), reverse=True)  # distinct values in descending order\n    if len(unique_vals) >= 2:\n        print(unique_vals[1])\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the smallest positive integer that is not the sum of any subset of the list.\n\nInput:\n- The first line contains a single integer N (1 ≤ N ≤ 10^5).\n- The second line contains N positive integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\n- Output a single integer: the smallest positive integer that cannot be formed as the sum of any subset of the given numbers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_unreachable(nums):\n    \"\"\"\n    Given a list of positive integers `nums`, return the smallest positive\n    integer that is NOT representable as the sum of some subset of `nums`.\n    \"\"\"\n    nums.sort()              # sort ascending\n    smallest_missing = 1      # we can currently form all sums in [1, smallest_missing)\n    \n    for x in nums:\n        # If current number is larger than the smallest gap, we cannot fill the gap\n        if x > smallest_missing:\n            break\n        # Otherwise extend the reachable range\n        smallest_missing += x\n    \n    return smallest_missing\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1+n]))   # read next n integers\n    result = smallest_unreachable(arr)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer array nums of length n, find the number of pairs (i, j) such that 0 ≤ i < j < n and nums[i] + nums[j] is even.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers nums[i] (1 ≤ nums[i] ≤ 10^9).\n\nOutput:\nPrint a single integer representing the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    evens = odds = 0\n    for num in nums:\n        if num & 1:\n            odds += 1\n        else:\n            evens += 1\n\n    # Number of ways to choose 2 evens + number of ways to choose 2 odds\n    pairs = evens * (evens - 1) // 2 + odds * (odds - 1) // 2\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the sum of all even numbers in the array.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 100).\n- The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000).\n\nOutput Format:\n- Print a single integer, the sum of all even numbers in the array.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    # Read the number of elements\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    \n    # Extract the next n integers\n    numbers = list(map(int, data[1:1 + n]))\n    \n    # Compute the sum of even numbers\n    even_sum = sum(x for x in numbers if x % 2 == 0)\n    \n    # Output the result\n    print(even_sum)\n\n# Call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers nums of length n, return the maximum sum of any contiguous subarray of length exactly k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\nThe second line contains n integers nums[i] (-10^4 ≤ nums[i] ≤ 10^4).\n\nOutput:\nPrint a single integer, the maximum sum of any contiguous subarray of length k.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    nums = list(map(int, data[2:2 + n]))\n\n    # Initialize window sum with the first k elements\n    window_sum = sum(nums[:k])\n    max_sum = window_sum\n\n    # Slide the window through the array\n    for i in range(k, n):\n        window_sum += nums[i] - nums[i - k]  # add new, remove old\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    print(max_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Print a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    # Dictionary to store the last index where each character appeared\n    last_seen = {}\n    start = 0          # Start index of current window\n    max_len = 0        # Maximum length found so far\n\n    for i, ch in enumerate(s):\n        # If we've seen the character and it's inside the current window, move start\n        if ch in last_seen and last_seen[ch] >= start:\n            start = last_seen[ch] + 1\n        # Update last seen index for the current character\n        last_seen[ch] = i\n        # Update maximum length\n        max_len = max(max_len, i - start + 1)\n\n    return max_len\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), each edge having a positive weight, find the diameter of the tree (the longest path between any two nodes).\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\nOutput a single integer: the diameter of the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest(start, adj, n):\n    \"\"\"\n    Breadth-first search that returns the farthest node and its distance\n    from the starting node in a weighted tree.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    last = start\n\n    while q:\n        u = q.popleft()\n        last = u\n        for v, w in adj[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + w\n                q.append(v)\n\n    return last, dist[last]          # farthest node, distance to it\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # adjacency list: adj[u] = list of (v, w)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # 1st BFS/DFS: from arbitrary node (1) to find farthest node a\n    a, _ = farthest(1, adj, n)\n\n    # 2nd BFS/DFS: from node a to find its farthest node b and distance\n    b, diameter = farthest(a, adj, n)\n\n    # Output diameter\n    sys.stdout.write(str(diameter))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a 2D grid of size n x m consisting of characters '.' and '#'. A cell with '.' is empty, and a cell with '#' is blocked. Count the number of distinct paths from the top-left cell (1,1) to the bottom-right cell (n,m), moving only right or down, and not passing through blocked cells. The answer may be large, so output it modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nThe next n lines each contain m characters (either '.' or '#').\n\nOutput:\nPrint a single integer, the number of distinct paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid_chars = data[2:]\n    # Convert list of strings to list of char-arrays; each row length m\n    grid = [grid_chars[i] for i in range(n)]\n    \n    # DP array of length m (rolling array)\n    dp = [0] * m\n\n    # Initialize first cell\n    dp[0] = 1 if grid[0][0] == '.' else 0\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                dp[j] = 0\n            else:\n                if j > 0:\n                    dp[j] = (dp[j] + dp[j - 1]) % MOD\n                # If j == 0, dp[j] already contains the number of ways from above (previous iteration of i),\n                # so we leave it as is (unless the cell is blocked, handled above).\n\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n) and n-1 edges, each edge having a positive integer weight, find the length of the longest path in the tree (the diameter).\n\nInput:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers a, b, w (1 ≤ a, b ≤ n, 1 ≤ w ≤ 10^4), meaning there is an edge between nodes a and b with weight w.\n\nOutput:\nPrint a single integer — the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef bfs(start, adj, n):\n    \"\"\"\n    Breadth-first search that returns the farthest node from `start`\n    and its distance. Works for weighted tree using queue since all\n    edge weights are positive – we still need to process neighbours\n    once; tree guarantees single simple path between any two nodes.\n    \"\"\"\n    dist = [-1] * (n + 1)\n    dist[start] = 0\n    q = deque([start])\n    far_node = start\n\n    while q:\n        v = q.popleft()\n        for nxt, w in adj[v]:\n            if dist[nxt] == -1:\n                dist[nxt] = dist[v] + w\n                q.append(nxt)\n                if dist[nxt] > dist[far_node]:\n                    far_node = nxt\n    return far_node, dist[far_node]\n\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a = int(next(it)); b = int(next(it)); w = int(next(it))\n        adj[a].append((b, w))\n        adj[b].append((a, w))\n\n    # First BFS to find farthest from an arbitrary node (1)\n    u, _ = bfs(1, adj, n)\n\n    # Second BFS from that farthest node to get the diameter length\n    _, diameter = bfs(u, adj, n)\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string consisting of lowercase English letters. Find the length of the longest substring that contains at most two distinct characters.\n\nInput Format:\n- The first line contains a single string s (1 ≤ |s| ≤ 10^5).\n\nOutput Format:\n- Output a single integer: the length of the longest valid substring.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substr_two_distinct(s: str) -> int:\n    counts = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        counts[ch] += 1\n\n        # Shrink window until we have at most 2 distinct characters\n        while len(counts) > 2:\n            counts[s[left]] -= 1\n            if counts[s[left]] == 0:\n                del counts[s[left]]\n            left += 1\n\n        best = max(best, right - left + 1)\n\n    return best\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_substr_two_distinct(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, determine if there exists a pair of distinct elements whose sum is equal to a given target value. Print \"YES\" if such a pair exists, otherwise print \"NO\".\n\nInput Format:\n- The first line contains two integers n and target (1 ≤ n ≤ 10^5, |target| ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9).\n\nOutput Format:\n- Output a single line: \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    target = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n\n    seen = set()\n    for x in arr:\n        if (target - x) in seen:\n            print(\"YES\")\n            return\n        seen.add(x)\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n vertices and m edges, determine if the graph contains a cycle.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices u and v.\n\nOutput:\nOutput \"Yes\" if the graph contains a cycle, otherwise output \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n + 1))\n    size = [1] * (n + 1)\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]     # Path compression (halving)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False          # Already in same set -> cycle if edge repeated\n        if size[ra] < size[rb]:   # Union by size\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n        return True\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if not union(u, v):\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the length of the longest substring that contains no repeated characters.\nInput Format:\nThe first line contains a string S (1 ≤ |S| ≤ 10^5).\nOutput Format:\nOutput a single integer, the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring_length(s: str) -> int:\n    last_pos = {}          # Stores last seen position of each character\n    left = 0               # Left boundary of the current window\n    max_len = 0\n\n    for right, ch in enumerate(s):\n        # If the character was seen in the current window, move `left`\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().rstrip('\\n')\n    print(longest_unique_substring_length(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N positive integers, find the smallest positive integer that is not present in the list.\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N positive integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6).\nOutput:\nPrint the smallest positive integer not present in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:1 + n])\n\n    present = set(nums)\n\n    # The smallest missing positive integer cannot be larger than n + 1\n    # (pigeonhole principle).\n    for candidate in range(1, n + 2):\n        if candidate not in present:\n            print(candidate)\n            return\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of N integers. Find the smallest positive integer that does not appear in the list.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^6).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^6).\n\nOutput:\nPrint the smallest positive integer not in the list.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = map(int, data[1:])\n\n    # Since every a_i ≤ 1_000_000, the answer is at most 1_000_001\n    limit = 1_000_001 + 1          # +1 so index = value works up to 1_000_001\n    present = bytearray(limit + 1) # index 0 unused\n\n    for x in nums:\n        if 0 < x <= limit:\n            present[x] = 1\n\n    # find first index i where present[i] == 0, starting from 1\n    for i in range(1, limit + 1):\n        if not present[i]:\n            print(i)\n            return\n\n    # In practice we should never get here because the answer is bounded,\n    # but adding for completeness:\n    print(limit + 1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring of s that contains at most two distinct characters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\nThe second line contains the string s of length n.\n\nOutput:\nOutput a single integer, the length of the longest substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip() if len(data) > 1 else \"\"\n    # Sliding window with at most two distinct characters\n    counts = defaultdict(int)\n    left = 0\n    best = 0\n\n    for right, ch in enumerate(s):\n        counts[ch] += 1\n        # Shrink window until it contains at most two distinct characters\n        while len(counts) > 2:\n            left_ch = s[left]\n            counts[left_ch] -= 1\n            if counts[left_ch] == 0:\n                del counts[left_ch]\n            left += 1\n        best = max(best, right - left + 1)\n\n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a sequence of N numbers. Find the number of pairs (i, j) such that i < j and A_i + A_j is divisible by K.\n\nInput:\n- The first line contains two integers N and K (1 ≤ N ≤ 2*10^5, 1 ≤ K ≤ 10^9).\n- The second line contains N integers A_1, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    remainder_count = defaultdict(int)   # counts of each remainder seen so far\n    pairs = 0\n\n    for num in nums:\n        r = num % k\n        complement = (k - r) % k        # remainder that complements r to 0 mod k\n        pairs += remainder_count[complement]\n        remainder_count[r] += 1\n\n    print(pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, find the minimal length of a contiguous subarray whose sum is greater than or equal to a given integer s. If no such subarray exists, output 0.\n\nInput Format:\n- The first line contains two integers n and s (1 ≤ n ≤ 10^5, 1 ≤ s ≤ 10^9).\n- The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput Format:\n- Print a single integer: the minimal length of the subarray, or 0 if no valid subarray exists.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_subarray_len(s, nums):\n    n = len(nums)\n    min_len = n + 1  # initialize to something larger than any possible length\n    current_sum = 0\n    left = 0\n    \n    for right in range(n):\n        current_sum += nums[right]\n        \n        # shrink window from the left as long as the sum is >= s\n        while current_sum >= s:\n            current_window_len = right - left + 1\n            if current_window_len < min_len:\n                min_len = current_window_len\n            current_sum -= nums[left]\n            left += 1\n    \n    return 0 if min_len == n + 1 else min_len\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, s = map(int, data[:2])\n    nums = list(map(int, data[2:2+n]))\n    \n    result = min_subarray_len(s, nums)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S. Determine if it is possible to rearrange the characters of S to form a palindrome.\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 1000), consisting of lowercase English letters.\n\nOutput Format:\n- Print \"YES\" if it is possible to rearrange S into a palindrome, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import Counter\n\ndef can_form_palindrome(s: str) -> bool:\n    \"\"\"\n    Returns True if the characters of `s` can be rearranged to form a palindrome.\n    \"\"\"\n    freq = Counter(s)\n    odd_count = sum(1 for c in freq.values() if c % 2)\n    # For a palindrome, there can be at most one character with an odd count.\n    return odd_count <= 1\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(\"YES\" if can_form_palindrome(s) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven n tasks, each with a start time and an end time, find the minimum number of rooms required so that no two tasks assigned to the same room overlap in time.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nEach of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9), representing the start and end times of a task.\n\nOutput:\nPrint a single integer: the minimum number of rooms required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport heapq\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    intervals = [(int(next(it)), int(next(it))) for _ in range(n)]\n    \n    # Sort intervals by start time\n    intervals.sort(key=lambda x: x[0])\n\n    # Min-heap to keep track of current end times of occupied rooms\n    heap = []\n    max_rooms = 0\n\n    for start, end in intervals:\n        # Free every room whose task ended not later than current start\n        while heap and heap[0] <= start:\n            heapq.heappop(heap)\n        # Occupy one room for current task\n        heapq.heappush(heap, end)\n        # Update the maximal simultaneous rooms used\n        if len(heap) > max_rooms:\n            max_rooms = len(heap)\n\n    print(max_rooms)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string s consisting of lowercase English letters. Find the length of the longest substring that contains at most two distinct characters.\n\nInput:\nThe first line contains the string s (1 ≤ |s| ≤ 10^5).\n\nOutput:\nPrint a single integer, the length of the longest substring with at most two distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import defaultdict\n\ndef longest_substring_two_distinct(s: str) -> int:\n    \"\"\"\n    Returns the length of the longest substring of `s`\n    that contains at most two distinct characters.\n    \"\"\"\n    left = 0\n    max_len = 0\n    freq = defaultdict(int)\n\n    for right, ch in enumerate(s):\n        freq[ch] += 1\n\n        # shrink window until we have at most 2 distinct characters\n        while len(freq) > 2:\n            left_char = s[left]\n            freq[left_char] -= 1\n            if freq[left_char] == 0:\n                del freq[left_char]\n            left += 1\n\n        max_len = max(max_len, right - left + 1)\n\n    return max_len\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(longest_substring_two_distinct(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes rooted at node 1. Each node has a value assigned to it. Find the maximum sum of values along any path in the tree.\n\nInput:\nThe first line contains a single integer N (2 ≤ N ≤ 10^5).\nThe second line contains N integers V_1, V_2, ..., V_N (−10^4 ≤ V_i ≤ 10^4), the values of the nodes.\nEach of the next N−1 lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer, the maximum sum of values along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    sys.setrecursionlimit(300000)\n    inp = sys.stdin.readline\n\n    # Read number of nodes\n    n_line = inp()\n    while n_line.strip() == \"\":\n        n_line = inp()\n    n = int(n_line)\n\n    # Read node values (1-indexed)\n    values = [0] + list(map(int, inp().split()))\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = map(int, inp().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # Global variable to keep the answer\n    max_path_sum = -10**18       # smaller than minimum possible answer\n\n    def dfs(u: int, parent: int) -> int:\n        \"\"\"\n        Returns the maximum path sum that starts at node `u` and goes\n        downward into its subtree.\n        While unwinding, updates `max_path_sum` with the best overall path\n        found so far (which can pass through `u` and join two subtrees).\n        \"\"\"\n        nonlocal max_path_sum\n        # Two best downward contributions from the children of `u`\n        best1 = 0      # largest positive contribution\n        best2 = 0      # second largest positive contribution\n\n        for v in adj[u]:\n            if v == parent:\n                continue\n            child_down = dfs(v, u)\n\n            # We only care about positive contributions for combining paths\n            if child_down > best1:\n                best2 = best1\n                best1 = child_down\n            elif child_down > best2:\n                best2 = child_down\n\n        # Possible paths involving node u\n        node_val = values[u]\n        # 1) Path only consists of u\n        # 2) Path extends from u into one child\n        # 3) Path goes through u connecting two subtrees\n        max_path_sum = max(max_path_sum,\n                           node_val,\n                           node_val + best1,\n                           node_val + best1 + best2)\n\n        # Return the best downward path starting at u\n        return node_val + max(0, best1)\n\n    # Run DFS from the root (1). The tree is connected, so every node is visited.\n    dfs(1, 0)\n\n    print(max_path_sum)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Find the number of distinct ways to express N as the sum of consecutive positive integers.\n\nInput:\nA single integer N (1 ≤ N ≤ 10^{12}).\n\nOutput:\nPrint a single integer — the number of ways to represent N as a sum of consecutive positive integers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef count_odd_divisors(n: int) -> int:\n    \"\"\"\n    Returns the number of odd divisors of n.\n    \"\"\"\n    # strip all factors of 2 – they do not influence odd divisors\n    while n % 2 == 0:\n        n //= 2\n\n    cnt = 1                       # start with divisor 1\n    i = 3\n    limit = math.isqrt(n)\n    while i <= limit and n > 1:\n        if n % i == 0:\n            exp = 0\n            while n % i == 0:\n                n //= i\n                exp += 1\n            cnt *= (exp + 1)      # (e+1) ways to choose power of prime i\n            limit = math.isqrt(n) # shrink search space\n        i += 2                    # only odd i\n\n    if n > 1:                     # remaining prime factor (odd)\n        cnt *= 2                  # exponent is 1  ⇒  (1+1)=2\n\n    return cnt\n\n\ndef main() -> None:\n    n_str = sys.stdin.readline().strip()\n    if not n_str:\n        return\n    N = int(n_str)\n    print(count_odd_divisors(N))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, print all its divisors in increasing order.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^6).\n\nOutput Format:\n- Print all divisors of n in increasing order, separated by spaces.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef main():\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    \n    small = []\n    large = []\n    limit = int(math.isqrt(n))\n    \n    for i in range(1, limit + 1):\n        if n % i == 0:\n            small.append(i)\n            if i != n // i:          # avoid duplicating the square root when n is a perfect square\n                large.append(n // i)\n    \n    # Combine results: small factors are already in ascending order,\n    # large factors collected in descending order, so reverse them first.\n    divisors = small + large[::-1]\n    \n    print(\" \".join(map(str, divisors)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine whether the graph is bipartite.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput:\nPrint \"YES\" if the graph is bipartite, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]          # 1-based indexing\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        if u == v:                            # self-loop ⇒ not bipartite\n            print(\"NO\")\n            return\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [0] * (n + 1)                     # 0 = unvisited, 1 / -1 = two colors\n    for start in range(1, n + 1):\n        if color[start] != 0:\n            continue\n        color[start] = 1\n        q = deque([start])\n        while q:\n            node = q.popleft()\n            for nei in adj[node]:\n                if color[nei] == 0:\n                    color[nei] = -color[node]\n                    q.append(nei)\n                elif color[nei] == color[node]:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two positive integers n and k, determine if it is possible to represent n as the sum of exactly k positive odd integers.\nInput Format:\n- The first line contains two integers n and k (1 ≤ n, k ≤ 10^9).\nOutput Format:\n- Output \"YES\" if it is possible, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read two integers n and k\n    data = sys.stdin.readline().strip().split()\n    if len(data) < 2:          # handle possible empty input line breaks\n        data += sys.stdin.readline().strip().split()\n    n, k = map(int, data)\n\n    # Condition 1: minimal possible sum of k positive odd numbers is k (k times 1)\n    if n < k:\n        print(\"NO\")\n        return\n\n    # Condition 2: parity of the sum of k odd numbers equals parity of k\n    if (n % 2) != (k % 2):\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the length of the shortest contiguous subarray whose sum is at least k. If no such subarray exists, print -1.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\nThe second line contains n integers a_i (−10^9 ≤ a_i ≤ 10^9).\n\nOutput:\nPrint a single integer — the length of the shortest such subarray, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n\n    # Read the array\n    arr = [int(next(it)) for _ in range(n)]\n\n    # Prefix sums: P[0] = 0, P[i] = sum of first i elements\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] = prefix[i - 1] + arr[i - 1]\n\n    ans = n + 1                       # larger than any possible sub-array length\n    dq = deque()                      # will store indices with increasing prefix sums\n\n    for j in range(n + 1):\n        # Maintain condition: current prefix - smallest prefix >= k\n        while dq and prefix[j] - prefix[dq[0]] >= k:\n            ans = min(ans, j - dq[0])\n            dq.popleft()\n\n        # Maintain increasing order of prefix values in deque\n        while dq and prefix[j] <= prefix[dq[-1]]:\n            dq.pop()\n\n        dq.append(j)\n\n    print(ans if ans <= n else -1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n integers. For each element, find the number of elements to its right that are smaller than it.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2×10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput n integers, the i-th of which is the number of elements to the right of a_i that are smaller than a_i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nclass Fenwick:\n    def __init__(self, size: int):\n        self.n = size\n        self.bit = [0] * (self.n + 1)\n\n    def add(self, idx: int, delta: int = 1):\n        while idx <= self.n:\n            self.bit[idx] += delta\n            idx += idx & -idx\n\n    def sum(self, idx: int) -> int:\n        res = 0\n        while idx:\n            res += self.bit[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:]))\n\n    # Coordinate compression\n    sorted_unique = sorted(set(a))\n    # compressed index will be 1-based\n    def rank(x):  # helper using bisect\n        return bisect.bisect_left(sorted_unique, x) + 1\n\n    m = len(sorted_unique)\n    bit = Fenwick(m)\n\n    res = [0] * n\n    for i in range(n - 1, -1, -1):\n        r = rank(a[i])\n        res[i] = bit.sum(r - 1)      # count of smaller elements so far\n        bit.add(r, 1)                # insert current element\n\n    sys.stdout.write(' '.join(map(str, res)))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size n × m consisting of '.' (empty) and '#' (blocked) cells. Count the number of distinct paths from the top-left to the bottom-right corner of the grid, moving only down or right and not passing through blocked cells. Output the answer modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains a string of length m consisting of '.' and '#'.\n\nOutput:\nPrint a single integer: the number of distinct valid paths modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 10**9 + 7\n\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:]\n    \n    # If the start or end cell is blocked there are no paths\n    if grid[0][0] == '#' or grid[n-1][m-1] == '#':\n        print(0)\n        return\n    \n    # Use a 1-dimensional DP array to save memory\n    dp = [0] * m\n    dp[0] = 1  # start position\n    \n    for i in range(n):\n        row = grid[i]\n        for j in range(m):\n            if row[j] == '#':\n                dp[j] = 0  # can't stand on a blocked cell\n            else:\n                if j:  # add paths from the left cell\n                    dp[j] = (dp[j] + dp[j-1]) % MOD\n                # when j == 0, dp[j] already contains the paths from above\n    print(dp[-1] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, print all possible ways to write n as a sum of positive integers, where order matters.\n\nInput:\nThe first line contains a single integer n (1 ≤ n ≤ 20).\n\nOutput:\nOutput each possible ordered sum on a separate line. Each sum should be written as space-separated integers. Output the total number of ways in the last line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Read input\n    line = sys.stdin.readline()\n    if not line:\n        return\n    n = int(line.strip())\n\n    # To keep current composition\n    current = []\n\n    # Counter for total number of compositions\n    total = 0\n\n    # Depth-first search to generate compositions\n    def dfs(remaining: int):\n        nonlocal total\n        if remaining == 0:                   # one valid composition finished\n            sys.stdout.write(' '.join(map(str, current)) + '\\n')\n            total += 1\n            return\n        # Choose next part from remaining down to 1\n        for i in range(remaining, 0, -1):\n            current.append(i)\n            dfs(remaining - i)\n            current.pop()\n\n    dfs(n)\n\n    # Print total number of ways\n    sys.stdout.write(str(total) + '\\n')\n\n\n# Call main\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine the number of connected components.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 2×10^4).\n- The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\n\nOutput Format:\n- Print a single integer, the number of connected components in the graph.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # adjacency list\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    visited = [False] * (n + 1)\n    components = 0\n\n    for node in range(1, n + 1):\n        if not visited[node]:\n            components += 1\n            # BFS to mark all nodes in this component\n            queue = deque([node])\n            visited[node] = True\n            while queue:\n                cur = queue.popleft()\n                for nbr in adj[cur]:\n                    if not visited[nbr]:\n                        visited[nbr] = True\n                        queue.append(nbr)\n\n    print(components)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N consisting of lowercase English letters. Find the length of the longest substring that contains no repeating characters.\nInput:\nThe first line contains the integer N (1 ≤ N ≤ 10^5).\nThe second line contains the string S.\nOutput:\nPrint a single integer: the length of the longest substring with all unique characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef longest_unique_substring(s: str) -> int:\n    \"\"\"\n    Sliding-window algorithm to find the longest substring\n    without repeating characters.\n    \"\"\"\n    last_seen = {}          # char -> last index where it appeared\n    left = 0                # left edge of current window\n    best = 0\n\n    for right, ch in enumerate(s):\n        if ch in last_seen and last_seen[ch] >= left:\n            # duplicate found inside current window; shrink from the left\n            left = last_seen[ch] + 1\n        last_seen[ch] = right\n        best = max(best, right - left + 1)\n    return best\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    # First line is N, second line is the string\n    # (Trust the input for correct format; ignore N as len(s) is authoritative.)\n    s = data[1].rstrip('\\n') if len(data) > 1 else ''\n    ans = longest_unique_substring(s)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, determine if there exists a subarray with sum exactly k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9).\n- The second line contains n integers arr[1], ..., arr[n] (|arr[i]| ≤ 10^9).\n\nOutput Format:\n- Output \"YES\" if such a subarray exists, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    k = int(data[1])\n    arr = list(map(int, data[2:2 + n]))\n    \n    prefix_sum = 0\n    seen = {0}          # prefix sums encountered so far\n    \n    for num in arr:\n        prefix_sum += num\n        if (prefix_sum - k) in seen:\n            print(\"YES\")\n            return\n        seen.add(prefix_sum)\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (nodes are numbered 1 to N), and each edge has a weight, find the length of the longest path in the tree (the diameter of the tree).\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- The next N-1 lines each contain three integers u, v, w, representing an edge between nodes u and v of weight w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^4).\n\nOutput Format:\n- Output a single integer: the length of the longest path in the tree.\n\nConstraints:\n- 2 ≤ N ≤ 10^5\n- 1 ≤ w ≤ 10^4\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef farthest_node(start, adj, n):\n    \"\"\"\n    Returns the node farthest from `start` and its distance using\n    an iterative DFS (stack) to avoid recursion depth issues.\n    \"\"\"\n    stack = [(start, -1, 0)]            # (current_node, parent, distance_so_far)\n    max_dist = 0\n    far_node = start\n    while stack:\n        node, parent, dist = stack.pop()\n        if dist > max_dist:\n            max_dist = dist\n            far_node = node\n        for nei, w in adj[node]:\n            if nei != parent:\n                stack.append((nei, node, dist + w))\n    return far_node, max_dist\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:        # no input\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: 1-indexed\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # 1st pass: from arbitrary node (1) find farthest node\n    a, _ = farthest_node(1, adj, n)\n    \n    # 2nd pass: from that farthest node find the maximum distance (diameter)\n    _, diameter = farthest_node(a, adj, n)\n    \n    # Output result\n    print(diameter)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Find the number of distinct ways to express N as the sum of consecutive positive integers.\n\nInput Format:\n- The only line contains a single integer N (1 ≤ N ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the number of ways to write N as the sum of two or more consecutive positive integers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef odd_divisors_count(n: int) -> int:\n    \"\"\"\n    Return the number of odd divisors of n.\n    \"\"\"\n    # strip all factors of 2 – they do not influence odd divisors\n    while n % 2 == 0:\n        n //= 2\n\n    count = 1                       # current number of divisors\n    p = 3\n    # factor the remaining odd part\n    while p * p <= n:\n        if n % p == 0:\n            exp = 0\n            while n % p == 0:\n                n //= p\n                exp += 1\n            count *= (exp + 1)      # for prime power p^exp, add (exp+1) choices\n        p += 2\n    if n > 1:                       # leftover prime > sqrt(original n)\n        count *= 2\n    return count\n\n\ndef main() -> None:\n    n = int(sys.stdin.readline().strip())\n\n    # total ways with lengths ≥ 1  ==  number of odd divisors\n    total = odd_divisors_count(n)\n    # exclude the single-term representation\n    ways = max(0, total - 1)\n\n    print(ways)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid with N rows and M columns, each cell containing a lowercase English letter. Find the number of distinct words of length exactly K that can be formed by moving from any cell to any adjacent cell (up, down, left, right) without revisiting cells.\n\nInput Format:\nThe first line contains three integers N, M, K (1 ≤ N, M ≤ 8, 1 ≤ K ≤ N*M).\nEach of the next N lines contains M lowercase English letters.\n\nOutput Format:\nOutput a single integer, the number of distinct words of length K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(10000)\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    M = int(next(it))\n    K = int(next(it))\n    grid = [list(next(it)) for _ in range(N)]\n\n    # Special-case: length 1 – just count distinct letters in the board\n    if K == 1:\n        letters = {c for row in grid for c in row}\n        print(len(letters))\n        return\n\n    words = set()                      # keeps all distinct words\n    visited = [[False]*M for _ in range(N)]\n    dirs = ((1,0),(-1,0),(0,1),(0,-1))\n\n    def dfs(x: int, y: int, depth: int, path: str) -> None:\n        \"\"\"\n        depth – current length of the word (number of letters in *path*)\n        \"\"\"\n        visited[x][y] = True\n        if depth == K:                 # finished a word\n            words.add(path)\n            visited[x][y] = False\n            return\n\n        for dx, dy in dirs:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny]:\n                dfs(nx, ny, depth + 1, path + grid[nx][ny])\n\n        visited[x][y] = False          # back-track\n\n    for i in range(N):\n        for j in range(M):\n            dfs(i, j, 1, grid[i][j])\n\n    print(len(words))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes (numbered 1 through N). Each node has a value. Find the maximum sum of values on any path in the tree.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^5).\nThe second line contains N integers v_1, v_2, ..., v_N (−10^4 ≤ v_i ≤ 10^4), the values of the nodes.\nEach of the next N−1 lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge between nodes u and v.\n\nOutput:\nPrint a single integer: the maximum sum of values along any path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(300000)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    values = [0] + [int(next(it)) for _ in range(n)]          # 1-based\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it))\n        adj[u].append(v)\n        adj[v].append(u)\n\n    ans = -10**18                                                   # global answer\n\n    def dfs(u: int, p: int) -> int:\n        nonlocal ans\n        best_down = values[u]       # best path sum that starts at u and goes downward\n        top1 = 0                    # largest positive child contribution\n        top2 = 0                    # second largest positive child contribution\n\n        for v in adj[u]:\n            if v == p:\n                continue\n            down = dfs(v, u)        # best downward path starting at child v\n\n            # update best_down (only one branch can be taken downward)\n            best_down = max(best_down, values[u] + down)\n\n            # keep two largest child contributions (only positives matter for \"through\" paths)\n            if down > top1:\n                top2 = top1\n                top1 = down\n            elif down > top2:\n                top2 = down\n\n        # candidate path that passes through u possibly using two branches\n        through_u = values[u]\n        if top1 > 0:\n            through_u += top1\n        if top2 > 0:\n            through_u += top2\n\n        # update global maximum\n        ans = max(ans, through_u, best_down)\n        return best_down\n\n    dfs(1, 0)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a directed graph with N nodes and M edges, determine whether it contains a cycle. If it does, print \"YES\"; otherwise, print \"NO\".\n\nInput:\nThe first line contains two integers N and M (1 ≤ N ≤ 10^5, 0 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), representing a directed edge from u to v.\n\nOutput:\nPrint \"YES\" if the graph contains a cycle, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    indeg = [0] * (n + 1)\n\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append(v)\n        indeg[v] += 1\n\n    q = deque([i for i in range(1, n + 1) if indeg[i] == 0])\n    processed = 0\n\n    while q:\n        node = q.popleft()\n        processed += 1\n        for nxt in adj[node]:\n            indeg[nxt] -= 1\n            if indeg[nxt] == 0:\n                q.append(nxt)\n\n    if processed == n:\n        print(\"NO\")   # acyclic\n    else:\n        print(\"YES\")  # cycle exists\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n positive integers, can you partition the array into two subsets with equal sum? Print \"YES\" if possible, otherwise print \"NO\".\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 1000).\n- The second line contains n integers a_1, ..., a_n (1 ≤ a_i ≤ 10^5).\nOutput Format:\n- Print \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:n+1]))\n    \n    total = sum(nums)\n    # If total sum is odd, equal partition is impossible\n    if total & 1:\n        print(\"NO\")\n        return\n    \n    target = total // 2\n    \n    # Bit-set DP: bit i of `bits` is 1  <=>  sum i is reachable\n    bits = 1  # only sum 0 is reachable at start\n    \n    for x in nums:\n        # add current number to every previously reachable sum\n        bits |= bits << x\n        # keep only the lowest (target + 1) bits – we never need larger sums\n        if bits.bit_length() > target + 1:\n            bits &= (1 << (target + 1)) - 1\n    \n    # if bit `target` is 1 then target sum is achievable\n    print(\"YES\" if (bits >> target) & 1 else \"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, where each edge has a weight, compute the sum of distances from the root to every other node in the tree.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the total sum of distances from the root to all other nodes.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Increase recursion limit just in case (not strictly needed with iterative DFS)\n    sys.setrecursionlimit(300_000)\n\n    data = sys.stdin.buffer.read().split()\n    if not data:                           # empty input guard\n        return\n\n    it = iter(data)\n    n = int(next(it))\n\n    # Build adjacency list for weighted tree\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # Iterative DFS/BFS from root (node 1)\n    stack = [(1, 0)]          # (current_node, distance_from_root)\n    visited = [False] * (n + 1)\n    visited[1] = True\n\n    total_distance = 0\n    while stack:\n        node, dist = stack.pop()\n        total_distance += dist\n        for neighbor, weight in adj[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                stack.append((neighbor, dist + weight))\n\n    sys.stdout.write(str(total_distance))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Find the number of distinct substrings in S.\n\nInput:\nThe first line contains a single string S (1 ≤ |S| ≤ 2000).\n\nOutput:\nOutput a single integer — the number of distinct substrings in S.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass State:\n    __slots__ = ('next', 'link', 'length')\n    def __init__(self):\n        self.next = {}      # transitions: char -> state index\n        self.link = -1      # suffix link\n        self.length = 0     # max length of strings in this state\n\n\ndef count_distinct_substrings(s: str) -> int:\n    \"\"\"\n    Builds a suffix automaton for the string `s`\n    and returns the number of distinct substrings in `s`.\n    \"\"\"\n    # Initialise automaton with the root state (index 0)\n    states = [State()]\n    last = 0   # index of state representing the whole current string\n\n    for ch in s:\n        # Create new state cur\n        cur = len(states)\n        states.append(State())\n        states[cur].length = states[last].length + 1\n\n        p = last\n        # Step 1: add transition p --ch--> cur for all states along the suffix chain\n        while p != -1 and ch not in states[p].next:\n            states[p].next[ch] = cur\n            p = states[p].link\n\n        # Step 2: set the suffix link of cur\n        if p == -1:                                # reached the root\n            states[cur].link = 0\n        else:\n            q = states[p].next[ch]                 # the state we would otherwise transition to\n            if states[p].length + 1 == states[q].length:\n                states[cur].link = q               # direct parent, nothing to clone\n            else:\n                # Need to clone `q`\n                clone = len(states)\n                states.append(State())\n                states[clone].next = states[q].next.copy()\n                states[clone].length = states[p].length + 1\n                states[clone].link = states[q].link\n\n                while p != -1 and states[p].next.get(ch) == q:\n                    states[p].next[ch] = clone\n                    p = states[p].link\n\n                states[q].link = states[cur].link = clone\n\n        last = cur\n\n    # Number of distinct substrings equals\n    # sum over states (len[v] - len[link[v]])\n    total = 0\n    for idx in range(1, len(states)):          # skip the root (idx 0)\n        link_idx = states[idx].link\n        link_len = 0 if link_idx == -1 else states[link_idx].length\n        total += states[idx].length - link_len\n    return total\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(count_distinct_substrings(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of n integers, determine if there exist three numbers whose sum is zero.\n\nInput Format:\nThe first line contains an integer n (3 ≤ n ≤ 3000).\nThe second line contains n integers a_1, a_2, ..., a_n (-10^5 ≤ a_i ≤ 10^5).\n\nOutput Format:\nPrint 'YES' if there exist such three numbers, otherwise print 'NO'.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:1 + n]))\n\n    arr.sort()                                     # O(n log n)\n\n    for i in range(n - 2):                         # fix the first element\n        # Optional small optimisation: if the current number is > 0,\n        # and array is sorted, further sums can't reach 0.\n        if arr[i] > 0:\n            break\n\n        left, right = i + 1, n - 1\n        target = -arr[i]\n\n        while left < right:                        # two–pointer search\n            s = arr[left] + arr[right]\n            if s == target:\n                print(\"YES\")\n                return\n            elif s < target:\n                left += 1\n            else:\n                right -= 1\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. Determine the minimum number of characters you must delete to make S a palindrome.\n\nInput:\n- The first line contains a single integer N (1 ≤ N ≤ 2000), the length of the string.\n- The second line contains the string S.\n\nOutput:\n- Output a single integer: the minimum number of deletions required.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef min_deletions_to_palindrome(s: str) -> int:\n    \"\"\"\n    Returns the minimum number of deletions required to turn `s` into a palindrome.\n    This is len(s) - LPS(s), where LPS is the Longest Palindromic Subsequence length.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return 0\n\n    # dp[j] will contain the LPS length for substring s[i..j] while iterating\n    dp = [0] * n\n\n    # Iterate substrings starting index from right to left\n    for i in range(n - 1, -1, -1):\n        dp[i] = 1                     # A single character is a palindrome of length 1\n        prev_diag = 0                 # value of dp[j-1] from previous iteration (i+1 row)\n        for j in range(i + 1, n):\n            temp = dp[j]              # store current dp[j] before overwriting\n            if s[i] == s[j]:\n                dp[j] = 2 + prev_diag # extend palindrome by matching pair\n            else:\n                dp[j] = max(dp[j], dp[j - 1])  # choose longer subsequence\n            prev_diag = temp          # update prev_diag for next column\n\n    lps_length = dp[-1]               # LPS for whole string\n    return n - lps_length\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    s = data[1] if len(data) > 1 else ''\n    # Ensure we only work with the first n characters (in case of extra input)\n    s = s[:n]\n    print(min_deletions_to_palindrome(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes (numbered 1 to n), where each edge has a positive integer weight, find the length of the longest path (the diameter) in the tree.\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n−1 lines contains three integers u, v, w, denoting an edge between nodes u and v with weight w (1 ≤ w ≤ 10^4).\n\nOutput Format:\n- Output a single integer, the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    \n    # adjacency list: node -> list of (neighbor, weight)\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it)); v = int(next(it)); w = int(next(it))\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    \n    # helper: returns (farthest_node, distance_to_that_node) from start\n    def farthest(start: int):\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        stack = [start]\n        far_node = start\n        \n        while stack:\n            node = stack.pop()\n            for nxt, w in adj[node]:\n                if dist[nxt] == -1:\n                    dist[nxt] = dist[node] + w\n                    stack.append(nxt)\n                    if dist[nxt] > dist[far_node]:\n                        far_node = nxt\n        return far_node, dist[far_node]\n    \n    # first DFS/BFS to find one endpoint of the diameter\n    endpoint, _ = farthest(1)\n    # second DFS/BFS from that endpoint to get the diameter length\n    _, diameter = farthest(endpoint)\n    \n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine if the graph is bipartite.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nThe next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge.\n\nOutput:\nPrint \"YES\" if the graph is bipartite, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef is_bipartite(n, m, edge_iter):\n    \"\"\"\n    n: number of vertices (1-based index)\n    m: number of edges\n    edge_iter: iterable yielding (u, v)\n    \"\"\"\n    adj = [[] for _ in range(n + 1)]\n\n    for u, v in edge_iter:\n        # self-loop immediately breaks bipartiteness\n        if u == v:\n            return False\n        adj[u].append(v)\n        adj[v].append(u)\n\n    color = [-1] * (n + 1)          # -1 = unvisited, 0/1 = two colors\n    q = deque()\n\n    for start in range(1, n + 1):\n        if color[start] != -1:       # already coloured via previous BFS\n            continue\n\n        color[start] = 0\n        q.append(start)\n\n        while q:\n            u = q.popleft()\n            cu = color[u]\n            for v in adj[u]:\n                if color[v] == -1:   # unvisited\n                    color[v] = cu ^ 1\n                    q.append(v)\n                elif color[v] == cu: # same color on adjacent vertices\n                    return False\n\n    return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    # Remaining numbers are edge endpoints\n    numbers = list(map(int, data[2:]))\n\n    # Build an iterator of pairs (u, v)\n    edge_pairs = zip(numbers[::2], numbers[1::2])\n\n    answer = \"YES\" if is_bipartite(n, m, edge_pairs) else \"NO\"\n    sys.stdout.write(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a matrix of size n x m consisting of only 0's and 1's, find the size of the largest square submatrix consisting only of 1's.\n\nInput:\nThe first line contains two integers n and m (1 ≤ n, m ≤ 1000).\nEach of the next n lines contains m characters (each character is '0' or '1').\n\nOutput:\nOutput a single integer, the size (side length) of the largest square submatrix of 1's.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    while data == '':\n        data = sys.stdin.readline().strip()\n    n, m = map(int, data.split())\n    \n    prev = [0] * (m + 1)          # DP values for previous row\n    best = 0                      # Largest square side length found\n    \n    for _ in range(n):\n        line = sys.stdin.readline().strip()\n        # Accept both “10101” and “1 0 1 0 1” formats\n        row = line.split() if ' ' in line else list(line)\n        \n        # In case of blank line (shouldn’t happen in correct input)\n        while len(row) < m:\n            row.extend(sys.stdin.readline().strip().split())\n        \n        curr = [0] * (m + 1)\n        for j in range(1, m + 1):\n            if row[j - 1] == '1':\n                curr[j] = 1 + min(prev[j], curr[j - 1], prev[j - 1])\n                if curr[j] > best:\n                    best = curr[j]\n            # else curr[j] stays 0\n        prev = curr                # move to next row\n    \n    print(best)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with n nodes and m edges, determine whether the graph contains a cycle.\nInput Format:\n- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v.\nOutput Format:\n- Output \"YES\" if the graph contains a cycle, otherwise output \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x: int) -> int:\n        while parent[x] != x:\n            parent[x] = parent[parent[x]]  # path compression (halving)\n            x = parent[x]\n        return x\n\n    def union(a: int, b: int) -> bool:\n        ra, rb = find(a), find(b)\n        if ra == rb:\n            return False          # union failed → cycle detected\n        if size[ra] < size[rb]:   # union by size\n            ra, rb = rb, ra\n        parent[rb] = ra\n        size[ra] += size[rb]\n        return True\n\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        if u == v or not union(u, v):  # self-loop or union failure\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of N integers and an integer K. Find the maximum sum of any contiguous subarray of the array whose length is exactly K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_sum_subarray_k(arr, k):\n    \"\"\"Return the maximum sum of any contiguous sub-array of length exactly k.\"\"\"\n    # Initialize the first window\n    window_sum = sum(arr[:k])\n    max_sum = window_sum\n\n    # Slide the window through the array\n    for i in range(k, len(arr)):\n        window_sum += arr[i]       # add the next element\n        window_sum -= arr[i - k]   # remove the element going out of the window\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum\n\n\ndef main():\n    data = sys.stdin.read().strip().split()\n    if not data:           # no input\n        return\n    n, k = map(int, data[:2])\n    arr = list(map(int, data[2:2 + n]))\n    print(max_sum_subarray_k(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with N nodes (1-indexed). Each edge has a weight. Your task is to answer Q queries. Each query gives two nodes u and v. For each, output the sum of edge weights on the unique path from u to v.\n\nInput Format:\n- The first line contains an integer N (2 ≤ N ≤ 10^5).\n- Each of the next N-1 lines contains three integers a, b, w (1 ≤ a, b ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between a and b of weight w.\n- The next line contains an integer Q (1 ≤ Q ≤ 10^5).\n- Each of the next Q lines contains two integers u and v (1 ≤ u, v ≤ N).\n\nOutput Format:\n- For each query, output the path sum on a new line.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    it = iter(data)\n    n = next(it)                                # number of nodes\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a = next(it)\n        b = next(it)\n        w = next(it)\n        adj[a].append((b, w))\n        adj[b].append((a, w))\n\n    LOG = (n).bit_length()\n    up = [[0] * (n + 1) for _ in range(LOG)]   # binary-lifting table\n    depth = [0] * (n + 1)                      # depth from root\n    dist = [0] * (n + 1)                       # distance from root\n\n    # iterative DFS to fill depth, dist and up[0]\n    stack = [(1, 0)]  # (node, parent)\n    while stack:\n        node, parent = stack.pop()\n        up[0][node] = parent\n        for nxt, w in adj[node]:\n            if nxt == parent:\n                continue\n            depth[nxt] = depth[node] + 1\n            dist[nxt] = dist[node] + w\n            stack.append((nxt, node))\n\n    # build full lifting table\n    for k in range(1, LOG):\n        row_prev = up[k - 1]\n        row_cur = up[k]\n        half = 1 << (k - 1)\n        for v in range(1, n + 1):\n            mid = row_prev[v]\n            row_cur[v] = row_prev[mid] if mid else 0\n\n    def lca(u: int, v: int) -> int:\n        # ensure depth[u] >= depth[v]\n        if depth[u] < depth[v]:\n            u, v = v, u\n        # lift u up to depth v\n        diff = depth[u] - depth[v]\n        k = 0\n        while diff:\n            if diff & 1:\n                u = up[k][u]\n            diff >>= 1\n            k += 1\n        if u == v:\n            return u\n        for k in range(LOG - 1, -1, -1):\n            if up[k][u] != up[k][v]:\n                u = up[k][u]\n                v = up[k][v]\n        return up[0][u]\n\n    q = next(it)                               # number of queries\n    out_lines = []\n    for _ in range(q):\n        u = next(it)\n        v = next(it)\n        anc = lca(u, v)\n        path_sum = dist[u] + dist[v] - 2 * dist[anc]\n        out_lines.append(str(path_sum))\n\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a string s consisting of lowercase English letters, determine the length of the longest substring without repeating characters.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^5), the length of the string.\n- The second line contains the string s of length n.\n\nOutput Format:\n- Print a single integer: the length of the longest substring of s with all distinct characters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main() -> None:\n    import sys\n\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n\n    n = int(data[0].strip())           # length of the string (can be ignored in logic)\n    if n == 0:\n        print(0)\n        return\n\n    if len(data) < 2:                  # no string provided\n        print(0)\n        return\n\n    s = data[1].rstrip('\\n')\n\n    last_pos = {}          # maps character -> last index seen\n    left = 0               # left end of the current window\n    best = 0               # best window size found\n\n    for right, ch in enumerate(s):\n        # If character repeats inside current window, move the left boundary\n        if ch in last_pos and last_pos[ch] >= left:\n            left = last_pos[ch] + 1\n        last_pos[ch] = right\n        best = max(best, right - left + 1)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Count the number of pairs of positive integers (a, b) such that 1 ≤ a < b ≤ n and (a + b) is divisible by 3.\n\nInput Format:\nThe first line contains a single integer n (2 ≤ n ≤ 10^6).\n\nOutput Format:\nOutput a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    # counts of numbers with remainders 0, 1 and 2 modulo 3 in the range [1, n]\n    base = n // 3\n    rem  = n % 3\n\n    c0 = base\n    c1 = base + (1 if rem >= 1 else 0)\n    c2 = base + (1 if rem == 2 else 0)\n\n    # pairs (a, b):   (0,0)  or  (1,2)\n    pairs_00 = c0 * (c0 - 1) // 2      # choose any 2 different numbers ≡ 0 (mod 3)\n    pairs_12 = c1 * c2                 # choose one number ≡ 1 and one ≡ 2 (order irrelevant)\n\n    result = pairs_00 + pairs_12\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, each edge has a weight. Find the length of the longest path in the tree (the diameter).\n\nInput Format:\n- The first line contains an integer n (2 ≤ n ≤ 10^5).\n- Each of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^4), denoting an edge between nodes u and v with weight w.\n\nOutput Format:\n- Output a single integer: the length of the longest path in the tree.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n\n    # adjacency list: g[u] = list of (v, w)\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u = int(next(it))\n        v = int(next(it))\n        w = int(next(it))\n        g[u].append((v, w))\n        g[v].append((u, w))\n\n    # helper that returns (farthest_node, distances)\n    def bfs(start: int):\n        dist = [-1] * (n + 1)\n        dist[start] = 0\n        q = deque([start])\n        far_node = start\n\n        while q:\n            u = q.popleft()\n            for v, w in g[u]:\n                if dist[v] == -1:\n                    dist[v] = dist[u] + w\n                    q.append(v)\n                    if dist[v] > dist[far_node]:\n                        far_node = v\n        return far_node, dist\n\n    # first BFS/DFS from any node (1) to find one endpoint of diameter\n    endpoint1, _ = bfs(1)\n\n    # second BFS/DFS from that endpoint to find the real diameter length\n    endpoint2, dist_from_ep1 = bfs(endpoint1)\n    diameter = dist_from_ep1[endpoint2]\n\n    print(diameter)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m consisting of empty cells (.) and blocked cells (#), find the number of distinct ways to move from the top-left corner to the bottom-right corner, moving only right or down, and never stepping on a blocked cell. Output the answer modulo 10^9+7.\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- The next n lines each contain a string of length m representing the grid.\nOutput Format:\n- Output a single integer: the number of ways modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = data[1:1 + n]\n\n    # dp[j] = number of ways to reach current cell in column j (1-based) of current row\n    dp = [0] * (m + 1)           # extra leading zero simplifies left-neighbor handling\n    dp[1] = 1 if grid[0][0] == '.' else 0   # start position\n\n    for i in range(1, n + 1):\n        row = grid[i - 1]\n        for j in range(1, m + 1):\n            if i == 1 and j == 1:\n                continue                      # start already initialized\n            if row[j - 1] == '#':\n                dp[j] = 0                     # blocked cell: zero ways\n            else:\n                dp[j] = (dp[j] + dp[j - 1]) % MOD   # from top (dp[j]) + from left (dp[j-1])\n\n    print(dp[m] % MOD)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, find the smallest integer greater than n that has exactly the same digits as n (in any order). If no such number exists, print -1.\n\nInput:\nA single integer n (1 ≤ n ≤ 10^9).\n\nOutput:\nPrint the smallest integer greater than n with the same digits, or -1 if it does not exist.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef next_permutation(digits):\n    \"\"\"\n    Transform the list of digits to its next lexicographical permutation.\n    Returns True if such permutation exists, otherwise returns False.\n    \"\"\"\n    # Step 1: find the longest non-increasing suffix\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n\n    # Entire sequence is non-increasing → already the last permutation\n    if i == -1:\n        return False\n\n    # Step 2: find rightmost successor to pivot\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n\n    # Step 3: swap pivot with successor\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # Step 4: reverse the suffix\n    digits[i + 1:] = reversed(digits[i + 1:])\n    return True\n\n\ndef main():\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n\n    digits = list(map(int, str(n)))\n\n    if next_permutation(digits):\n        # Build number back from digit list\n        result = 0\n        for d in digits:\n            result = result * 10 + d\n        print(result)\n    else:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an integer n, count the number of ways to write n as a sum of positive integers, where the order of addends does not matter (i.e., count the number of integer partitions of n).\n\nInput Format:\n- A single integer n (1 ≤ n ≤ 100).\n\nOutput Format:\n- Output a single integer, the number of unordered ways to write n as a sum of positive integers.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef partitions(n: int) -> int:\n    \"\"\"\n    Returns the number of integer partitions of n\n    (number of ways to write n as a sum of positive integers, disregarding order).\n    Dynamic-programming (O(n^2)).\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1                    # There is one way to partition 0: the empty sum\n    for addend in range(1, n + 1):\n        for s in range(addend, n + 1):\n            dp[s] += dp[s - addend]\n    return dp[n]\n\ndef main() -> None:\n    n_str = sys.stdin.readline().strip()\n    if not n_str:\n        return\n    n = int(n_str)\n    print(partitions(n))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an undirected graph with n nodes and m edges. Each edge has a positive integer weight. Your task is to find the weight of the minimum spanning tree (MST) of the graph. If the graph is disconnected, print -1.\n\nInput Format:\n- The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5).\n- Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9), representing an edge between nodes u and v with weight w.\n\nOutput Format:\n- Print a single integer: the weight of the minimum spanning tree, or -1 if the graph is disconnected.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nclass DSU:\n    \"\"\"Disjoint Set Union with path compression and union by size.\"\"\"\n    __slots__ = ('parent', 'size', 'components')\n    \n    def __init__(self, n: int):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.components = n\n\n    def find(self, x: int) -> int:\n        while self.parent[x] != x:\n            self.parent[x] = self.parent[self.parent[x]]  # Path halving\n            x = self.parent[x]\n        return x\n\n    def union(self, a: int, b: int) -> bool:\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return False\n        if self.size[ra] < self.size[rb]:\n            ra, rb = rb, ra\n        self.parent[rb] = ra\n        self.size[ra] += self.size[rb]\n        self.components -= 1\n        return True\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    \n    edges = []\n    for _ in range(m):\n        u = int(next(it)) - 1\n        v = int(next(it)) - 1\n        w = int(next(it))\n        edges.append((w, u, v))\n    \n    edges.sort()                          # Kruskal: sort by weight\n    dsu = DSU(n)\n    mst_weight = 0\n    edges_used = 0\n    \n    for w, u, v in edges:\n        if dsu.union(u, v):\n            mst_weight += w\n            edges_used += 1\n            if edges_used == n - 1:       # Early stop if MST complete\n                break\n    \n    if edges_used == n - 1:\n        print(mst_weight)\n    else:\n        print(-1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, and each node has a value assigned. For each node, find the sum of values in its subtree (including itself).\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 2 × 10^5).\nThe second line contains n integers v_1, v_2, ..., v_n (1 ≤ v_i ≤ 10^4).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge in the tree.\n\nOutput:\nPrint n integers: the i-th number is the sum of values in the subtree rooted at node i.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    # Increase recursion limit just in case (though we use an explicit stack)\n    sys.setrecursionlimit(1 << 25)\n\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n = data[0]\n    values = [0] + data[1:n + 1]          # 1-indexed: values[i] is the value of node i\n\n    # Build adjacency list\n    adj = [[] for _ in range(n + 1)]\n    idx = n + 1\n    for _ in range(n - 1):\n        u, v = data[idx], data[idx + 1]\n        idx += 2\n        adj[u].append(v)\n        adj[v].append(u)\n\n    subtree_sum = [0] * (n + 1)           # answer array\n\n    # Iterative DFS with explicit stack to avoid Python recursion depth issues\n    stack = [(1, 0, False)]               # (node, parent, processed_children_flag)\n    while stack:\n        node, parent, done = stack.pop()\n        if not done:\n            # First time we see the node: push it back marked as done,\n            # then push its children.\n            stack.append((node, parent, True))\n            for nei in adj[node]:\n                if nei != parent:\n                    stack.append((nei, node, False))\n        else:\n            # All children are processed -> compute subtree sum\n            total = values[node]\n            for nei in adj[node]:\n                if nei != parent:\n                    total += subtree_sum[nei]\n            subtree_sum[node] = total\n\n    # Output\n    sys.stdout.write(' '.join(str(subtree_sum[i]) for i in range(1, n + 1)))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, determine whether it is possible to rearrange the array such that the sum of every pair of adjacent elements is even. If it is possible, output \"YES\"; otherwise, output \"NO\".\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9).\n\nOutput:\nOutput \"YES\" or \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n\n    n = int(data[0])\n    nums = list(map(int, data[1:]))\n\n    # Count parities\n    evens = sum(1 for x in nums if x & 1 == 0)\n    odds = n - evens\n\n    # A sequence of length ≥2 can have all adjacent sums even\n    # only if all numbers share the same parity.\n    # For n == 1, the condition is vacuously true.\n    if n == 1 or evens == 0 or odds == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a connected undirected graph with n nodes and m edges, determine the minimum number of edges you need to add to make the graph Eulerian (i.e., every vertex has even degree).\n\nInput:\nThe first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2×10^5).\nEach of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) denoting an edge.\n\nOutput:\nPrint a single integer — the minimum number of edges that must be added.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n\n    # degree array\n    deg = [0] * (n + 1)\n\n    # read edges and update degree parity\n    for _ in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        deg[u] ^= 1     # we only need parity, so XOR with 1 is enough\n        deg[v] ^= 1\n\n    odd_cnt = sum(deg)      # number of vertices with odd degree\n    print(odd_cnt // 2)     # each added edge fixes two odd degrees\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n integers. Find the length of the longest subsequence such that the absolute difference between any two consecutive elements is at most k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 2 × 10^5, 0 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the length of the longest valid subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left, bisect_right\n\n\n# -------- segment tree for range maximum --------\nclass SegTree:\n    def __init__(self, n):\n        size = 1\n        while size < n:\n            size <<= 1\n        self.size = size\n        self.data = [0] * (2 * size)\n\n    # set position p to max(current, value)\n    def update(self, p: int, value: int):\n        p += self.size\n        if value <= self.data[p]:\n            return\n        self.data[p] = value\n        p //= 2\n        while p:\n            self.data[p] = max(self.data[p * 2], self.data[p * 2 + 1])\n            p //= 2\n\n    # maximum on [l, r]  (inclusive)\n    def query(self, l: int, r: int) -> int:\n        if l > r:\n            return 0\n        l += self.size\n        r += self.size\n        res = 0\n        while l <= r:\n            if l & 1:\n                res = max(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = max(res, self.data[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\n\ndef main() -> None:\n    sys.setrecursionlimit(1_000_000)\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    k = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    # coordinate-compression of values\n    values = sorted(set(a))\n    m = len(values)\n\n    seg = SegTree(m)\n\n    ans = 0\n    for v in a:\n        # determine index range of values within [v-k, v+k]\n        left_idx = bisect_left(values, v - k)\n        right_idx = bisect_right(values, v + k) - 1\n\n        best = seg.query(left_idx, right_idx)\n        cur_len = best + 1\n\n        idx = bisect_left(values, v)          # compressed index of v\n        seg.update(idx, cur_len)\n\n        if cur_len > ans:\n            ans = cur_len\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N integers, find the number of pairs (i, j) such that i < j and A[i] + A[j] is divisible by K.\n\nInput Format:\n- The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^4).\n- The second line contains N space-separated integers (1 ≤ A[i] ≤ 10^9).\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\nConstraints:\n- 1 ≤ N ≤ 10^5\n- 1 ≤ K ≤ 10^4\n- 1 ≤ A[i] ≤ 10^9\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    N, K = data[0], data[1]\n    arr = data[2:2 + N]            # take exactly N numbers\n\n    # frequency of each remainder modulo K\n    freq = [0] * K\n    for val in arr:\n        freq[val % K] += 1\n\n    # pairs where both numbers have remainder 0\n    ans = freq[0] * (freq[0] - 1) // 2\n\n    # handle remaining remainders\n    half = K // 2\n    for r in range(1, half + 1):\n        s = K - r\n        if r == s:                 # works only when K is even and r == K/2\n            ans += freq[r] * (freq[r] - 1) // 2\n        else:\n            ans += freq[r] * freq[s]\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer n. Find the number of pairs of distinct positive integers (a, b) such that 1 ≤ a < b ≤ n and a divides b.\n\nInput:\nA single integer n (2 ≤ n ≤ 10^6).\n\nOutput:\nPrint a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    n_line = sys.stdin.readline()\n    n = int(n_line.strip())\n    \n    # We need the sum over all a of (floor(n / a) - 1)\n    # floor(n / a) counts how many multiples of a are ≤ n,\n    # and subtracting 1 excludes the trivial multiple a itself.\n    total_pairs = 0\n    for a in range(1, n + 1):\n        total_pairs += n // a - 1\n    \n    print(total_pairs)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given n points on a 2D plane. Find the pair of points with the smallest Euclidean distance between them.\n\nInput Format:\n- The first line contains a single integer n (2 ≤ n ≤ 10^5).\n- The next n lines each contain two integers x and y (−10^9 ≤ x, y ≤ 10^9) representing the coordinates of each point.\n\nOutput Format:\n- Output a single floating point number: the minimum distance between any two points, with at least 6 decimal places.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys, math\nsys.setrecursionlimit(1 << 25)\n\nINF = 10 ** 30  # something larger than any possible squared distance\n\n\ndef dist2(p1, p2):\n    dx = p1[0] - p2[0]\n    dy = p1[1] - p2[1]\n    return dx * dx + dy * dy\n\n\ndef closest_pair(px, py):\n    \"\"\"\n    px : list of points sorted by x  (each point is (x, y, id))\n    py : same points sorted by y\n    returns the minimal squared distance inside this set\n    \"\"\"\n    n = len(px)\n    if n <= 3:\n        best = INF\n        for i in range(n):\n            for j in range(i + 1, n):\n                best = min(best, dist2(px[i], px[j]))\n        return best\n\n    mid = n // 2\n    midx = px[mid][0]\n\n    left_px = px[:mid]\n    right_px = px[mid:]\n\n    left_ids = {p[2] for p in left_px}\n\n    left_py, right_py = [], []\n    for p in py:\n        if p[2] in left_ids:\n            left_py.append(p)\n        else:\n            right_py.append(p)\n\n    d_left = closest_pair(left_px, left_py)\n    d_right = closest_pair(right_px, right_py)\n    d = min(d_left, d_right)\n\n    # Build strip: points within sqrt(d) of vertical line x = midx\n    strip = [p for p in py if (p[0] - midx) ** 2 < d]\n\n    m = len(strip)\n    for i in range(m):\n        # Check next points up to 7 positions ahead (property of plane geometry)\n        j = i + 1\n        while j < m and (strip[j][1] - strip[i][1]) ** 2 < d:\n            d = min(d, dist2(strip[i], strip[j]))\n            j += 1\n\n    return d\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    points = []\n    for idx in range(n):\n        x = int(next(it))\n        y = int(next(it))\n        points.append((x, y, idx))  # store original index for uniqueness\n\n    px = sorted(points, key=lambda p: (p[0], p[1]))\n    py = sorted(points, key=lambda p: (p[1], p[0]))\n\n    best_sq = closest_pair(px, py)\n    best = math.sqrt(best_sq)\n    # print with at least 6 decimal places\n    print(\"{:.6f}\".format(best))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N integers, find the maximum sum that can be obtained by selecting a subsequence such that no two selected numbers are adjacent in the original list.\n\nInput:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers a_1, a_2, ..., a_N (−10^4 ≤ a_i ≤ 10^4).\n\nOutput:\nOutput a single integer — the maximum sum possible under the given condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef max_non_adjacent_sum(arr):\n    \"\"\"\n    Returns the maximum possible sum of a subsequence with\n    no two chosen elements adjacent in the original array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    # Track the largest element – needed when every element is negative\n    max_elem = max(arr)\n\n    # Standard House-Robber DP (O(1) space)\n    prev_prev = 0          # optimal for prefix ending two positions before\n    prev = 0               # optimal for prefix ending one position before\n    for val in arr:\n        current = max(prev, prev_prev + val)\n        prev_prev, prev = prev, current\n\n    # If every element is negative, we must pick (at least) one element.\n    if max_elem < 0:\n        return max_elem\n    return prev\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    nums = list(map(int, data[1:1 + n]))\n    result = max_non_adjacent_sum(nums)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, count the number of ways to arrange n distinct objects in a row such that no two selected objects are adjacent, where exactly k objects are selected. Output the answer modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5).\n\nOutput:\nOutput a single integer — the number of valid arrangements modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\ndef precompute_factorials(limit: int):\n    \"\"\"pre–compute factorials and inverse factorials up to `limit` (inclusive).\"\"\"\n    fact = [1] * (limit + 1)\n    for i in range(1, limit + 1):\n        fact[i] = fact[i - 1] * i % MOD\n\n    inv_fact = [1] * (limit + 1)\n    inv_fact[limit] = pow(fact[limit], MOD - 2, MOD)          # Fermat little theorem\n    for i in range(limit, 0, -1):\n        inv_fact[i - 1] = inv_fact[i] * i % MOD\n\n    return fact, inv_fact\n\n\ndef nCr(n: int, r: int, fact, inv_fact):\n    \"\"\"binomial coefficient n choose r modulo MOD\"\"\"\n    if r < 0 or r > n:\n        return 0\n    return fact[n] * inv_fact[r] % MOD * inv_fact[n - r] % MOD\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, k = map(int, data)\n\n    # impossible if k objects cannot be separated\n    if k > n:\n        print(0)\n        return\n\n    fact, inv_fact = precompute_factorials(n)\n\n    # answer = n! * C(n - k + 1, k)  (mod MOD)\n    ways_gaps = nCr(n - k + 1, k, fact, inv_fact)\n    ans = fact[n] * ways_gaps % MOD\n    print(ans)\n\n\n# call the main function\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two positive integers N and K, determine whether it is possible to partition the integer N into exactly K positive integers such that all integers in the partition are distinct. If possible, output any such partition; otherwise, output -1.\n\nInput:\nThe first line contains two integers N and K (1 ≤ K ≤ N ≤ 10^9).\n\nOutput:\nIf such a partition exists, output K space-separated positive distinct integers. Otherwise, output -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    N, K = map(int, data)\n\n    # Minimal possible sum of K distinct positive integers: 1 + 2 + ... + K\n    min_sum = K * (K + 1) // 2\n\n    if N < min_sum:                         # impossible to reach N\n        print(-1)\n        return\n\n    # Extra amount we can distribute\n    extra = N - min_sum\n\n    if K == 1:                              # only one number in the partition\n        print(N)\n        return\n\n    # Output numbers 1, 2, …, K-1, and (K + extra)\n    out = []\n    write = sys.stdout.write\n    for i in range(1, K):\n        write(f\"{i} \")\n    write(f\"{K + extra}\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven N points with integer coordinates on a 2D plane, determine if any three points are collinear.\n\nInput:\nThe first line contains an integer N (3 ≤ N ≤ 2000).\nEach of the next N lines contains two integers x_i and y_i (-10^6 ≤ x_i, y_i ≤ 10^6).\n\nOutput:\nOutput \"Yes\" if there exist three collinear points, otherwise output \"No\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef normalized_direction(dx: int, dy: int):\n    \"\"\"\n    Return a pair (dy', dx') that uniquely represents the\n    direction of the vector (dx, dy).\n    \"\"\"\n    if dx == 0 and dy == 0:       # identical points – handled earlier\n        return None\n\n    g = math.gcd(abs(dx), abs(dy))\n    dx //= g\n    dy //= g\n\n    # Fix the sign so every geometric direction is stored once\n    if dx < 0:\n        dx *= -1\n        dy *= -1\n    elif dx == 0:                 # vertical lines → make dy either 1 or -1\n        dy = 1 if dy > 0 else -1\n\n    return (dy, dx)\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n  = int(next(it))\n    pts = [(int(next(it)), int(next(it))) for _ in range(n)]\n\n    # O(N²) check: fix a point, look for duplicate slopes\n    for i in range(n):\n        xi, yi = pts[i]\n        seen = set()\n        for j in range(n):\n            if i == j:\n                continue\n            dx = pts[j][0] - xi\n            dy = pts[j][1] - yi\n\n            # Same coordinates → at least two identical points.\n            # Together with any third point they are collinear.\n            if dx == 0 and dy == 0:\n                print(\"Yes\")\n                return\n\n            key = normalized_direction(dx, dy)\n            if key in seen:\n                print(\"Yes\")\n                return\n            seen.add(key)\n\n    print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes, rooted at node 1, each edge has a weight. For Q queries, each consisting of two nodes u and v, find the sum of edge weights on the path from u to v.\nInput:\nThe first line contains two integers N and Q (2 ≤ N ≤ 10^5, 1 ≤ Q ≤ 10^5).\nThe next N-1 lines each contain three integers a, b, w (1 ≤ a, b ≤ N, 1 ≤ w ≤ 10^6), denoting an edge between a and b with weight w.\nThe next Q lines each contain two integers u and v (1 ≤ u, v ≤ N).\nOutput:\nFor each query, print the sum of edge weights on the path from u to v.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom collections import deque\n\ndef main():\n    data = sys.stdin.buffer.read().split()\n    it = iter(data)\n    n = int(next(it))\n    q = int(next(it))\n\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a = int(next(it)); b = int(next(it)); w = int(next(it))\n        adj[a].append((b, w))\n        adj[b].append((a, w))\n\n    LOG = math.ceil(math.log2(n)) + 1\n    up = [[0] * (n + 1) for _ in range(LOG)]\n    depth = [0] * (n + 1)\n    dist = [0] * (n + 1)\n\n    # BFS to fill depth, dist, first ancestor\n    stack = [1]\n    parent = [0] * (n + 1)\n    parent[1] = 1\n    while stack:\n        node = stack.pop()\n        for nei, w in adj[node]:\n            if nei == parent[node]:\n                continue\n            parent[nei] = node\n            depth[nei] = depth[node] + 1\n            dist[nei] = dist[node] + w\n            stack.append(nei)\n\n    for v in range(1, n + 1):\n        up[0][v] = parent[v]\n\n    for k in range(1, LOG):\n        row_prev = up[k - 1]\n        row_cur = up[k]\n        for v in range(1, n + 1):\n            row_cur[v] = row_prev[row_prev[v]]\n\n    def lca(u, v):\n        if depth[u] < depth[v]:\n            u, v = v, u\n        diff = depth[u] - depth[v]\n        k = 0\n        while diff:\n            if diff & 1:\n                u = up[k][u]\n            diff >>= 1\n            k += 1\n        if u == v:\n            return u\n        for k in range(LOG - 1, -1, -1):\n            if up[k][u] != up[k][v]:\n                u = up[k][u]\n                v = up[k][v]\n        return parent[u]\n\n    out_lines = []\n    for _ in range(q):\n        u = int(next(it)); v = int(next(it))\n        w = lca(u, v)\n        out_lines.append(str(dist[u] + dist[v] - 2 * dist[w]))\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size N x M filled with lowercase letters. Find the length of the longest path such that no letter is repeated and you can only move to adjacent cells (up, down, left, right).\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 20).\nEach of the next N lines contains M lowercase English letters.\n\nOutput Format:\nPrint a single integer: the length of the longest such path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# Increase recursion limit – the search depth is at most 26 but we stay safe\nsys.setrecursionlimit(100000)\n\ndef main() -> None:\n    # Read grid\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n, m = map(int, data[:2])\n    grid = data[2:]\n    \n    # Pre-compute letter -> bit\n    char_bit = [1 << i for i in range(26)]\n    \n    # Directions (up, down, left, right)\n    dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    best = 0                        # global best length found\n    \n    def dfs(r: int, c: int, mask: int, length: int) -> None:\n        nonlocal best\n        if length > best:\n            best = length\n            if best == 26:          # cannot beat 26, prune everything\n                return\n        \n        for dr, dc in dirs:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < m:\n                bit = char_bit[ord(grid[nr][nc]) - 97]\n                if not (mask & bit):                    # letter not used yet\n                    dfs(nr, nc, mask | bit, length + 1)\n    \n    # Start DFS from every cell (safest interpretation of the statement)\n    for i in range(n):\n        for j in range(m):\n            start_mask = char_bit[ord(grid[i][j]) - 97]\n            dfs(i, j, start_mask, 1)\n            if best == 26:          # early exit – cannot improve further\n                print(26)\n                return\n    \n    print(best)\n\n# ----------------------------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, find the smallest integer greater than n that has the same number of set bits (1s) in its binary representation.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the answer as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef next_with_same_ones(n: int) -> int:\n    \"\"\"\n    Return the smallest integer bigger than n that has the same\n    number of set bits (1-bits) in the binary representation.\n    \"\"\"\n    c = n\n\n    # count trailing zeros (c0)\n    c0 = 0\n    while (c & 1) == 0 and c != 0:\n        c0 += 1\n        c >>= 1\n\n    # count ones immediately to the left of the trailing zeros (c1)\n    c1 = 0\n    while (c & 1) == 1:\n        c1 += 1\n        c >>= 1\n\n    # position of right-most non-trailing zero\n    p = c0 + c1            # 0-based index\n\n    # Step 1: flip that zero to one\n    n |= (1 << p)\n\n    # Step 2: clear everything to the right of p\n    n &= ~((1 << p) - 1)\n\n    # Step 3: insert (c1-1) ones on the far right\n    n |= (1 << (c1 - 1)) - 1\n\n    return n\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    n = int(data)\n    print(next_with_same_ones(n))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with n nodes rooted at node 1, and an integer k, find the number of pairs of nodes (u, v) such that the length of the path between u and v is exactly k.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 2×10^5, 1 ≤ k ≤ n-1).\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting an edge.\n\nOutput:\nOutput a single integer, the number of such pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\n\ndef main() -> None:\n    from collections import defaultdict\n\n    inp = sys.stdin.readline\n    n, k = map(int, inp().split())\n    g = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, inp().split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n\n    removed = [False] * n\n    size = [0] * n\n    ans = 0\n\n    # ---------- helpers for centroid decomposition ----------\n    def dfs_size(u: int, p: int) -> int:\n        \"\"\"compute subtree sizes\"\"\"\n        size[u] = 1\n        for w in g[u]:\n            if w != p and not removed[w]:\n                size[u] += dfs_size(w, u)\n        return size[u]\n\n    def find_centroid(u: int, p: int, tot: int) -> int:\n        \"\"\"locate centroid of current component\"\"\"\n        for w in g[u]:\n            if w != p and not removed[w] and size[w] > tot // 2:\n                return find_centroid(w, u, tot)\n        return u\n\n    def collect_depths(u: int, p: int, d: int, buf: list) -> None:\n        \"\"\"gather depths (≤ k) for all nodes in this subtree\"\"\"\n        if d > k:       # deeper nodes can never make distance k\n            return\n        buf.append(d)\n        for w in g[u]:\n            if w != p and not removed[w]:\n                collect_depths(w, u, d + 1, buf)\n\n    # ---------- main decomposition ----------\n    def decompose(root: int) -> None:\n        nonlocal ans\n        tot = dfs_size(root, -1)\n        c = find_centroid(root, -1, tot)\n\n        depth_cnt = defaultdict(int)   # depth → how many nodes already seen\n        depth_cnt[0] = 1               # the centroid itself at depth 0\n\n        for nei in g[c]:\n            if removed[nei]:\n                continue\n            depths = []\n            collect_depths(nei, c, 1, depths)\n\n            # count pairs that use this centroid and one node from this subtree\n            for d in depths:\n                ans += depth_cnt.get(k - d, 0)\n\n            # after counting, add this subtree's depths to the global map\n            for d in depths:\n                depth_cnt[d] += 1\n\n        # recurse on smaller components\n        removed[c] = True\n        for nei in g[c]:\n            if not removed[nei]:\n                decompose(nei)\n\n    decompose(0)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a tree with N nodes (numbered 1 to N), and an integer K, determine the number of pairs of nodes (u, v) such that the shortest path between u and v passes through exactly K edges.\n\nInput Format:\n- The first line contains two integers N and K (2 ≤ N ≤ 2×10^5, 1 ≤ K < N).\n- Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), representing an edge of the tree.\n\nOutput Format:\n- Output a single integer: the number of valid pairs.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1_000_000)\n\ndef main() -> None:\n    import sys\n    input = sys.stdin.readline\n\n    n, K = map(int, input().split())\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, input().split())\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        adj[v].append(u)\n\n    removed = [False] * n          # node already taken as a centroid\n    sizes   = [0] * n              # subtree sizes for current decomposition step\n    ans     = [0]                  # answer wrapped into list to make it mutable in closure\n\n    # ---------- helpers for centroid decomposition ----------\n    def calc_subtree(u: int, p: int) -> None:\n        sizes[u] = 1\n        for v in adj[u]:\n            if v != p and not removed[v]:\n                calc_subtree(v, u)\n                sizes[u] += sizes[v]\n\n    def find_centroid(u: int, p: int, total: int) -> int:\n        for v in adj[u]:\n            if v != p and not removed[v] and sizes[v] > total // 2:\n                return find_centroid(v, u, total)\n        return u\n\n    # collect depths up to K from node `u`\n    def collect_depths(u: int, p: int, d: int, buf: list) -> None:\n        if d > K:\n            return\n        buf.append(d)\n        for v in adj[u]:\n            if v != p and not removed[v]:\n                collect_depths(v, u, d + 1, buf)\n\n    # main recursive decomposition\n    def decompose(entry: int) -> None:\n        calc_subtree(entry, -1)\n        ctd = find_centroid(entry, -1, sizes[entry])\n\n        cnt = {0: 1}          # depth -> number of nodes already processed (centroid at depth 0)\n\n        for nxt in adj[ctd]:\n            if removed[nxt]:\n                continue\n            depths = []\n            collect_depths(nxt, ctd, 1, depths)\n\n            # count pairs crossing through centroid (one node in current subtree, one already counted)\n            for d in depths:\n                if d <= K:\n                    ans[0] += cnt.get(K - d, 0)\n\n            # add current subtree depths to the map\n            for d in depths:\n                if d <= K:\n                    cnt[d] = cnt.get(d, 0) + 1\n\n        # recurse on the remaining components\n        removed[ctd] = True\n        for nxt in adj[ctd]:\n            if not removed[nxt]:\n                decompose(nxt)\n\n    decompose(0)\n    print(ans[0])\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an array of n positive integers. Find the minimum number of elements to remove so that the greatest common divisor (GCD) of the remaining elements is greater than 1. If not possible, output -1.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 10^5).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6).\n\nOutput Format:\n- Output a single integer as described above.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom collections import defaultdict\n\ndef build_spf(limit: int):\n    \"\"\"\n    Smallest Prime Factor sieve up to `limit`\n    \"\"\"\n    spf = list(range(limit + 1))\n    for i in range(2, int(limit ** 0.5) + 1):\n        if spf[i] == i:                     # i is prime\n            for j in range(i * i, limit + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    # If every element is 1 we can never get gcd > 1\n    if all(x == 1 for x in arr):\n        print(-1)\n        return\n\n    max_val = max(arr)\n    spf = build_spf(max_val)\n\n    prime_cnt = defaultdict(int)\n\n    for x in arr:\n        if x == 1:\n            continue\n        primes = set()\n        while x > 1:\n            p = spf[x]\n            primes.add(p)\n            while x % p == 0:\n                x //= p\n        for p in primes:\n            prime_cnt[p] += 1\n\n    max_group = max(prime_cnt.values(), default=0)   # should be ≥1 here\n    result = n - max_group\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given an integer N. Find the number of pairs of positive integers (a, b) such that 1 ≤ a < b ≤ N and a + b is divisible by 3.\n\nInput:\nThe first line contains an integer N (2 ≤ N ≤ 10^6).\n\nOutput:\nPrint the number of pairs (a, b) satisfying the condition.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\ndef main():\n    import sys\n\n    data = sys.stdin.readline().strip()\n    if not data:\n        return\n    N = int(data)\n\n    q, r = divmod(N, 3)          # q = N//3, r = N%3\n\n    c0 = q                       # numbers ≡ 0 (mod 3)\n    c1 = q + (1 if r >= 1 else 0)  # numbers ≡ 1 (mod 3)\n    c2 = q + (1 if r == 2 else 0)  # numbers ≡ 2 (mod 3)\n\n    # pairs: (0,0) and (1,2)\n    ans = c0 * (c0 - 1) // 2 + c1 * c2\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a list of N positive integers, find the minimum number of elements to remove so that the greatest common divisor (GCD) of the remaining elements is greater than 1. If it's impossible, output -1.\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 10^6).\nOutput Format:\nOutput a single integer, the minimum number of elements to remove, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\nfrom collections import defaultdict\n\n# Build smallest–prime–factor table up to 10^6\nMAX_A = 10 ** 6\nspf = list(range(MAX_A + 1))\nfor i in range(2, int(MAX_A ** 0.5) + 1):\n    if spf[i] == i:                       # i is prime\n        for j in range(i * i, MAX_A + 1, i):\n            if spf[j] == j:\n                spf[j] = i\n\n\ndef unique_prime_factors(x):\n    \"\"\"Yield distinct prime factors of x (x ≤ 10^6).\"\"\"\n    while x > 1:\n        p = spf[x]\n        yield p\n        while x % p == 0:\n            x //= p\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n\n    # If GCD of all numbers already > 1, nothing to remove\n    g = 0\n    for v in arr:\n        g = math.gcd(g, v)\n    if g > 1:\n        print(0)\n        return\n\n    # Count how many numbers are divisible by each prime\n    prime_cnt = defaultdict(int)\n    for v in arr:\n        if v == 1:\n            continue\n        seen = set()\n        for p in unique_prime_factors(v):\n            if p not in seen:\n                prime_cnt[p] += 1\n                seen.add(p)\n\n    if not prime_cnt:          # all numbers are 1 => impossible\n        print(-1)\n        return\n\n    keep = max(prime_cnt.values())\n    print(n - keep)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a grid of size N x M filled with lowercase letters. Find the number of distinct palindromic substrings that can be formed by reading any row or column of the grid.\n\nInput Format:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 500).\nEach of the next N lines contains a string of length M, representing a row of the grid.\n\nOutput Format:\nPrint a single integer: the number of distinct palindromic substrings occurring in any row or column.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef collect_palindromes(s: str, global_set: set):\n    \"\"\"\n    Palindromic tree (eertree) that inserts all distinct palindromic\n    substrings of `s` into `global_set` in O(len(s)) time.\n    \"\"\"\n    n = len(s)\n    # maximum possible number of nodes is n + 2\n    nxt = [{} for _ in range(n + 3)]   # transitions\n    length = [0] * (n + 3)             # length of palindrome represented by node\n    link = [0] * (n + 3)               # suffix link\n    # two roots\n    length[0] = -1     # root with length -1\n    length[1] = 0      # root with length 0\n    link[0] = 0\n    link[1] = 0\n    last = 1           # the node of the largest suffix‐palindrome of the current prefix\n    size = 2           # current number of nodes in the tree (next free index)\n\n    for pos, ch in enumerate(s):\n        cur = last\n        cur_len = length[cur]\n\n        # 1. find the maximal palindrome we can extend\n        while True:\n            if pos - 1 - cur_len >= 0 and s[pos - 1 - cur_len] == ch:\n                break\n            cur = link[cur]\n            cur_len = length[cur]\n\n        # 2. If the palindrome already exists just move `last`\n        if ch in nxt[cur]:\n            last = nxt[cur][ch]\n            continue\n\n        # 3. Otherwise create new node\n        nxt[cur][ch] = size\n        length[size] = length[cur] + 2\n        # record the palindrome string and put into the set\n        start = pos - length[size] + 1\n        global_set.add(s[start:pos + 1])\n\n        # 4. Set suffix link for the new node\n        if length[size] == 1:\n            link[size] = 1\n            last = size\n            size += 1\n            continue\n\n        link_candidate = link[cur]\n        while True:\n            cand_len = length[link_candidate]\n            if pos - 1 - cand_len >= 0 and s[pos - 1 - cand_len] == ch:\n                break\n            link_candidate = link[link_candidate]\n        link[size] = nxt[link_candidate][ch]\n        last = size\n        size += 1\n\n\ndef main() -> None:\n    data = sys.stdin.read().splitlines()\n    if not data:\n        return\n    N, M = map(int, data[0].split())\n    grid = data[1:1 + N]\n\n    pal_set = set()\n\n    # process rows\n    for row in grid:\n        collect_palindromes(row, pal_set)\n\n    # process columns\n    for col_idx in range(M):\n        column = ''.join(grid[row_idx][col_idx] for row_idx in range(N))\n        collect_palindromes(column, pal_set)\n\n    print(len(pal_set))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two positive integers n and k, construct a permutation of the integers from 1 to n such that there are exactly k local maxima (an index i is a local maximum if a[i] > a[i-1] and a[i] > a[i+1]). If no such permutation exists, output -1.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k < n/2).\n\nOutput Format:\n- Output n integers forming the required permutation, or -1 if impossible.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, k = map(int, data)\n\n    # maximum possible local maxima in a permutation of size n\n    max_peaks = (n - 1) // 2\n    if k > max_peaks:\n        print(-1)\n        return\n\n    # start with the increasing sequence 1..n\n    perm = list(range(1, n + 1))\n\n    # create k peaks by swapping (2,3), (4,5), (6,7) ...\n    for i in range(1, 2 * k, 2):      # i = 1,3,5,... (0-based indices)\n        perm[i], perm[i + 1] = perm[i + 1], perm[i]\n\n    print(*perm)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S of length N. Count the number of distinct palindromic substrings in S.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 2000).\nThe second line contains the string S, which consists of lowercase English letters.\n\nOutput Format:\nPrint a single integer: the number of distinct palindromic substrings in S.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef build_hashes(s, base, mod):\n    n = len(s)\n    pref = [0] * (n + 1)\n    power = [1] * (n + 1)\n    for i, ch in enumerate(s, 1):\n        pref[i] = (pref[i - 1] * base + (ord(ch) - 96)) % mod\n        power[i] = (power[i - 1] * base) % mod\n    return pref, power\n\ndef substring_hash(l, r, pref, power, mod):\n    # hash of s[l:r]  (r exclusive)\n    val = (pref[r] - pref[l] * power[r - l]) % mod\n    if val < 0:\n        val += mod\n    return val\n\ndef count_distinct_palindromes(s: str) -> int:\n    n = len(s)\n    BASE = 911382323\n    MOD1 = 1_000_000_007\n    MOD2 = 1_000_000_009\n\n    pref1, pow1 = build_hashes(s, BASE, MOD1)\n    pref2, pow2 = build_hashes(s, BASE, MOD2)\n\n    seen = set()\n\n    # helper to add palindrome substring defined by boundaries\n    def add(l, r):\n        h1 = substring_hash(l, r + 1, pref1, pow1, MOD1)\n        h2 = substring_hash(l, r + 1, pref2, pow2, MOD2)\n        seen.add((h1, h2, r - l + 1))\n\n    # odd length centers\n    for center in range(n):\n        l = r = center\n        while l >= 0 and r < n and s[l] == s[r]:\n            add(l, r)\n            l -= 1\n            r += 1\n\n    # even length centers\n    for center in range(n - 1):\n        l, r = center, center + 1\n        while l >= 0 and r < n and s[l] == s[r]:\n            add(l, r)\n            l -= 1\n            r += 1\n\n    return len(seen)\n\ndef main():\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n = int(data[0].strip())\n    s = data[1].strip()\n    print(count_distinct_palindromes(s))\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size n x m filled with lowercase English letters, find the number of distinct palindromic substrings that appear in any row or column of the grid.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 1000).\n- Each of the next n lines contains a string of length m representing a row of the grid.\n\nOutput Format:\n- Output a single integer, the number of distinct palindromic substrings in all rows and columns.\n\nConstraints:\n- 1 ≤ n, m ≤ 1000\n- The grid contains only lowercase English letters.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# ----------  Palindromic Tree (Eertree) ------------\nclass Eertree:\n    \"\"\"\n    Maintains all distinct palindromic substrings of the built string.\n    Each new character can be added in O(1) amortised time, and the number\n    of nodes created during the whole construction equals the amount of\n    distinct palindromic substrings (≤ length of the string).\n    \"\"\"\n\n    __slots__ = ('nodes', 'last', 's')\n\n    def __init__(self):\n        # node 0 : length -1   (imaginary odd length root)\n        # node 1 : length  0   (even length root)\n        self.nodes = [\n            {'len': -1, 'link': 0, 'next': {}, 'firstpos': -1},\n            {'len':  0, 'link': 0, 'next': {}, 'firstpos': -1}\n        ]\n        self.last = 1   # the node representing the longest suffix palindrome\n        self.s = []     # processed characters\n\n    def add_char(self, ch: str, pos: int):\n        \"\"\"Append character ch (its index in the total string is pos).\"\"\"\n        self.s.append(ch)\n        cur = self.last\n        # Step 1 : find the largest suffix-palindrome of (current_string + ch)\n        while True:\n            cur_len = self.nodes[cur]['len']\n            if pos - 1 - cur_len >= 0 and self.s[pos - 1 - cur_len] == ch:\n                break\n            cur = self.nodes[cur]['link']\n\n        # Step 2 : Did we already add this palindrome?\n        nxt = self.nodes[cur]['next'].get(ch)\n        if nxt is None:                       # new distinct palindrome found\n            new_len = self.nodes[cur]['len'] + 2\n            # find suffix link for the new node\n            if new_len == 1:                  # palindrome of length 1 → link to node 1 (len 0)\n                link = 1\n            else:\n                link_candidate = self.nodes[cur]['link']\n                while True:\n                    cand_len = self.nodes[link_candidate]['len']\n                    if pos - 1 - cand_len >= 0 and self.s[pos - 1 - cand_len] == ch:\n                        break\n                    link_candidate = self.nodes[link_candidate]['link']\n                link = self.nodes[link_candidate]['next'][ch]\n\n            self.nodes.append({'len': new_len, 'link': link, 'next': {}, 'firstpos': pos})\n            nxt = len(self.nodes) - 1\n            self.nodes[cur]['next'][ch] = nxt\n\n        self.last = nxt\n\n\n# ----------  Hashing utilities ---------------------\nMASK = (1 << 64) - 1            # we operate modulo 2^64 (natural overflow)\nBASE = 911382323                # an arbitrary odd base > 256\n\n\ndef build_prefix_hash(s: str):\n    \"\"\"return list h where h[i] is hash of s[:i] (0-based, exclusive).\"\"\"\n    h = [0] * (len(s) + 1)\n    cur = 0\n    for i, ch in enumerate(s):\n        cur = ((cur * BASE) + ord(ch)) & MASK\n        h[i + 1] = cur\n    return h\n\n\ndef substring_hash(pref, pow_base, l: int, r: int):\n    \"\"\"hash of s[l:r] given prefix list pref (mod 2^64).\"\"\"\n    return (pref[r] - (pref[l] * pow_base[r - l] & MASK)) & MASK\n\n\n# ----------  Main processing of one string ----------\ndef process_string(s: str, pow_base, global_set):\n    pref = build_prefix_hash(s)\n    tree = Eertree()\n    for idx, ch in enumerate(s):\n        tree.add_char(ch, idx)\n\n    # For every distinct palindrome (node 2 .. end) store (length, hash)\n    for node in tree.nodes[2:]:\n        length = node['len']\n        pos = node['firstpos']\n        start = pos - length + 1\n        h_sub = substring_hash(pref, pow_base, start, pos + 1)\n        global_set.add((length, h_sub))\n\n\n# ----------  Driver --------------------------------\ndef main() -> None:\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = [row.strip() for row in data[1:n + 1]]\n\n    max_len = max(n, m)  # maximal length of any row/column (≤ 1000)\n    pow_base = [1] * (max_len + 1)\n    for i in range(1, max_len + 1):\n        pow_base[i] = (pow_base[i - 1] * BASE) & MASK\n\n    global_set = set()\n\n    # rows\n    for row in grid:\n        process_string(row, pow_base, global_set)\n\n    # columns\n    for col in range(m):\n        col_chars = [grid[r][col] for r in range(n)]\n        process_string(''.join(col_chars), pow_base, global_set)\n\n    print(len(global_set))\n\n\n# ----- mandatory call -----\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M filled with 0s and 1s, find the number of rectangles formed by only 1s. Rectangles must have sides parallel to the axes.\n\nInput:\n- The first line contains two integers N and M (1 ≤ N, M ≤ 500).\n- Each of the following N lines contains M integers (0 or 1) separated by spaces.\n\nOutput:\n- Output a single integer: the number of rectangles.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    it = iter(data)\n    n = next(it)\n    m = next(it)\n\n    # read matrix\n    grid = [[next(it) for _ in range(m)] for _ in range(n)]\n\n    ans = 0\n\n    # For every possible top row\n    for top in range(n):\n        # col_all[c] == 1  -> column c is all 1's between current top and current bottom\n        col_all = [1] * m\n\n        # Extend the bottom row one step at a time\n        for bottom in range(top, n):\n            row = grid[bottom]\n            run = 0               # length of current consecutive 'good' columns segment\n\n            # Update col_all and count rectangles in one pass\n            for c in range(m):\n                col_all[c] &= row[c]      # keep 1 only if current cell is 1\n                if col_all[c]:\n                    run += 1\n                    ans += run            # add number of rectangles ending at column c\n                else:\n                    run = 0               # broken segment\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a grid of size N x M filled with lowercase letters, find the length of the longest path such that each cell in the path contains a different letter, starting from any cell. You can move up, down, left, or right.\n\nInput:\nThe first line contains two integers N and M (1 ≤ N, M ≤ 20).\nEach of the next N lines contains M lowercase English letters.\n\nOutput:\nOutput a single integer — the length of the longest such path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\n# Directions: up, down, left, right\nDIRS = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\ndef main() -> None:\n    sys.setrecursionlimit(1_000_000)\n    data = sys.stdin.read().strip().split()\n    if not data:                         # empty input guard\n        return\n    n, m = map(int, data[:2])\n\n    # read the grid\n    grid = data[2: 2 + n]\n\n    # quickest-possible answer is 26 (all different letters)\n    BEST = 0                            # global maximum wrapped in list for inner scope\n\n    def dfs(x: int, y: int, mask: int, depth: int) -> None:\n        nonlocal BEST\n        if depth > BEST:\n            BEST = depth\n            if BEST == 26:              # cannot do better – early exit\n                return\n\n        # explore neighbours\n        for dx, dy in DIRS:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m:\n                bit = 1 << (ord(grid[nx][ny]) - 97)\n                if not (mask & bit):    # new letter\n                    dfs(nx, ny, mask | bit, depth + 1)\n                    if BEST == 26:      # propagate early-exit upward\n                        return\n\n    # start DFS from every cell\n    for i in range(n):\n        for j in range(m):\n            if BEST == 26:              # already optimal\n                print(26)\n                return\n            start_bit = 1 << (ord(grid[i][j]) - 97)\n            dfs(i, j, start_bit, 1)\n\n    print(BEST)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a list of n pairs of integers. Find the size of the largest subset of pairs such that for every pair (a, b) and (c, d) in the subset, either a < c and b < d, or a > c and b > d.\n\nInput Format:\n- The first line contains an integer n (1 ≤ n ≤ 500).\n- Each of the next n lines contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput Format:\n- Output a single integer, the size of the largest such subset.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\ndef longest_monotone_chain(pairs):\n    \"\"\"\n    Length of the longest chain with strictly increasing\n    first and second coordinates.\n    \"\"\"\n    # Sort by a ascending; for equal a take b descending\n    pairs.sort(key=lambda x: (x[0], -x[1]))\n\n    tails = []                          # patience-sorting tails on b\n    for _, b in pairs:\n        idx = bisect_left(tails, b)     # strict increase → bisect_left\n        if idx == len(tails):\n            tails.append(b)\n        else:\n            tails[idx] = b\n    return len(tails)\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    pairs = [(int(next(it)), int(next(it))) for _ in range(n)]\n\n    # Longest chain where both coordinates increase\n    inc = longest_monotone_chain(pairs.copy())\n\n    # Longest chain where both coordinates decrease:\n    #   same as increasing chain on (-a, -b)\n    dec_pairs = [(-a, -b) for a, b in pairs]\n    dec = longest_monotone_chain(dec_pairs)\n\n    print(max(inc, dec))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a string S consisting of lowercase English letters. You can perform the following operation at most once: select any non-empty substring and reverse it. Output the lexicographically smallest string you can obtain.\n\nInput Format:\n- The first line contains a string S (1 ≤ |S| ≤ 2 × 10^5).\n\nOutput Format:\n- Output the lexicographically smallest string possible after at most one reversal operation.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef smallest_by_one_reverse(s: str) -> str:\n    n = len(s)\n    if n == 1:\n        return s\n\n    # suffix minimal character and its right-most position\n    min_char = [''] * n\n    min_pos  = [0]  * n\n\n    min_char[-1] = s[-1]\n    min_pos[-1]  = n - 1\n\n    for i in range(n - 2, -1, -1):\n        if s[i] < min_char[i + 1]:\n            # current char is new (strictly) smaller minimum\n            min_char[i] = s[i]\n            min_pos[i]  = i\n        elif s[i] == min_char[i + 1]:\n            # equal – keep the right-most occurrence\n            min_char[i] = s[i]\n            min_pos[i]  = i          # right-most between i and suffix\n        else:\n            # suffix keeps the minimum\n            min_char[i] = min_char[i + 1]\n            min_pos[i]  = min_pos[i + 1]\n\n    # find the first index that can be improved\n    for i in range(n - 1):\n        if s[i] > min_char[i + 1]:\n            j = min_pos[i + 1]            # right-most smallest letter further right\n            return s[:i] + s[i:j + 1][::-1] + s[j + 1:]\n\n    # already minimal\n    return s\n\n\ndef main() -> None:\n    s = sys.stdin.readline().strip()\n    print(smallest_by_one_reverse(s))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an n x m grid filled with digits from 0 to 9, find the largest number you can obtain by starting from any cell and moving to adjacent (up, down, left, right) cells without revisiting any cell, concatenating the digits along the path. Output the largest number as a string.\n\nInput Format:\n- The first line contains two integers n and m (1 ≤ n, m ≤ 10).\n- Each of the next n lines contains m digits (0-9) with no spaces.\n\nOutput Format:\n- Output the largest number as a string.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(10000)\n\ndef main() -> None:\n    import sys\n\n    # --- read ---------------------------------------------------------------\n    data = sys.stdin.read().strip().splitlines()\n    if not data:\n        return\n    n, m = map(int, data[0].split())\n    grid = [list(row.strip()) for row in data[1:1 + n]]\n\n    tot = n * m                                   # maximal possible length\n    # convert 2-D coordinate to single integer (0 … n*m-1)\n    def idx(r, c):\n        return r * m + c\n\n    # --- neighbours pre-computation -----------------------------------------\n    neigh = [[] for _ in range(tot)]\n    for r in range(n):\n        for c in range(m):\n            cur = idx(r, c)\n            for dr, dc in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < n and 0 <= nc < m:\n                    neigh[cur].append(idx(nr, nc))\n\n    # ------------------------------------------------------------------------\n    # helpers for comparing two (possibly very long) decimal strings that\n    # represent non-negative integers.\n    def bigger(a: str, b: str) -> bool:\n        if len(a) != len(b):\n            return len(a) > len(b)\n        return a > b\n\n    best = \"\"                                    # best number found so far\n    best_len = 0\n\n    # dfs with pruning (bitmask for visited cells)\n    def dfs(v: int, mask: int, path: list):\n        nonlocal best, best_len\n\n        # update best with current path\n        cur_len = len(path)\n        if cur_len > best_len or (cur_len == best_len and path_str > best):\n            best = path_str\n            best_len = cur_len\n\n        # remain potential cells\n        remain = tot - cur_len\n        # quick length bound\n        if cur_len + remain < best_len:\n            return\n        # tighter bound when equal length still possible\n        if cur_len + remain == best_len:\n            # the absolute upper bound you could ever obtain from here\n            if not bigger(path_str + '9' * remain, best):\n                return\n\n        # explore neighbours in descending digit order to find good paths fast\n        neigh_sorted = sorted(neigh[v], key=lambda u: grid[u // m][u % m], reverse=True)\n        for u in neigh_sorted:\n            if (mask >> u) & 1:\n                continue\n            path.append(grid[u // m][u % m])\n            nonlocal_path_str = ''.join(path)\n            dfs_node = (u, mask | (1 << u), nonlocal_path_str, list(path))\n            # Avoid passing large objects via closure in recursion for speed/memory\n            dfs_stack.append(dfs_node)\n            path.pop()\n\n    # ------------------------------------------------------------------------\n    # We employ an explicit stack instead of recursion to stay inside Python’s\n    # call-stack limit and to slightly speed things up.\n    dfs_stack = []\n\n    for r in range(n):\n        for c in range(m):\n            pos = idx(r, c)\n            ch = grid[r][c]\n            # push initial state for this starting cell\n            dfs_stack.append((pos, 1 << pos, ch, [ch]))\n\n    while dfs_stack:\n        v, mask, path_str, path_list = dfs_stack.pop()\n        # update best\n        cur_len = len(path_str)\n        if cur_len > best_len or (cur_len == best_len and path_str > best):\n            best = path_str\n            best_len = cur_len\n\n        remain = tot - cur_len\n        if cur_len + remain < best_len:\n            continue\n        if cur_len + remain == best_len and not bigger(path_str + '9' * remain, best):\n            continue\n\n        # neighbours sorted by digit descending\n        for u in sorted(neigh[v], key=lambda x: grid[x // m][x % m], reverse=True):\n            if (mask >> u) & 1:\n                continue\n            ch = grid[u // m][u % m]\n            dfs_stack.append((u, mask | (1 << u), path_str + ch, path_list + [ch]))\n\n    print(best)\n\n# -------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven two integers n and k, find the number of different sequences of length n consisting of positive integers such that the greatest common divisor (GCD) of the sequence is k. Output the answer modulo 10^9+7.\n\nInput:\nThe first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^6).\n\nOutput:\nPrint a single integer: the number of sequences modulo 10^9+7.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\nMOD = 1_000_000_007\n\n\ndef mobius_sieve(limit: int):\n    \"\"\"\n    Linear sieve that returns an array `mu`\n    where mu[i] is the Möbius function value for i (1 ≤ i ≤ limit).\n    \"\"\"\n    mu = [0] * (limit + 1)\n    mu[1] = 1\n    primes = []\n    is_composite = [False] * (limit + 1)\n\n    for i in range(2, limit + 1):\n        if not is_composite[i]:\n            primes.append(i)\n            mu[i] = -1          # i is prime\n        for p in primes:\n            ip = i * p\n            if ip > limit:\n                break\n            is_composite[ip] = True\n            if i % p == 0:      # p is the smallest prime factor of ip appearing twice\n                mu[ip] = 0\n                break\n            else:               # p appears once\n                mu[ip] = -mu[i]\n    return mu\n\n\ndef main() -> None:\n    data = sys.stdin.readline().strip().split()\n    if not data:\n        return\n    n, k = map(int, data)\n\n    # Pre-compute Möbius values up to k\n    mu = mobius_sieve(k)\n\n    # Inclusion–exclusion\n    ans = 0\n    for d in range(1, k + 1):\n        cnt = pow(k // d, n, MOD)          # sequences where every element is divisible by d\n        ans = (ans + mu[d] * cnt) % MOD    # Möbius inversion\n\n    print(ans % MOD)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected graph with N nodes and M edges, determine whether it is possible to remove at most one edge so that the graph becomes acyclic (i.e., a forest).\n\nInput Format:\nThe first line contains two integers N and M (2 ≤ N ≤ 2×10^5, 1 ≤ M ≤ 2×10^5).\nEach of the next M lines contains two integers u and v (1 ≤ u, v ≤ N, u ≠ v), representing an edge between nodes u and v.\n\nOutput Format:\nPrint \"YES\" if it is possible to remove at most one edge to make the graph acyclic, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 25)\n\nclass DSU:\n    __slots__ = ('p', 'r', 'comp')\n    def __init__(self, n: int):\n        self.p = list(range(n))\n        self.r = [0] * n\n        self.comp = n          # number of connected components\n\n    def find(self, x: int) -> int:\n        while self.p[x] != x:\n            self.p[x] = self.p[self.p[x]]\n            x = self.p[x]\n        return x\n\n    def union(self, a: int, b: int):\n        ra, rb = self.find(a), self.find(b)\n        if ra == rb:\n            return\n        if self.r[ra] < self.r[rb]:\n            ra, rb = rb, ra\n        self.p[rb] = ra\n        if self.r[ra] == self.r[rb]:\n            self.r[ra] += 1\n        self.comp -= 1\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    n = int(data[0])\n    m = int(data[1])\n\n    dsu = DSU(n)\n    idx = 2\n    for _ in range(m):\n        u = int(data[idx]) - 1\n        v = int(data[idx + 1]) - 1\n        idx += 2\n        dsu.union(u, v)\n\n    components = dsu.comp\n    # number of independent cycles in an undirected graph\n    cycles = m - (n - components)\n\n    if cycles <= 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a positive integer n, count the number of ways n can be written as the sum of two or more consecutive positive integers.\n\nInput Format:\n- The first line contains a single integer n (1 ≤ n ≤ 10^{12}).\n\nOutput Format:\n- Output a single integer: the number of ways.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport math\n\ndef odd_divisors_count(n: int) -> int:\n    \"\"\"\n    Return the total number of odd divisors of n.\n    \"\"\"\n    # Remove every factor 2 – they do not influence odd divisors\n    while n % 2 == 0:\n        n //= 2\n\n    cnt = 1\n    p = 3\n    # trial division up to sqrt(n); n ≤ 10^12  →  p ≤ 10^6  (fast enough)\n    while p * p <= n:\n        if n % p == 0:\n            exp = 0\n            while n % p == 0:\n                n //= p\n                exp += 1\n            cnt *= (exp + 1)\n        p += 2\n    # whatever is left ( >1 ) is an odd prime factor\n    if n > 1:\n        cnt *= 2\n    return cnt\n\n\ndef main() -> None:\n    data = sys.stdin.readline()\n    n = int(data.strip())\n    \n    # number of ways with ≥2 consecutive terms  =\n    # (number of odd divisors) - 1   (exclude the length-1 representation)\n    ways = odd_divisors_count(n) - 1\n    if ways < 0:\n        ways = 0\n    print(ways)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nYou are given a tree with n nodes, rooted at node 1. Each edge has an integer weight. Find the length of the longest path in the tree such that the sum of the weights along the path is even.\n\nInput Format:\nThe first line contains an integer n (2 ≤ n ≤ 10^5).\nEach of the next n-1 lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), denoting an edge between u and v with weight w.\n\nOutput Format:\nOutput a single integer: the maximum number of edges in such a path.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nsys.setrecursionlimit(1 << 20)\n\ndef main() -> None:\n    INF_NEG = -10 ** 9\n\n    n = int(sys.stdin.readline())\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v, w = map(int, sys.stdin.readline().split())\n        u -= 1\n        v -= 1\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n\n    # parity[i] – parity (0 – even, 1 – odd) of the weight–sum\n    # on the path from the root (vertex 0) to vertex i\n    parity = [0] * n\n\n    def dfs_parity(v: int, p: int, cur_par: int) -> None:\n        parity[v] = cur_par\n        for to, w in adj[v]:\n            if to == p:\n                continue\n            dfs_parity(to, v, cur_par ^ (w & 1))\n\n    dfs_parity(0, -1, 0)\n\n    ans = 0  # global best (number of edges of the longest even-weight path)\n\n    def dfs(v: int, p: int):\n        \"\"\"\n        Returns an array `down` where\n        down[par] = longest number of edges of a downward path that\n        starts at v and ends in its subtree at a vertex whose parity == par.\n        If such a path doesn't exist, value is INF_NEG.\n        \"\"\"\n        nonlocal ans\n        down = [INF_NEG, INF_NEG]\n        down[parity[v]] = 0      # the trivial path consisting only of v\n\n        # best and second best downward paths of every parity seen so far\n        best1 = [INF_NEG, INF_NEG]\n        best2 = [INF_NEG, INF_NEG]\n        best1[parity[v]] = 0     # the trivial path\n\n        for to, _ in adj[v]:\n            if to == p:\n                continue\n            child_down = dfs(to, v)\n            for par in (0, 1):\n                if child_down[par] == INF_NEG:\n                    continue\n                length = child_down[par] + 1          # +1 for the edge (v,to)\n\n                # Combine this path with the best one of the same parity\n                # obtained from another branch – they meet at v\n                if best1[par] != INF_NEG:\n                    ans = max(ans, length + best1[par])\n\n                # update best1 / best2 lists\n                if length > best1[par]:\n                    best2[par] = best1[par]\n                    best1[par] = length\n                elif length > best2[par]:\n                    best2[par] = length\n\n                down[par] = max(down[par], length)\n\n        # single downward path where one endpoint is v itself\n        ans = max(ans, down[parity[v]])\n\n        return down\n\n    dfs(0, -1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of n positive integers, find the length of the longest subsequence where the difference between consecutive elements is at least d.\n\nInput:\n- The first line contains two integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9).\n\nOutput:\n- Output a single integer: the length of the longest such subsequence.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\n\nclass BIT:\n    \"\"\"Fenwick tree that keeps prefix maximums\"\"\"\n    def __init__(self, n: int):\n        self.n = n\n        self.t = [0] * (n + 2)     # 1-based indexing\n\n    def update(self, idx: int, val: int):\n        while idx <= self.n:\n            if val > self.t[idx]:\n                self.t[idx] = val\n            idx += idx & -idx\n\n    def query(self, idx: int) -> int:\n        res = 0\n        while idx:\n            if self.t[idx] > res:\n                res = self.t[idx]\n            idx -= idx & -idx\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    d = int(next(it))\n    a = [int(next(it)) for _ in range(n)]\n\n    # coordinate compression\n    vals = sorted(set(a))\n    m = len(vals)\n    idx_of = {v: i for i, v in enumerate(vals)}\n\n    # two BITs: one for prefix (<= value) and one for suffix (>= value)\n    bit_pre = BIT(m)          # normal order\n    bit_suf = BIT(m)          # reversed order\n    ans = 0\n\n    for x in a:\n        pos = idx_of[x]                   # 0-based coordinate\n\n        # largest dp for values <= x - d\n        left_bound_val = x - d\n        left_idx = bisect.bisect_right(vals, left_bound_val)  # count of vals <= x-d\n        best_left = bit_pre.query(left_idx)                   # prefix maximum\n\n        # largest dp for values >= x + d\n        right_bound_val = x + d\n        right_idx = bisect.bisect_left(vals, right_bound_val)  # first index with val >= x+d\n        if right_idx == m:\n            best_right = 0\n        else:\n            rev_limit = m - right_idx                         # prefix length in reversed order\n            best_right = bit_suf.query(rev_limit)\n\n        cur = 1 + max(best_left, best_right)\n\n        # update both trees with current value\n        bit_pre.update(pos + 1, cur)          # +1 for 1-based BIT\n        bit_suf.update(m - pos, cur)          # reversed coordinate\n        if cur > ans:\n            ans = cur\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of N positive integers, find the minimum number of elements you need to remove so that the sum of the remaining elements is divisible by K.\n\nInput Format:\n- The first line contains two integers N and K (1 ≤ N ≤ 2×10^5, 1 ≤ K ≤ 10^9).\n- The second line contains N space-separated integers A_1, ..., A_N (1 ≤ A_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer: the minimum number of removals required. If it's not possible, print -1.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n\n    n, k = data[0], data[1]\n    nums = data[2:]\n\n    # Remainder of the whole array\n    total_mod = sum(nums) % k\n\n    # Already divisible – nothing to remove\n    if total_mod == 0:\n        print(0)\n        return\n\n    # Dictionary that stores the first index where a given remainder appears\n    first_pos = {0: -1}          # prefix remainder 0 is considered to appear before the array starts\n    prefix = 0\n    best = n + 1                 # minimal length of sub-array to delete\n\n    for i, val in enumerate(nums):\n        prefix = (prefix + val) % k\n        need = (prefix - total_mod) % k    # we want (prefix – previous) % k == total_mod\n\n        if need in first_pos:\n            best = min(best, i - first_pos[need])\n\n        # keep only the earliest position for each remainder,\n        # because it gives the longest possible kept part (= shortest removed part)\n        if prefix not in first_pos:\n            first_pos[prefix] = i\n\n    # If best was never updated the task is impossible, but since removing the whole\n    # array always works it will at least become `n` here.  We keep the extra check\n    # only to follow the statement literally.\n    print(best if best <= n else -1)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of integers, find the length of the longest contiguous subarray with a sum not exceeding a given integer K.\n\nInput:\n- The first line contains two integers N and K (1 ≤ N ≤ 10^5, |K| ≤ 10^9).\n- The second line contains N integers A_1, A_2, ..., A_N (|A_i| ≤ 10^4).\n\nOutput:\n- Output a single integer, the length of the longest contiguous subarray with sum ≤ K.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nimport bisect\n\nINF = 10 ** 18   # something large\n\n\nclass SegTreeMin:\n    \"\"\"segment tree that keeps minimum on a range\"\"\"\n    def __init__(self, n):\n        self.size = 1\n        while self.size < n:\n            self.size <<= 1\n        self.data = [INF] * (self.size << 1)\n\n    def update(self, pos: int, val: int):\n        \"\"\"set data[pos] = min(old, val)\"\"\"\n        pos += self.size\n        if val >= self.data[pos]:          # we only keep the smallest index\n            return\n        self.data[pos] = val\n        pos >>= 1\n        while pos:\n            self.data[pos] = min(self.data[pos << 1], self.data[(pos << 1) | 1])\n            pos >>= 1\n\n    def query(self, l: int, r: int):\n        \"\"\"minimum on [l, r] (inclusive); returns INF if range empty\"\"\"\n        if l > r:\n            return INF\n        l += self.size\n        r += self.size\n        res = INF\n        while l <= r:\n            if l & 1:\n                res = min(res, self.data[l])\n                l += 1\n            if not (r & 1):\n                res = min(res, self.data[r])\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return res\n\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    it = iter(data)\n    N = int(next(it))\n    K = int(next(it))\n    arr = [int(next(it)) for _ in range(N)]\n\n    # prefix sums\n    pref = [0]\n    s = 0\n    for v in arr:\n        s += v\n        pref.append(s)\n\n    # coordinate compression of prefix sums\n    vals = sorted(set(pref))\n    idx_map = {v: i for i, v in enumerate(vals)}\n    M = len(vals)\n\n    seg = SegTreeMin(M)\n\n    # initialise with prefix[0] = 0 at index 0\n    seg.update(idx_map[0], 0)\n\n    best = 0\n\n    for j in range(1, N + 1):\n        target = pref[j] - K\n        # find first compressed position with value >= target\n        pos = bisect.bisect_left(vals, target)\n        if pos < M:\n            i_min = seg.query(pos, M - 1)\n            if i_min != INF and i_min < j:\n                best = max(best, j - i_min)\n\n        # update current prefix sum with its earliest index (j)\n        seg.update(idx_map[pref[j]], j)\n\n    print(best)\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, find the length of the longest contiguous subarray whose sum is at least k.\n\nInput Format:\n- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9).\n- The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9).\n\nOutput Format:\n- Print a single integer, the length of the longest contiguous subarray with sum at least k. If no such subarray exists, print 0.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom bisect import bisect_left\n\ndef main() -> None:\n    data = list(map(int, sys.stdin.buffer.read().split()))\n    if not data:\n        return\n    n, k = data[0], data[1]\n    a = data[2:]\n\n    # prefix sums P[0] = 0, P[i] = sum_{0..i-1}\n    P = [0] * (n + 1)\n    s = 0\n    for i in range(n):\n        s += a[i]\n        P[i + 1] = s\n\n    # Build list of indices that are running minima of prefix sums.\n    # Their corresponding prefix-sum values are strictly decreasing,\n    # and indices are strictly increasing.\n    min_vals = []      # prefix-sum values\n    min_idx  = []      # their indices\n    for i in range(n + 1):\n        if not min_vals or P[i] < min_vals[-1]:\n            min_vals.append(P[i])\n            min_idx.append(i)\n\n    ans = 0\n    m = len(min_idx)\n    r = m - 1               # rightmost position in min_idx we may use\n\n    # Scan end index i from right to left\n    for i in range(n, 0, -1):          # i is the end of subarray (exclusive)\n        # shrink r so that min_idx[r] < i (sub-array must be non-empty)\n        while r >= 0 and min_idx[r] >= i:\n            r -= 1\n        if r < 0:\n            continue\n\n        target = P[i] - k               # need P[j] <= target\n\n        # binary search (on a strictly decreasing array) for the earliest\n        # position 'pos' in [0 .. r] whose value <= target\n        lo, hi, pos = 0, r, -1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if min_vals[mid] <= target:\n                pos = mid\n                hi = mid - 1            # look for an even earlier one\n            else:\n                lo = mid + 1\n\n        if pos != -1:\n            j = min_idx[pos]\n            length = i - j\n            if length > ans:\n                ans = length\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an undirected connected graph with n nodes and m edges, and a set of k special nodes, find the minimum number of edges you need to remove so that no two special nodes are in the same connected component.\n\nInput:\nThe first line contains three integers n, m, and k (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2×10^5, 2 ≤ k ≤ n).\nThe second line contains k distinct integers denoting the special nodes.\nThe next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting an edge.\n\nOutput:\nOutput a single integer, the minimum number of edges to remove.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\nfrom collections import deque\n\ndef main() -> None:\n    sys.setrecursionlimit(1 << 25)\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    m = int(next(it))\n    k = int(next(it))\n\n    special = [int(next(it)) for _ in range(k)]\n\n    # build graph, keep id for each edge\n    adj = [[] for _ in range(n + 1)]\n    for idx in range(m):\n        u = int(next(it))\n        v = int(next(it))\n        adj[u].append((v, idx))\n        adj[v].append((u, idx))\n\n    colour = [0] * (n + 1)          # 0 = unvisited; otherwise id of its special root\n    q = deque()\n    for s in special:\n        colour[s] = s\n        q.append(s)\n\n    removed = [False] * m           # mark edges that have to be deleted\n\n    while q:\n        u = q.popleft()\n        cu = colour[u]\n        for v, eid in adj[u]:\n            cv = colour[v]\n            if cv == 0:\n                colour[v] = cu\n                q.append(v)\n            elif cv != cu:\n                removed[eid] = True   # edge connects two different special areas\n\n    # answer is the number of such edges\n    print(sum(removed))\n\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven an array of n integers, partition the array into the minimum number of contiguous subarrays such that the sum of each subarray is strictly greater than the sum of the previous subarray. Output the minimum number of subarrays.\n\nInput:\nThe first line contains an integer n (1 ≤ n ≤ 10^5).\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4).\n\nOutput:\nPrint a single integer: the minimum number of contiguous subarrays.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main():\n    # Read the whole input (not really needed for the computation)\n    _ = sys.stdin.readline()      # read n\n    _ = sys.stdin.readline()      # read the array\n    # The entire array itself is already a contiguous sub-array,\n    # and with only one sub-array the “strictly greater than the\n    # previous sub-array” condition is vacuously satisfied.\n    # Hence the minimum possible number is always 1.\n    print(1)\n\nif __name__ == \"__main__\":\n    main()\n```"
    },
    {
        "system": "You are an expert Python programmer. You will be given a question (problem specification) and will generate a correct Python program that matches the specification and passes all tests.",
        "instruction": "### Question:\nGiven a sequence of N integers, determine if there exists a subsequence of length at least 3 that forms an arithmetic progression.\n\nInput Format:\nThe first line contains an integer N (1 ≤ N ≤ 10^5).\nThe second line contains N integers A_1, A_2, ..., A_N (−10^9 ≤ A_i ≤ 10^9).\n\nOutput Format:\nPrint \"YES\" if such a subsequence exists, otherwise print \"NO\".\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows. Ensure that when the python program runs, it reads the inputs, runs the algorithm and writes output to STDOUT.\n```python\n# YOUR CODE HERE\n```\n\n### Answer: (use the provided format with backticks)\n\n",
        "output": "```python\nimport sys\n\ndef main() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    n = int(data[0])\n    a = list(map(int, data[1:1 + n]))\n\n    # an arithmetic progression needs at least 3 elements\n    if n < 3:\n        print(\"NO\")\n        return\n\n    # current length of the contiguous run of equal differences\n    curr_len = 2\n    diff = a[1] - a[0]\n\n    for i in range(2, n):\n        d = a[i] - a[i - 1]\n        if d == diff:\n            curr_len += 1\n            if curr_len >= 3:\n                print(\"YES\")\n                return\n        else:\n            diff = d\n            curr_len = 2\n\n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n```"
    }
]